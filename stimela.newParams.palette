{
   "modelData": {
      "filePath": "stimela.newParams.palette",
      "fileType": "palette",
      "git_url": "",
      "repo": "",
      "repoBranch": "",
      "repoService": "Unknown",
      "sha": "",
      "readonly": false
   },
   "nodeDataArray": [
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "A source finding program designed to find and characterise compact continuum radio sources",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "A source finding program designed to find and characterise compact continuum radio sources",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/aegean:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " aegean"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Image to extract radio sources",
               "name": "filename",
               "readonly": false,
               "text": "filename",
               "type": "String",
               "value": null
            },
            {
               "description": "Additional table outputs, format inferred from extension (database: .db, votable: .vot, and ascii: .csv/.tab)",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            },
            {
               "description": "If the input data is a cube, then this slice will determine the array index of the image which will be processed by aegean",
               "name": "slice",
               "readonly": false,
               "text": "slice",
               "type": "Integer",
               "value": null
            },
            {
               "description": "A .fits file that represents the local psf",
               "name": "psf",
               "readonly": false,
               "text": "psf",
               "type": "String",
               "value": null
            },
            {
               "description": "A .fits file that represents the image noise",
               "name": "noise",
               "readonly": false,
               "text": "noise",
               "type": "String",
               "value": null
            },
            {
               "description": "Use this regions file to restrict source finding in this image. Use MIMAS region (.mim) files.",
               "name": "region",
               "readonly": false,
               "text": "region",
               "type": "String",
               "value": null
            },
            {
               "description": "Assume a single image noise of rms",
               "name": "forcerms",
               "readonly": false,
               "text": "forcerms",
               "type": "Float",
               "value": null
            },
            {
               "description": "Assume a single image background",
               "name": "forcebkg",
               "readonly": false,
               "text": "forcebkg",
               "type": "Float",
               "value": null
            },
            {
               "description": "If more than *maxsummits* summits are detected in an island, no fitting is done, only estimation. [default: no limit]",
               "name": "maxsummits",
               "readonly": false,
               "text": "maxsummits",
               "type": "Integer",
               "value": null
            },
            {
               "description": "The clipping value (in sigmas) for seeding islands",
               "name": "seedclip",
               "readonly": false,
               "text": "seedclip",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "The clipping value (in sigmas) for growing islands",
               "name": "floodclip",
               "readonly": false,
               "text": "floodclip",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Convert output model to tigger format",
               "name": "port2tigger",
               "readonly": false,
               "text": "port2tigger",
               "type": "Boolean",
               "value": true
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "aegean",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "An Astronomical Image Fidelity Assessment Tool",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "An Astronomical Image Fidelity Assessment Tool",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/aimfast:1.6.6"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " aimfast"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Residual image to extract the statistical distribution of residual flux",
               "name": "residual-image",
               "readonly": false,
               "text": "residual-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Model caltalog (lsm.html/text) file to extract peak source flux",
               "name": "tigger-model",
               "readonly": false,
               "text": "tigger-model",
               "type": "String",
               "value": null
            },
            {
               "description": "Restored image to extract the dynamic range",
               "name": "restored-image",
               "readonly": false,
               "text": "restored-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Factor to multiply the psf size to get peak source area (tot_area = psf-size*af)",
               "name": "area-factor",
               "readonly": false,
               "text": "area-factor",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Name of the point spread function file or psf size in arcsec",
               "name": "psf",
               "readonly": false,
               "text": "psf",
               "type": "Float",
               "value": null
            },
            {
               "description": "Name of model to use for normality testing.",
               "name": "normality-test",
               "readonly": false,
               "text": "normality-test",
               "type": "String",
               "value": null
            },
            {
               "description": "Label",
               "name": "label",
               "readonly": false,
               "text": "label",
               "type": "String",
               "value": null
            },
            {
               "description": "Data range to perform normality testing",
               "name": "data-range",
               "readonly": false,
               "text": "data-range",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Source catalog (text/lsm.html) files to compare",
               "name": "compare-models",
               "readonly": false,
               "text": "compare-models",
               "type": "String",
               "value": null
            },
            {
               "description": "List of restored image (fits) files to compare. Note that this will initially run a source finder.",
               "name": "compare-images",
               "readonly": false,
               "text": "compare-images",
               "type": "String",
               "value": null
            },
            {
               "description": "List of catalog models files to compare with online catalog",
               "name": "compare-online",
               "readonly": false,
               "text": "compare-online",
               "type": "String",
               "value": null
            },
            {
               "description": "Residual (fits) files to compare. e.g: ['res1.fits', 'res2.fits']",
               "name": "compare-residuals",
               "readonly": false,
               "text": "compare-residuals",
               "type": "String",
               "value": null
            },
            {
               "description": "Data points to randomly sample the residual/noise image",
               "name": "data-points",
               "readonly": false,
               "text": "data-points",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Tolerance to cross-match sources in arcsec",
               "name": "tolerance",
               "readonly": false,
               "text": "tolerance",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of decimal places to round off results",
               "name": "decimals",
               "readonly": false,
               "text": "decimals",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Type of plot for flux comparison of the two catalogs",
               "name": "flux-plot",
               "readonly": false,
               "text": "flux-plot",
               "type": "String",
               "value": null
            },
            {
               "description": "Get stats of channels with pixel flux above thresh in Jy/Beam",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "Float",
               "value": null
            },
            {
               "description": "Get stats of specified channels e.g. '10~20;100~1000'",
               "name": "channels",
               "readonly": false,
               "text": "channels",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of the mask image fits file",
               "name": "mask-image",
               "readonly": false,
               "text": "mask-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix of output html files",
               "name": "html-prefix",
               "readonly": false,
               "text": "html-prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix of output catalog file name",
               "name": "online-catalog-name",
               "readonly": false,
               "text": "online-catalog-name",
               "type": "String",
               "value": null
            },
            {
               "description": "Online catalog to compare local image/model.",
               "name": "online-catalog",
               "readonly": false,
               "text": "online-catalog",
               "type": "String",
               "value": null
            },
            {
               "description": "Factor to multiply the field of view for random points. i.e. 0.0-1.0'",
               "name": "fov-factor",
               "readonly": false,
               "text": "fov-factor",
               "type": "Float",
               "value": null
            },
            {
               "description": "Use the closest source only when cross matching sources",
               "name": "closest",
               "readonly": false,
               "text": "closest",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Compare all sources irrespective of shape, otherwise only point-like sources are compared",
               "name": "all-sources",
               "readonly": false,
               "text": "all-sources",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Source finder to run if comparing restored images",
               "name": "source-finder",
               "readonly": false,
               "text": "source-finder",
               "type": "String",
               "value": null
            },
            {
               "description": "Source finder parameter file",
               "name": "config",
               "readonly": false,
               "text": "config",
               "type": "String",
               "value": null
            },
            {
               "description": "Source finder parameter file",
               "name": "config",
               "readonly": false,
               "text": "config",
               "type": "String",
               "value": null
            },
            {
               "description": "Input aimfast fidelity results file (JSON format) to get plots",
               "name": "fidelity-results",
               "readonly": false,
               "text": "fidelity-results",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output file name",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "aimfast",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "This program will execute an RFI strategy as can be created with the RFI gui and executes it on one or several observations.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "This program will execute an RFI strategy as can be created with the RFI gui and executes it on one or several observations.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/aoflagger:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " aoflagger"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS name(s) to be flagged",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": false
            },
            {
               "description": "Produce verbose output",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "overrides the number of threads specified in the strategy (default: one thread for each CPU core)",
               "name": "threads",
               "readonly": false,
               "text": "threads",
               "type": "Integer",
               "value": null
            },
            {
               "description": "specifies a possible customized strategy",
               "name": "strategy",
               "readonly": false,
               "text": "strategy",
               "type": "String",
               "value": null
            },
            {
               "description": "will reorder the measurement set before starting, which is normally faster but requires free disk space to reorder the data to",
               "name": "indirect-read",
               "readonly": false,
               "text": "indirect-read",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "will read the entire measurement set in memory. This is the fastest, but requires much memory.",
               "name": "memory-read",
               "readonly": false,
               "text": "memory-read",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "will select either memory or direct mode based on available memory",
               "name": "auto-read-mode",
               "readonly": false,
               "text": "auto-read-mode",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "reads uvw values (some exotic strategies require these)",
               "name": "uvw",
               "readonly": false,
               "text": "uvw",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "specify column to flag",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": "DATA"
            },
            {
               "description": "will skip an ms if it has already been processed by AOFlagger according to its HISTORY table.",
               "name": "skip-flagged",
               "readonly": false,
               "text": "skip-flagged",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "comma separated list of (zero-indexed) band ids to process",
               "name": "bands",
               "readonly": false,
               "text": "bands",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Field ID(s). Comma separated string if more than one field",
               "name": "fields",
               "readonly": false,
               "text": "fields",
               "type": "Integer",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "autoflagger",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Uses MeqTrees to calibrate a measurement set, given a sky model (Gaussians and point sources, and/or visibility data in MODEL_DATA column)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Uses MeqTrees to calibrate a measurement set, given a sky model (Gaussians and point sources, and/or visibility data in MODEL_DATA column)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/meqtrees:1.6.3"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " /usr/bin/meqtree-pipeliner.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of MS to be calibrated",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Sky model to use for the calibration",
               "name": "skymodel",
               "readonly": false,
               "text": "skymodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Source subset to use for the calibration",
               "name": "subset",
               "readonly": false,
               "text": "subset",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Add visibility model data to the calibration model. This model should be saved in the MODEL_DATA column",
               "name": "add-vis-model",
               "readonly": false,
               "text": "add-vis-model",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Visbility model column",
               "name": "model-column",
               "readonly": false,
               "text": "model-column",
               "type": "String",
               "value": "MODEL_DATA"
            },
            {
               "description": "Label for gain and diagnostic plots from the caibration. May not be needed if 'prefix' is provided.",
               "name": "label",
               "readonly": false,
               "text": "label",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix for gain and diagnostic plots. If not specified will use basename of MS.",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Make gain plots",
               "name": "make-plots",
               "readonly": false,
               "text": "make-plots",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Column that has the data to be calibrated",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": "DATA"
            },
            {
               "description": "Column that the calibrated data should be dumped into",
               "name": "output-column",
               "readonly": false,
               "text": "output-column",
               "type": "String",
               "value": "CORRECTED_DATA"
            },
            {
               "description": "Data to be outputed after calibration",
               "name": "output-data",
               "readonly": false,
               "text": "output-data",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of CPUs to use for  multithreading",
               "name": "threads",
               "readonly": false,
               "text": "threads",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "TDL configuration file. If not specified, will use a default template",
               "name": "tdlconf",
               "readonly": false,
               "text": "tdlconf",
               "type": "String",
               "value": null
            },
            {
               "description": "save final configuration (after all command-line arguments have been applied)",
               "name": "save-config",
               "readonly": false,
               "text": "save-config",
               "type": "String",
               "value": null
            },
            {
               "description": "Section to execute in TDL config file. Only needed if using custom TDL config",
               "name": "section",
               "readonly": false,
               "text": "section",
               "type": "String",
               "value": null
            },
            {
               "description": "Correlations to use",
               "name": "correlations",
               "readonly": false,
               "text": "correlations",
               "type": "String",
               "value": "2x2"
            },
            {
               "description": "Field ID",
               "name": "field-id",
               "readonly": false,
               "text": "field-id",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "SPW ID",
               "name": "spw-id",
               "readonly": false,
               "text": "spw-id",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Write flags to MS",
               "name": "write-flags-to-ms",
               "readonly": false,
               "text": "write-flags-to-ms",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "name of flagset to write new flags to",
               "name": "write-flagset",
               "readonly": false,
               "text": "write-flagset",
               "type": "String",
               "value": null
            },
            {
               "description": "Add or replace flagset if it already exists.",
               "name": "write-flagset-policy",
               "readonly": false,
               "text": "write-flagset-policy",
               "type": "String",
               "value": "replace"
            },
            {
               "description": "Read flagsets",
               "name": "read-flagsets",
               "readonly": false,
               "text": "read-flagsets",
               "type": "String",
               "value": null
            },
            {
               "description": "Read legacy flags",
               "name": "read-legacy-flags",
               "readonly": false,
               "text": "read-legacy-flags",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Use existing flags from MS",
               "name": "read-flags-from-ms",
               "readonly": false,
               "text": "read-flags-from-ms",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Fill legacy flags",
               "name": "fill-legacy-flags",
               "readonly": false,
               "text": "fill-legacy-flags",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Add a primary beam model",
               "name": "Ejones",
               "readonly": false,
               "text": "Ejones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Beam files pattern",
               "name": "beam-files-pattern",
               "readonly": false,
               "text": "beam-files-pattern",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of input beam files",
               "name": "beam-type",
               "readonly": false,
               "text": "beam-type",
               "type": "String",
               "value": "fits"
            },
            {
               "description": "Beam l axis",
               "name": "beam-l-axis",
               "readonly": false,
               "text": "beam-l-axis",
               "type": "String",
               "value": "X"
            },
            {
               "description": "Beam m axis",
               "name": "beam-m-axis",
               "readonly": false,
               "text": "beam-m-axis",
               "type": "String",
               "value": "Y"
            },
            {
               "description": "Enable parallactic angle rotation. Enable if telescope mount is ALT-AZ",
               "name": "parallactic-angle-rotation",
               "readonly": false,
               "text": "parallactic-angle-rotation",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enable direction dependent calibration",
               "name": "Gjones",
               "readonly": false,
               "text": "Gjones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Jones matrix type",
               "name": "Gjones-matrix-type",
               "readonly": false,
               "text": "Gjones-matrix-type",
               "type": "String",
               "value": "Gain2x2"
            },
            {
               "description": "Solution intervals in time and frequency in time/frequency bins. Should be given as a list of two integers",
               "name": "Gjones-solution-intervals",
               "readonly": false,
               "text": "Gjones-solution-intervals",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution intervals in time and frequency in time/frequency bins. Should be given as a list of two integers",
               "name": "Gjones-smoothing-intervals",
               "readonly": false,
               "text": "Gjones-smoothing-intervals",
               "type": "String",
               "value": null
            },
            {
               "description": "Gjones amplitude clipping",
               "name": "Gjones-ampl-clipping",
               "readonly": false,
               "text": "Gjones-ampl-clipping",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Gjones chi square clipping",
               "name": "Gjones-chisq-clipping",
               "readonly": false,
               "text": "Gjones-chisq-clipping",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Gjones threshold level",
               "name": "Gjones-thresh-sigma",
               "readonly": false,
               "text": "Gjones-thresh-sigma",
               "type": "Float",
               "value": 10
            },
            {
               "description": "Gjones flagging amplitude",
               "name": "Gjones-ampl-clipping-low",
               "readonly": false,
               "text": "Gjones-ampl-clipping-low",
               "type": "Float",
               "value": 0.2
            },
            {
               "description": "Gjones flagging amplitude",
               "name": "Gjones-ampl-clipping-high",
               "readonly": false,
               "text": "Gjones-ampl-clipping-high",
               "type": "Float",
               "value": 1.8
            },
            {
               "description": "Apply existing gains",
               "name": "Gjones-apply-only",
               "readonly": false,
               "text": "Gjones-apply-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "G Jones gain table file name",
               "name": "Gjones-gain-table",
               "readonly": false,
               "text": "Gjones-gain-table",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable Bjones direction dependent calibration ",
               "name": "Bjones",
               "readonly": false,
               "text": "Bjones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Solution intervals in time and frequency in time/frequency bins for Bjones. Should be given as a list of two integers",
               "name": "Bjones-solution-intervals",
               "readonly": false,
               "text": "Bjones-solution-intervals",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution intervals in time and frequency in time/frequency bins for Bjones. Should be given as a list of two integers",
               "name": "Bjones-smoothing-intervals",
               "readonly": false,
               "text": "Bjones-smoothing-intervals",
               "type": "String",
               "value": null
            },
            {
               "description": "Bjones amplitude clipping",
               "name": "Bjones-ampl-clipping",
               "readonly": false,
               "text": "Bjones-ampl-clipping",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Bjones chi square clipping",
               "name": "Bjones-chisq-clipping",
               "readonly": false,
               "text": "Bjones-chisq-clipping",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Bjones threshold level",
               "name": "Bjones-thresh-sigma",
               "readonly": false,
               "text": "Bjones-thresh-sigma",
               "type": "Float",
               "value": 10
            },
            {
               "description": "Bjones flagging amplitude",
               "name": "Bjones-ampl-clipping-low",
               "readonly": false,
               "text": "Bjones-ampl-clipping-low",
               "type": "Float",
               "value": 0.2
            },
            {
               "description": "Bjones flagging amplitude",
               "name": "Bjones-ampl-clipping-high",
               "readonly": false,
               "text": "Bjones-ampl-clipping-high",
               "type": "Float",
               "value": 1.8
            },
            {
               "description": "Apply existing gains",
               "name": "Bjones-apply-only",
               "readonly": false,
               "text": "Bjones-apply-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "B Jones gain table file name",
               "name": "Bjones-gain-table",
               "readonly": false,
               "text": "Bjones-gain-table",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable direction dependent calibration",
               "name": "DDjones",
               "readonly": false,
               "text": "DDjones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Jones matrix type",
               "name": "DDjones-matrix-type",
               "readonly": false,
               "text": "DDjones-matrix-type",
               "type": "String",
               "value": "Gain2x2"
            },
            {
               "description": "Number of iterations",
               "name": "DDjones-niter",
               "readonly": false,
               "text": "DDjones-niter",
               "type": "Integer",
               "value": 50
            },
            {
               "description": "Tag for sources that will recieve DD calibration",
               "name": "DDjones-tag",
               "readonly": false,
               "text": "DDjones-tag",
               "type": "String",
               "value": "dE"
            },
            {
               "description": "Solution intervals in time and frequency in time/frequency bins. Should be given as a list of two integers",
               "name": "DDjones-solution-intervals",
               "readonly": false,
               "text": "DDjones-solution-intervals",
               "type": "String",
               "value": null
            },
            {
               "description": "Smoothing intervals in time and frequency in time/frequency bins. Should be given as a list of two integers",
               "name": "DDjones-smoothing-intervals",
               "readonly": false,
               "text": "DDjones-smoothing-intervals",
               "type": "String",
               "value": null
            },
            {
               "description": "DDjones amplitude clipping",
               "name": "DDjones-ampl-clipping",
               "readonly": false,
               "text": "DDjones-ampl-clipping",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "DDjones chi square clipping",
               "name": "DDjones-chisq-clipping",
               "readonly": false,
               "text": "DDjones-chisq-clipping",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "DDjones threshold level",
               "name": "DDjones-thresh-sigma",
               "readonly": false,
               "text": "DDjones-thresh-sigma",
               "type": "Float",
               "value": 10
            },
            {
               "description": "DDjones flagging amplitude",
               "name": "DDjones-ampl-clipping-low",
               "readonly": false,
               "text": "DDjones-ampl-clipping-low",
               "type": "Float",
               "value": 0.2
            },
            {
               "description": "DDjones flagging amplitude",
               "name": "DDjones-ampl-clipping-high",
               "readonly": false,
               "text": "DDjones-ampl-clipping-high",
               "type": "Float",
               "value": 1.8
            },
            {
               "description": "Apply existing gains",
               "name": "DDjones-apply-only",
               "readonly": false,
               "text": "DDjones-apply-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "DD Jones gain table file name",
               "name": "DDjones-gain-table",
               "readonly": false,
               "text": "DDjones-gain-table",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable interferometer based gain solutions",
               "name": "IFRjones",
               "readonly": false,
               "text": "IFRjones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply existing gains",
               "name": "IFRjones-apply-only",
               "readonly": false,
               "text": "IFRjones-apply-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "IFR Jones gain table file name",
               "name": "IFRjones-gain-table",
               "readonly": false,
               "text": "IFRjones-gain-table",
               "type": "String",
               "value": null
            },
            {
               "description": "Size of tile (time bins) to process. Can be used to reduce memory footprint",
               "name": "tile-size",
               "readonly": false,
               "text": "tile-size",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "TaQL selction string",
               "name": "data-selection",
               "readonly": false,
               "text": "data-selection",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "calibrator",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Apply calibrations solutions(s) to data",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Apply calibrations solutions(s) to data",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa47:1.4.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " applycal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Select observing intent",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange (default units meters)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Temporal interpolation for each gaintable (=linear)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibrate data weights per gaintable.",
               "name": "calwt",
               "readonly": false,
               "text": "calwt",
               "type": "String",
               "value": [
                  true
               ]
            },
            {
               "description": "Apply parallactic angle correction on the fly",
               "name": "parang",
               "readonly": false,
               "text": "parang",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Calibration mode: '' = 'calflag','calflagstrict','trial','flagonly','flagonlystrict', or 'calonly'",
               "name": "applymode",
               "readonly": false,
               "text": "applymode",
               "type": "String",
               "value": ""
            },
            {
               "description": "Automatically back up the state of flags before the run?",
               "name": "flagbackup",
               "readonly": false,
               "text": "flagbackup",
               "type": "Boolean",
               "value": true
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_applycal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Calculates a bandpass calibration solution",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Calculates a bandpass calibration solution",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa47:1.4.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " bandpass"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Field Name or id",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows e.g. '0~3', '' is all",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Range of time to select from data, e.g. timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID range",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution interval in time[,freq]",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": "scan"
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum baselines _per antenna_ required for solve",
               "name": "minblperant",
               "readonly": false,
               "text": "minblperant",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Reject solutions below this SNR (only applies for bandtype = B)",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Normalize average solution amplitudes to 1.0",
               "name": "solnorm",
               "readonly": false,
               "text": "solnorm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of bandpass solution (B or BPOLY)",
               "name": "bandtype",
               "readonly": false,
               "text": "bandtype",
               "type": "String",
               "value": "B"
            },
            {
               "description": "Fill flagged solution channels by interpolation",
               "name": "fillgaps",
               "readonly": false,
               "text": "fillgaps",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Polynomial degree for BPOLY amplitude solution",
               "name": "degamp",
               "readonly": false,
               "text": "degamp",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Polynomial degree for BPOLY phase solution",
               "name": "degphase",
               "readonly": false,
               "text": "degphase",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Normalize data prior to BPOLY solution",
               "name": "visnorm",
               "readonly": false,
               "text": "visnorm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of channels to avoid in center of each band",
               "name": "maskcenter",
               "readonly": false,
               "text": "maskcenter",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Fraction of channels to avoid at each band edge (in %)",
               "name": "maskedge",
               "readonly": false,
               "text": "maskedge",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Point source Stokes parameters for source model.",
               "name": "smodel",
               "readonly": false,
               "text": "smodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Interpolation mode (in time) to use for each gaintable",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Reject solutions below this SNR (only applies for bandtype = B)",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Apply parallactic angle correction",
               "name": "parang",
               "readonly": false,
               "text": "parang",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_bandpass",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Specify Calibration Values of Various Types",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Specify Calibration Values of Various Types",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa47:1.4.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " gaincal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange (default units meters)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution interval: egs. 'inf', '60s' (see help)",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or, field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": null
            },
            {
               "description": "Pre-averaging interval (sec) (rarely needed)",
               "name": "preavg",
               "readonly": false,
               "text": "preavg",
               "type": "Float",
               "value": -1.0
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum baselines _per antenna_ required for solve",
               "name": "minblperant",
               "readonly": false,
               "text": "minblperant",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Reject solutions below this SNR",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Normalize average solution amplitudes to 1.0 (G, T only)",
               "name": "solnorm",
               "readonly": false,
               "text": "solnorm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of gain solution (G,T,GSPLINE,K,KCROSS)",
               "name": "gaintype",
               "readonly": false,
               "text": "gaintype",
               "type": "String",
               "value": "G"
            },
            {
               "description": "Spline timescale(sec); All spw's are first averaged.",
               "name": "splinetime",
               "readonly": false,
               "text": "splinetime",
               "type": "Float",
               "value": 3600.0
            },
            {
               "description": "The phase-unwrapping algorithm",
               "name": "npointaver",
               "readonly": false,
               "text": "npointaver",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Wrap the phase for jumps greater than this value (degrees)",
               "name": "phasewrap",
               "readonly": false,
               "text": "phasewrap",
               "type": "Float",
               "value": 180.0
            },
            {
               "description": "Point source Stokes parameters for source model.",
               "name": "smodel",
               "readonly": false,
               "text": "smodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of solution: ('ap', 'p', 'a')",
               "name": "calmode",
               "readonly": false,
               "text": "calmode",
               "type": "String",
               "value": "ap"
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Temporal interpolation for each gaintable (=linear)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply parallactic angle correction on the fly",
               "name": "parang",
               "readonly": false,
               "text": "parang",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_gaincal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Plot the uv distribution",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Plot the uv distribution",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa47:1.4.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " plotuv"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Save the plotted figure to this file",
               "name": "figfile",
               "readonly": false,
               "text": "figfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using ID(s) or name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select (sub)array(s) by array ID number",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": ""
            },
            {
               "description": "Maximum number of points per plot.",
               "name": "maxnpts",
               "readonly": false,
               "text": "maxnpts",
               "type": "Integer",
               "value": 100000
            },
            {
               "description": "a list of matplotlib color codes",
               "name": "colors",
               "readonly": false,
               "text": "colors",
               "type": "String",
               "value": [
                  "r",
                  "y",
                  "g",
                  "b"
               ]
            },
            {
               "description": "A matplotlib plot symbol code",
               "name": "symb",
               "readonly": false,
               "text": "symb",
               "type": "String",
               "value": ","
            },
            {
               "description": "How many times to cycle through colors per plot.",
               "name": "ncycles",
               "readonly": false,
               "text": "ncycles",
               "type": "Integer",
               "value": 1
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_plotuv",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Specify Calibration Values of Various Types",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Specify Calibration Values of Various Types",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa47:1.4.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " polcal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "vis",
               "readonly": false,
               "text": "vis",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange (default units meters)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution interval: egs. 'inf', '60s' (see help)",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": "obs,scan"
            },
            {
               "description": "Pre-averaging interval (sec) ",
               "name": "preavg",
               "readonly": false,
               "text": "preavg",
               "type": "Float",
               "value": 300.0
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum baselines _per antenna_ required for solve",
               "name": "minblperant",
               "readonly": false,
               "text": "minblperant",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Reject solutions below this SNR",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Type of instrumental polarization solution (see help)",
               "name": "poltype",
               "readonly": false,
               "text": "poltype",
               "type": "String",
               "value": "D+QU"
            },
            {
               "description": "Point source Stokes parameters for source model.",
               "name": "smodel",
               "readonly": false,
               "text": "smodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "String",
               "value": null
            },
            {
               "description": "Interpolation mode (in time) to use for each gaintable(s)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_polcal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Fills the model column with the visibilities of a calibrator",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Fills the model column with the visibilities of a calibrator",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa47:1.4.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " setjy"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Field Name(s). Comma separated string of field IDs/names",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral window identifier (list)",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Time range to operate on (for usescratch=T)",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range (for  usescratch=T)",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID range (for  usescratch=T)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation intent",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "scale the flux density on a per channel basis or else on a per spw basis",
               "name": "scalebychan",
               "readonly": false,
               "text": "scalebychan",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Flux density standard",
               "name": "standard",
               "readonly": false,
               "text": "standard",
               "type": "String",
               "value": "Perley-Butler 2010"
            },
            {
               "description": "method to be used to interpolate in time",
               "name": "interpolation",
               "readonly": false,
               "text": "interpolation",
               "type": "String",
               "value": "linear"
            },
            {
               "description": "use directions in the ephemeris table",
               "name": "useephemdir",
               "readonly": false,
               "text": "useephemdir",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Specified flux density [I,Q,U,V]; (-1 will lookup values)",
               "name": "fluxdensity",
               "readonly": false,
               "text": "fluxdensity",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral index of fluxdensity",
               "name": "spix",
               "readonly": false,
               "text": "spix",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Polarization index of calibrator (taylor expansion modelling frequency dependence, first of which is ratio of sqrt(Q^2+U^2)/I). Auto determined if Q and U are non-zero in fluxdensity option. See NRAO docs.",
               "name": "polindex",
               "readonly": false,
               "text": "polindex",
               "type": "Float",
               "value": []
            },
            {
               "description": "Polarization angle (rads) of calibrator (taylor expansion modelling frequency dependence, first of which is 0.5*arctan(U/Q). Should be specified in combination with polindex option. Ignored if fluxdensity specified non-zero coefficients for Q and U. See NRAO docs.",
               "name": "polangle",
               "readonly": false,
               "text": "polangle",
               "type": "Float",
               "value": []
            },
            {
               "description": "Reference frequency for spix",
               "name": "reffreq",
               "readonly": false,
               "text": "reffreq",
               "type": "String",
               "value": "1GHz"
            },
            {
               "description": "output dictionary from fluxscale(NB: this is a dictionary)",
               "name": "fluxdict",
               "readonly": false,
               "text": "fluxdict",
               "type": "String",
               "value": null
            },
            {
               "description": "List the available modimages for VLA calibrators or Tb models for Solar System objects",
               "name": "listmodels",
               "readonly": false,
               "text": "listmodels",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "File location for field model",
               "name": "model",
               "readonly": false,
               "text": "model",
               "type": "String",
               "value": null
            },
            {
               "description": "Will create if necessary and use the MODEL_DATA",
               "name": "usescratch",
               "readonly": false,
               "text": "usescratch",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_setjy",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Apply calibrations solutions(s) to data",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Apply calibrations solutions(s) to data",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c applycal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Select observing intent",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange (default units meters)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Temporal interpolation for each gaintable (=linear)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibrate data weights per gaintable.",
               "name": "calwt",
               "readonly": false,
               "text": "calwt",
               "type": "String",
               "value": [
                  true
               ]
            },
            {
               "description": "Apply parallactic angle correction on the fly",
               "name": "parang",
               "readonly": false,
               "text": "parang",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Calibration mode: '' = 'calflag','calflagstrict','trial','flagonly','flagonlystrict', or 'calonly'",
               "name": "applymode",
               "readonly": false,
               "text": "applymode",
               "type": "String",
               "value": ""
            },
            {
               "description": "Automatically back up the state of flags before the run?",
               "name": "flagbackup",
               "readonly": false,
               "text": "flagbackup",
               "type": "Boolean",
               "value": true
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_applycal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Calculates a bandpass calibration solution",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Calculates a bandpass calibration solution",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c bandpass"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Field Name or id",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows e.g. '0~3', '' is all",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Range of time to select from data, e.g. timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID range",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution interval in time[,freq]",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": "scan"
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum baselines _per antenna_ required for solve",
               "name": "minblperant",
               "readonly": false,
               "text": "minblperant",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Reject solutions below this SNR (only applies for bandtype = B)",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Normalize average solution amplitudes to 1.0",
               "name": "solnorm",
               "readonly": false,
               "text": "solnorm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of bandpass solution (B or BPOLY)",
               "name": "bandtype",
               "readonly": false,
               "text": "bandtype",
               "type": "String",
               "value": "B"
            },
            {
               "description": "Fill flagged solution channels by interpolation",
               "name": "fillgaps",
               "readonly": false,
               "text": "fillgaps",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Polynomial degree for BPOLY amplitude solution",
               "name": "degamp",
               "readonly": false,
               "text": "degamp",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Polynomial degree for BPOLY phase solution",
               "name": "degphase",
               "readonly": false,
               "text": "degphase",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Normalize data prior to BPOLY solution",
               "name": "visnorm",
               "readonly": false,
               "text": "visnorm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of channels to avoid in center of each band",
               "name": "maskcenter",
               "readonly": false,
               "text": "maskcenter",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Fraction of channels to avoid at each band edge (in %)",
               "name": "maskedge",
               "readonly": false,
               "text": "maskedge",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Point source Stokes parameters for source model.",
               "name": "smodel",
               "readonly": false,
               "text": "smodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Interpolation mode (in time) to use for each gaintable",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Reject solutions below this SNR (only applies for bandtype = B)",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Apply parallactic angle correction",
               "name": "parang",
               "readonly": false,
               "text": "parang",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_bandpass",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "CASA Clean task. For imaging and deconvolution",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "CASA Clean task. For imaging and deconvolution",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.6.3"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c clean"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Pre-name of output images",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Text file with image names, sizes,centers for outliers",
               "name": "outlierfile",
               "readonly": false,
               "text": "outlierfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Field Name or id",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Spectral windows e.g. '0~3', '' is all",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Range of time to select from data, e.g. timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID range",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan Intent(s)",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral gridding type (mfs, channel,velocity, frequency)",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "mfs"
            },
            {
               "description": "Number of channels (planes) in output image; -1 = all",
               "name": "nchan",
               "readonly": false,
               "text": "nchan",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Begin the output cube at the frequency of this channel in the MS",
               "name": "start",
               "readonly": false,
               "text": "start",
               "type": "String",
               "value": null
            },
            {
               "description": "Width of output channel relative to MS channel (# to average)",
               "name": "width",
               "readonly": false,
               "text": "width",
               "type": "String",
               "value": 1
            },
            {
               "description": "Spectral interpolation (nearest, linear, cubic).",
               "name": "interpolation",
               "readonly": false,
               "text": "interpolation",
               "type": "String",
               "value": "linear"
            },
            {
               "description": "Re-restore the cube image to a common beam when True",
               "name": "resmooth",
               "readonly": false,
               "text": "resmooth",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Clean each channel to completion (True), or all channels each cycle (False)",
               "name": "chaniter",
               "readonly": false,
               "text": "chaniter",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "velocity frame of output image",
               "name": "outframe",
               "readonly": false,
               "text": "outframe",
               "type": "String",
               "value": null
            },
            {
               "description": "Velocity definition of output image",
               "name": "veltype",
               "readonly": false,
               "text": "veltype",
               "type": "String",
               "value": "radio"
            },
            {
               "description": "Number of Taylor coefficients to model the sky frequency dependence",
               "name": "nterms",
               "readonly": false,
               "text": "nterms",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Reference frequency (nterms > 1),'' uses central data-frequency",
               "name": "reffreq",
               "readonly": false,
               "text": "reffreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Gridding kernel for FFT-based transforms",
               "name": "gridmode",
               "readonly": false,
               "text": "gridmode",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of w-projection planes for convolution",
               "name": "wprojplanes",
               "readonly": false,
               "text": "wprojplanes",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Number of facets along each axis (main image only)",
               "name": "facets",
               "readonly": false,
               "text": "facets",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Convolution function cache directory",
               "name": "cfcache",
               "readonly": false,
               "text": "cfcache",
               "type": "String",
               "value": null
            },
            {
               "description": "Parallactic angle increment (degrees) for OTF A-term rotation",
               "name": "rotpainc",
               "readonly": false,
               "text": "rotpainc",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Parallactic angle increment (degrees) for computing A-term",
               "name": "painc",
               "readonly": false,
               "text": "painc",
               "type": "Float",
               "value": 360.0
            },
            {
               "description": "Maximum number of iterations",
               "name": "clean_iterations",
               "readonly": false,
               "text": "clean_iterations",
               "type": "Integer",
               "value": 500
            },
            {
               "description": "Loop gain for cleaning",
               "name": "gain",
               "readonly": false,
               "text": "gain",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "Flux level to stop cleaning, must include units: '1.0mJy'",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "String",
               "value": "0.0mJy"
            },
            {
               "description": "Method of PSF calculation to use during minor cycles",
               "name": "psfmode",
               "readonly": false,
               "text": "psfmode",
               "type": "String",
               "value": "clark"
            },
            {
               "description": "Options: 'csclean' or 'mosaic', '', uses psfmode",
               "name": "imagermode",
               "readonly": false,
               "text": "imagermode",
               "type": "String",
               "value": "csclean"
            },
            {
               "description": "Individually weight the fields of the mosaic",
               "name": "mosweight",
               "readonly": false,
               "text": "mosweight",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Gridding method for the image",
               "name": "ftmachine",
               "readonly": false,
               "text": "ftmachine",
               "type": "String",
               "value": "mosaic"
            },
            {
               "description": "Controls scaling of pixels in the image plane. default='SAULT'; example: scaletype='PBCOR' Options:'PBCOR','SAULT'",
               "name": "scaletype",
               "readonly": false,
               "text": "scaletype",
               "type": "String",
               "value": "SAULT"
            },
            {
               "description": "Controls whether searching for clean components is done in a constant noise residual image (True) or in an optimal signal-to-noise residual image (False)",
               "name": "flatnoise",
               "readonly": false,
               "text": "flatnoise",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Controls how often major cycles are done. (e.g. 5 for frequently)",
               "name": "cyclefactor",
               "readonly": false,
               "text": "cyclefactor",
               "type": "Float",
               "value": 1.5
            },
            {
               "description": "Cycle threshold doubles in this number of iterations",
               "name": "cyclespeedup",
               "readonly": false,
               "text": "cyclespeedup",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Deconvolution scales (pixels); [] = standard clean",
               "name": "multiscale",
               "readonly": false,
               "text": "multiscale",
               "type": "String",
               "value": null
            },
            {
               "description": "Stop cleaning if the largest scale finds this number of neg components",
               "name": "negcomponent",
               "readonly": false,
               "text": "negcomponent",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "a bias to give more weight toward smaller scales",
               "name": "smallscalebias",
               "readonly": false,
               "text": "smallscalebias",
               "type": "Float",
               "value": 0.6
            },
            {
               "description": "Use interactive clean (with GUI viewer)",
               "name": "interactive",
               "readonly": false,
               "text": "interactive",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Clean iterations before interactive prompt (can be changed)",
               "name": "npercycle",
               "readonly": false,
               "text": "npercycle",
               "type": "Integer",
               "value": 100
            },
            {
               "description": "Cleanbox(es), mask image(s),region(s), or a level",
               "name": "mask",
               "readonly": false,
               "text": "mask",
               "type": "String",
               "value": null
            },
            {
               "description": "x and y image size in pixels.  Single value: same for both",
               "name": "npix",
               "readonly": false,
               "text": "npix",
               "type": "dtype",
               "value": [
                  1024,
                  1024
               ]
            },
            {
               "description": "x and y cell size(s). Default unit arcsec.",
               "name": "cellsize",
               "readonly": false,
               "text": "cellsize",
               "type": "dtype",
               "value": [
                  "1.0arcsec"
               ]
            },
            {
               "description": "Image center: direction or field index",
               "name": "phasecenter",
               "readonly": false,
               "text": "phasecenter",
               "type": "String",
               "value": null
            },
            {
               "description": "Rest frequency to assign to image (see help)",
               "name": "restfreq",
               "readonly": false,
               "text": "restfreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Stokes params to image (eg I,IV,IQ,IQUV)",
               "name": "stokes",
               "readonly": false,
               "text": "stokes",
               "type": "String",
               "value": "I"
            },
            {
               "description": "Weighting of uv (natural, uniform,briggs, ...)",
               "name": "weight",
               "readonly": false,
               "text": "weight",
               "type": "String",
               "value": "uniform"
            },
            {
               "description": "Briggs robustness parameter",
               "name": "robust",
               "readonly": false,
               "text": "robust",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "number of pixels to determine uv-cell size 0=> field of view",
               "name": "npixels",
               "readonly": false,
               "text": "npixels",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Apply additional uv tapering of visibilities",
               "name": "uvtaper",
               "readonly": false,
               "text": "uvtaper",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "uv-taper on outer baselines in uv-plane",
               "name": "outertaper",
               "readonly": false,
               "text": "outertaper",
               "type": "String",
               "value": null
            },
            {
               "description": "uv-taper in center of uv-plane (not implemented)",
               "name": "innertaper",
               "readonly": false,
               "text": "innertaper",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of model image(s) to initialize cleaning",
               "name": "modelimage",
               "readonly": false,
               "text": "modelimage",
               "type": "String",
               "value": null
            },
            {
               "description": "Output Gaussian restoring beam for CLEAN image",
               "name": "restoringbeam",
               "readonly": false,
               "text": "restoringbeam",
               "type": "String",
               "value": null
            },
            {
               "description": "Output primary beam-corrected image",
               "name": "pbcor",
               "readonly": false,
               "text": "pbcor",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum PB level to use",
               "name": "minpb",
               "readonly": false,
               "text": "minpb",
               "type": "Float",
               "value": 0.2
            },
            {
               "description": "True if to save model visibilities in MODEL_DATA column",
               "name": "usescratch",
               "readonly": false,
               "text": "usescratch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Divide large image cubes into channel chunks for deconvolution",
               "name": "allowchunk",
               "readonly": false,
               "text": "allowchunk",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Convert output images to FITS files",
               "name": "port2fits",
               "readonly": false,
               "text": "port2fits",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Keep casa images when 'port2fits' is enabled",
               "name": "keep_casa_images",
               "readonly": false,
               "text": "keep_casa_images",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Noise image to compute sigma for stopping threshold (in case specified it will replace threshold)",
               "name": "noise_image",
               "readonly": false,
               "text": "noise_image",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise sigma for stopping deconvolution in the case where noise_image is provided (new thresh = sigma*noise_image.std())",
               "name": "noise_sigma",
               "readonly": false,
               "text": "noise_sigma",
               "type": "Float",
               "value": 3
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_clean",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Clears out calibrated data and resets previous predicted model",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Clears out calibrated data and resets previous predicted model",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c clearcal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Field names or field index numbers. ''==>all, field='0~2,3C286'",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "spectral-window/frequency/channel",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Select based on observing intent",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Add MODEL_DATA scratch column",
               "name": "addmodel",
               "readonly": false,
               "text": "addmodel",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_clearcal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Concatenate several visibility data sets",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Concatenate several visibility data sets",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c concat"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility files",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output measurement set",
               "name": "output-msname",
               "readonly": false,
               "text": "output-msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Frequency shift tolerance for considering data as the same spwid",
               "name": "freqtol",
               "readonly": false,
               "text": "freqtol",
               "type": "String",
               "value": null
            },
            {
               "description": "Direction shift tolerance for considering data as the same field",
               "name": "dirtol",
               "readonly": false,
               "text": "dirtol",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, fields with a different name are not merged even if their direction agrees",
               "name": "respectname",
               "readonly": false,
               "text": "respectname",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If true, sort by TIME in ascending",
               "name": "timesort",
               "readonly": false,
               "text": "timesort",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Copy all rows of the POINTING table",
               "name": "copypointing",
               "readonly": false,
               "text": "copypointing",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "List of the weight scaling factors to be applied to the individual MSs",
               "name": "visweightscale",
               "readonly": false,
               "text": "visweightscale",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_concat",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Convert a CASA image to a FITS file",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Convert a CASA image to a FITS file",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c exportfits"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input image FITS file",
               "name": "fitsimage",
               "readonly": false,
               "text": "fitsimage",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output CASA image",
               "name": "imagename",
               "readonly": false,
               "text": "imagename",
               "type": "String",
               "value": null
            },
            {
               "description": "Use velocity (rather than frequency) as spectral axis",
               "name": "velocity",
               "readonly": false,
               "text": "velocity",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use the optical (rather than radio) velocity convention",
               "name": "optical",
               "readonly": false,
               "text": "optical",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Bits per pixel",
               "name": "bitpix",
               "readonly": false,
               "text": "bitpix",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum pixel value (if minpix > maxpix, value is automatically dertermined)",
               "name": "minpix",
               "readonly": false,
               "text": "minpix",
               "type": "Float",
               "value": null
            },
            {
               "description": "dropstokes",
               "name": "maxpix",
               "readonly": false,
               "text": "maxpix",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Drop stokes axis?",
               "name": "dropstokes",
               "readonly": false,
               "text": "dropstokes",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Put Stokes axis last in header?",
               "name": "stokeslast",
               "readonly": false,
               "text": "stokeslast",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Write history to the FITS image?",
               "name": "history",
               "readonly": false,
               "text": "history",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Drop all degenerate axes (e.g. stokes and/or frequency)",
               "name": "dropdeg",
               "readonly": false,
               "text": "dropdeg",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Overwrite pre-existing imagename",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_exportfits",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Recalculates (u, v, w) and/or changes Phase Center",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Recalculates (u, v, w) and/or changes Phase Center",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c fixvis"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of the input visibility set.",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of the output visibility set.  (Can be the same as vis.)",
               "name": "output-msname",
               "readonly": false,
               "text": "output-msname",
               "type": "String",
               "value": false
            },
            {
               "description": "When applying a phase center shift, modify visibilities only in this/these column(s). Comma separated list",
               "name": "datacolumn",
               "readonly": false,
               "text": "datacolumn",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Fields to operate on. ''  = all.",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": ""
            },
            {
               "description": "Reference frame to convert UVW coordinates to",
               "name": "refcode",
               "readonly": false,
               "text": "refcode",
               "type": "String",
               "value": null
            },
            {
               "description": "Base UVW calculation on the old values?",
               "name": "reuse",
               "readonly": false,
               "text": "reuse",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Use this direction as phase center",
               "name": "phasecenter",
               "readonly": false,
               "text": "phasecenter",
               "type": "String",
               "value": null
            },
            {
               "description": "(experimental) List of the distances (as quanta) of the fields selected by field.",
               "name": "distances",
               "readonly": false,
               "text": "distances",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_fixvis",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "All-purpose flagging task based on data-selections and flagging modes/algorithms.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "All-purpose flagging task based on data-selections and flagging modes/algorithms.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c flagdata"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of MS file or calibration table",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Flagging mode",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "manual"
            },
            {
               "description": "Field names or field index numbers:'' ==> all, field='0~2,3C286'",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral-window/frequency/channel: '' ==> all, spw='0:17~19'",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Antenna/baselines: '' ==> all, antenna ='3,VA04'",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Time range: '' ==> all,timerange='09:14:0~09:54:0'",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Correlation: '' ==> all, correlation='XX,YY'",
               "name": "correlation",
               "readonly": false,
               "text": "correlation",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan numbers: '' ==> all",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation intent: '' ==> all, intent='CAL*POINT*'",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "(Sub)array numbers: '' ==> all",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "UV range: '' ==> all; uvrange ='0~100klambda', default units=meters",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID: '' ==> all",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": " Multi-feed numbers: Not yet implemented",
               "name": "feed",
               "readonly": false,
               "text": "feed",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag only the auto-correlations",
               "name": "autocorr",
               "readonly": false,
               "text": "autocorr",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Input ASCII file, list of files or Python list of strings with flag commands",
               "name": "inpfile",
               "readonly": false,
               "text": "inpfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by REASON types",
               "name": "reason",
               "readonly": false,
               "text": "reason",
               "type": "String",
               "value": "any"
            },
            {
               "description": "List of time buffers (sec) to pad timerange in flag commands",
               "name": "tbuff",
               "readonly": false,
               "text": "tbuff",
               "type": "String",
               "value": null
            },
            {
               "description": "Data column on which to operate (data,corrected,model,weight,etc.)",
               "name": "datacolumn",
               "readonly": false,
               "text": "datacolumn",
               "type": "String",
               "value": null
            },
            {
               "description": "Range to use for clipping",
               "name": "clipminmax",
               "readonly": false,
               "text": "clipminmax",
               "type": "String",
               "value": null
            },
            {
               "description": "Clip outside the range, or within it",
               "name": "clipoutside",
               "readonly": false,
               "text": "clipoutside",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Average over channels (scalar average)",
               "name": "channelavg",
               "readonly": false,
               "text": "channelavg",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Clip zero-value data",
               "name": "clipzeros",
               "readonly": false,
               "text": "clipzeros",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Quack n seconds from scan beginning or end",
               "name": "quackinterval",
               "readonly": false,
               "text": "quackinterval",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Quack mode. 'beg' ==> first n seconds of scan.'endb' ==> last n seconds of scan. 'end' ==> all but first n seconds of scan. 'tail' ==> all but last n seconds of scan.",
               "name": "quackmode",
               "readonly": false,
               "text": "quackmode",
               "type": "String",
               "value": "beg"
            },
            {
               "description": "Flag incrementally in time?",
               "name": "quackincrement",
               "readonly": false,
               "text": "quackincrement",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Amount of shadow allowed (in meters)",
               "name": "tolerance",
               "readonly": false,
               "text": "tolerance",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "File name or dictionary with additional antenna names, positions and diameters",
               "name": "addantenna",
               "readonly": false,
               "text": "addantenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Lower limiting elevation (in degrees)",
               "name": "lowerlimit",
               "readonly": false,
               "text": "lowerlimit",
               "type": "Integer",
               "value": 0.0
            },
            {
               "description": "Upper limiting elevation (in degrees)",
               "name": "upperlimit",
               "readonly": false,
               "text": "upperlimit",
               "type": "Integer",
               "value": 90.0
            },
            {
               "description": "Time-range to use for each chunk (in seconds or minutes)",
               "name": "ntime",
               "readonly": false,
               "text": "ntime",
               "type": "Float",
               "value": "scan"
            },
            {
               "description": "Accumulate data across scans depending on the value of ntime.",
               "name": "combinescans",
               "readonly": false,
               "text": "combinescans",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flagging thresholds in units of deviation from the fit",
               "name": "timecutoff",
               "readonly": false,
               "text": "timecutoff",
               "type": "Float",
               "value": 4.0
            },
            {
               "description": "Flagging thresholds in units of deviation from the fit",
               "name": "freqcutoff",
               "readonly": false,
               "text": "freqcutoff",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Fitting function for the time direction (poly/line)",
               "name": "timefit",
               "readonly": false,
               "text": "timefit",
               "type": "String",
               "value": "line"
            },
            {
               "description": "Fitting function for the frequency direction (poly/line)",
               "name": "freqfit",
               "readonly": false,
               "text": "freqfit",
               "type": "String",
               "value": "poly"
            },
            {
               "description": "Number of pieces in the polynomial-fits (for 'freqfit' or 'timefit' ='poly')",
               "name": "maxnpieces",
               "readonly": false,
               "text": "maxnpieces",
               "type": "Integer",
               "value": 7
            },
            {
               "description": "Dimensions along which to calculate fits (freq/time/freqtime/timefreq)",
               "name": "flagdimension",
               "readonly": false,
               "text": "flagdimension",
               "type": "String",
               "value": "freqtime"
            },
            {
               "description": "Calculate additional flags using sliding window statistics (none,sum,std,both)",
               "name": "usewindowstats",
               "readonly": false,
               "text": "usewindowstats",
               "type": "String",
               "value": "none"
            },
            {
               "description": "Half-width of sliding window to use with 'usewindowstats' (1,2,3).",
               "name": "halfwin",
               "readonly": false,
               "text": "halfwin",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Extend flags along time, frequency and correlation.",
               "name": "extendflags",
               "readonly": false,
               "text": "extendflags",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If any correlation is flagged, flag all correlations",
               "name": "extendpols",
               "readonly": false,
               "text": "extendpols",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Flag all 'ntime' integrations if more than X% of the timerange is flagged (0-100)",
               "name": "growtime",
               "readonly": false,
               "text": "growtime",
               "type": "Float",
               "value": 50.0
            },
            {
               "description": "Flag all selected channels if more than X% of the frequency range is flagged(0-100)",
               "name": "growfreq",
               "readonly": false,
               "text": "growfreq",
               "type": "Float",
               "value": 50.0
            },
            {
               "description": "Flag data based on surrounding flags",
               "name": "growaround",
               "readonly": false,
               "text": "growaround",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag one timestep before and after a flagged one (True/False)",
               "name": "flagneartime",
               "readonly": false,
               "text": "flagneartime",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag one channel before and after a flagged one (True/False)",
               "name": "flagnearfreq",
               "readonly": false,
               "text": "flagnearfreq",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "minimum number of flags (relative)",
               "name": "minrel",
               "readonly": false,
               "text": "minrel",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "maximum number of flags (relative)",
               "name": "maxrel",
               "readonly": false,
               "text": "maxrel",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "minimum number of flags (absolute)",
               "name": "minabs",
               "readonly": false,
               "text": "minabs",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "maximum number of flags (absolute). Use a negative value to indicate infinity.",
               "name": "maxabs",
               "readonly": false,
               "text": "maxabs",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Print summary of channels per spw",
               "name": "spwchan",
               "readonly": false,
               "text": "spwchan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Print summary of correlation per spw",
               "name": "spwcorr",
               "readonly": false,
               "text": "spwcorr",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Print summary counts per baseline",
               "name": "basecnt",
               "readonly": false,
               "text": "basecnt",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Name of this summary report (key in summary dictionary)",
               "name": "name",
               "readonly": false,
               "text": "name",
               "type": "String",
               "value": "Summary"
            },
            {
               "description": "Action to perform in MS and/or in inpfile (none/apply/calculate)",
               "name": "action",
               "readonly": false,
               "text": "action",
               "type": "String",
               "value": null
            },
            {
               "description": "Display data and/or end-of-MS reports at runtime (data/report/both).",
               "name": "display",
               "readonly": false,
               "text": "display",
               "type": "String",
               "value": null
            },
            {
               "description": "Back up the state of flags before the run",
               "name": "flagbackup",
               "readonly": false,
               "text": "flagbackup",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Save the current parameters to the FLAG_CMD table or to a file",
               "name": "savepars",
               "readonly": false,
               "text": "savepars",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Reason to save to output file or to FLAG_CMD table.",
               "name": "cmdreason",
               "readonly": false,
               "text": "cmdreason",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output file to save current parameters. If empty, save to FLAG_CMD",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of timesteps in the sliding time window [aips:fparm(1)]",
               "name": "winsize",
               "readonly": false,
               "text": "winsize",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Time-series noise estimate : [aips:noise]",
               "name": "timedev",
               "readonly": false,
               "text": "timedev",
               "type": "Float",
               "value": null
            },
            {
               "description": "Spectral noise estimate : [aips:scutoff]",
               "name": "freqdev",
               "readonly": false,
               "text": "freqdev",
               "type": "Float",
               "value": null
            },
            {
               "description": "Threshold scaling for timedev : [aips:fparm(9)] ",
               "name": "timedevscale",
               "readonly": false,
               "text": "timedevscale",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Threshold scaling for freqdev : [aips:fparm(10)]",
               "name": "freqdevscale",
               "readonly": false,
               "text": "freqdevscale",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Flag whole spectrum if freqdev is greater than spectralmax",
               "name": "spectralmax",
               "readonly": false,
               "text": "spectralmax",
               "type": "Float",
               "value": 1000000.0
            },
            {
               "description": "Flag whole spectrum if freqdev is less than spectralmin : [aips:fparm(5)]",
               "name": "spectralmin",
               "readonly": false,
               "text": "spectralmin",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Bin width for channel average in number of input channels",
               "name": "chanbin",
               "readonly": false,
               "text": "chanbin",
               "type": "Integer",
               "value": 1
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_flagdata",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "These flag version files are copies of the flag column for a measurement set.  They can be restored to the data set to get back to a previous flag version.  On running importvla, a flag version call 'Original' is automatically produced.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "These flag version files are copies of the flag column for a measurement set.  They can be restored to the data set to get back to a previous flag version.  On running importvla, a flag version call 'Original' is automatically produced.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c flagmanager"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of input visibility file (MS)",
               "name": "vis",
               "readonly": false,
               "text": "vis",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag version operation",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "list"
            },
            {
               "description": "Flag version name",
               "name": "versionname",
               "readonly": false,
               "text": "versionname",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag version to rename",
               "name": "oldname",
               "readonly": false,
               "text": "oldname",
               "type": "String",
               "value": null
            },
            {
               "description": "Short description of a versionname",
               "name": "comment",
               "readonly": false,
               "text": "comment",
               "type": "String",
               "value": null
            },
            {
               "description": "Merge option: replace will save or over-write the flags",
               "name": "merge",
               "readonly": false,
               "text": "merge",
               "type": "String",
               "value": "replace"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_flagmanager",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Bootstrap the flux density scale from standard calibrators",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Bootstrap the flux density scale from standard calibrators",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c fluxscale"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file (MS)",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of input calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output, flux-scaled calibration table",
               "name": "fluxtable",
               "readonly": false,
               "text": "fluxtable",
               "type": "String",
               "value": null
            },
            {
               "description": "Reference field name(s) (transfer flux scale FROM)",
               "name": "reference",
               "readonly": false,
               "text": "reference",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer field name(s) (transfer flux scale TO), '' -> all",
               "name": "transfer",
               "readonly": false,
               "text": "transfer",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of listfile that contains the fit information. Default is (no file).",
               "name": "listfile",
               "readonly": false,
               "text": "listfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Append solutions?",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Scale across spectral window boundaries.  See help fluxscale",
               "name": "refspwmap",
               "readonly": false,
               "text": "refspwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "incremental caltable",
               "name": "incremental",
               "readonly": false,
               "text": "incremental",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "order of spectral fitting",
               "name": "fitorder",
               "readonly": false,
               "text": "fitorder",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "overwrite fluxtable",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Output pickle file to save task result",
               "name": "save_result",
               "readonly": false,
               "text": "save_result",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_fluxscale",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Phase offsets, groups delays and delay rates are calculated with respect to a specified referance antenna by a two-dimensional FFT and subsequent least-squares optimisation.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Phase offsets, groups delays and delay rates are calculated with respect to a specified referance antenna by a two-dimensional FFT and subsequent least-squares optimisation.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c fringefit"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Zero delay-rates in solution tabl",
               "name": "zerorates",
               "readonly": false,
               "text": "zerorates",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Solution interval: egs. 'inf', '60s' (see help)",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or, field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": null
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Reject solutions below this SNR",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Constrain FFT delay search to a window; a two-element list, units of nanoseconds",
               "name": "delaywindow",
               "readonly": false,
               "text": "delaywindow",
               "type": "String",
               "value": null
            },
            {
               "description": "Constrain FFT rate search to a window; a two-element list, units of nanoseconds",
               "name": "ratewindow",
               "readonly": false,
               "text": "ratewindow",
               "type": "String",
               "value": null
            },
            {
               "description": "Maximum number of iterations for least-squares solver",
               "name": "niter",
               "readonly": false,
               "text": "niter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Refine estimates of delay and rate with global least-squares solver",
               "name": "globalsolve",
               "readonly": false,
               "text": "globalsolve",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Temporal interpolation for each gaintable (=linear)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply parallactic angle correction on the fly",
               "name": "paran",
               "readonly": false,
               "text": "paran",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_fringefit",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Insert a source model  a visibility set",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Insert a source model  a visibility set",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c ft"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input MS.  Output goes to vis + '.contsub' (will be overwritten if already exists)",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field(s) using id(s) or name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spw selection",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of input model image(s)",
               "name": "model",
               "readonly": false,
               "text": "model",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of terms used to model the sky frequency dependence",
               "name": "nterms",
               "readonly": false,
               "text": "nterms",
               "type": "Integer",
               "value": 1
            },
            {
               "description": " Reference frequency (e.g. '1.5e+9' or '1.5GHz')",
               "name": "reffreq",
               "readonly": false,
               "text": "reffreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of component list",
               "name": "complist",
               "readonly": false,
               "text": "complist",
               "type": "String",
               "value": null
            },
            {
               "description": "Add to the existing model visibility",
               "name": "incremental",
               "readonly": false,
               "text": "incremental",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If True predicted  visibility  is stored in MODEL_DATA column",
               "name": "usescratch",
               "readonly": false,
               "text": "usescratch",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_ft",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Specify Calibration Values of Various Types",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Specify Calibration Values of Various Types",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c gaincal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange (default units meters)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution interval: egs. 'inf', '60s' (see help)",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or, field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": null
            },
            {
               "description": "Pre-averaging interval (sec) (rarely needed)",
               "name": "preavg",
               "readonly": false,
               "text": "preavg",
               "type": "Float",
               "value": -1.0
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Reference antenna mode",
               "name": "refantmode",
               "readonly": false,
               "text": "refantmode",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum baselines _per antenna_ required for solve",
               "name": "minblperant",
               "readonly": false,
               "text": "minblperant",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Reject solutions below this SNR",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Normalize average solution amplitudes to 1.0 (G, T only)",
               "name": "solnorm",
               "readonly": false,
               "text": "solnorm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of gain solution (G,T,GSPLINE,K,KCROSS)",
               "name": "gaintype",
               "readonly": false,
               "text": "gaintype",
               "type": "String",
               "value": "G"
            },
            {
               "description": "Spline timescale(sec); All spw's are first averaged.",
               "name": "splinetime",
               "readonly": false,
               "text": "splinetime",
               "type": "Float",
               "value": 3600.0
            },
            {
               "description": "The phase-unwrapping algorithm",
               "name": "npointaver",
               "readonly": false,
               "text": "npointaver",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Wrap the phase for jumps greater than this value (degrees)",
               "name": "phasewrap",
               "readonly": false,
               "text": "phasewrap",
               "type": "Float",
               "value": 180.0
            },
            {
               "description": "Point source Stokes parameters for source model.",
               "name": "smodel",
               "readonly": false,
               "text": "smodel",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Type of solution: ('ap', 'p', 'a')",
               "name": "calmode",
               "readonly": false,
               "text": "calmode",
               "type": "String",
               "value": "ap"
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Temporal interpolation for each gaintable (=linear)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply parallactic angle correction on the fly",
               "name": "parang",
               "readonly": false,
               "text": "parang",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save task result into a pickle file",
               "name": "save_result",
               "readonly": false,
               "text": "save_result",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_gaincal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Specify Calibration Values of Various Types",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Specify Calibration Values of Various Types",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c gencal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "The new/existing calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "The calibration type: 'amp','ph', 'sbd','mbd','antpos','antposvla','tsys''evlagain','opac','gc','gceff','eff'",
               "name": "caltype",
               "readonly": false,
               "text": "caltype",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibration spw(s) selection",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibration antenna(s) selection",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibration polarizations(s) selection",
               "name": "pol",
               "readonly": false,
               "text": "pol",
               "type": "String",
               "value": null
            },
            {
               "description": "The calibration values",
               "name": "parameter",
               "readonly": false,
               "text": "parameter",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_gencal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Perform math operations on images",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Perform math operations on images",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c immath"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Mode for math operation",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "evalexpr"
            },
            {
               "description": "A list of input images",
               "name": "imagename",
               "readonly": false,
               "text": "imagename",
               "type": "String",
               "value": null
            },
            {
               "description": "Mask to use",
               "name": "mask",
               "readonly": false,
               "text": "mask",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix of output (Extension will be same as imagename)",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Mathematical expression using images",
               "name": "expr",
               "readonly": false,
               "text": "expr",
               "type": "String",
               "value": "IM0"
            },
            {
               "description": "A list of variable names to use with the image file",
               "name": "varnames",
               "readonly": false,
               "text": "varnames",
               "type": "String",
               "value": null
            },
            {
               "description": "Threshold in linear polarization intensity image below which to mask pixels",
               "name": "polithresh",
               "readonly": false,
               "text": "polithresh",
               "type": "String",
               "value": null
            },
            {
               "description": "Region selection",
               "name": "region",
               "readonly": false,
               "text": "region",
               "type": "String",
               "value": null
            },
            {
               "description": "Rectangular region to select in direction plane. Default is to use the entire direction",
               "name": "box",
               "readonly": false,
               "text": "box",
               "type": "String",
               "value": null
            },
            {
               "description": "Channels to use",
               "name": "chans",
               "readonly": false,
               "text": "chans",
               "type": "String",
               "value": null
            },
            {
               "description": "Stokes planes to use",
               "name": "stokes",
               "readonly": false,
               "text": "stokes",
               "type": "String",
               "value": null
            },
            {
               "description": "Stretch the mask if necessary and possible?",
               "name": "stretch",
               "readonly": false,
               "text": "stretch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Channels to use",
               "name": "chans",
               "readonly": false,
               "text": "chans",
               "type": "String",
               "value": null
            },
            {
               "description": "An image name from which metadata should be copied. The input can be either an image listed under imagename or any other image on disk. Leaving this parameter unset may copy header metadata from any of the input images, which one is not guaranteed",
               "name": "imagemd",
               "readonly": false,
               "text": "imagemd",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of channels to ustack in cube (not to be confused with chan)",
               "name": "nchans",
               "readonly": false,
               "text": "nchans",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Unstack a casa image cube into [nchans] chunks along the freq axis.",
               "name": "unstack",
               "readonly": false,
               "text": "unstack",
               "type": "String",
               "value": null
            },
            {
               "description": "Convert output images to FITS files",
               "name": "port2fits",
               "readonly": false,
               "text": "port2fits",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Keep casa images when 'port2fits' is enabled",
               "name": "keep_casa_images",
               "readonly": false,
               "text": "keep_casa_images",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_immath",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Convert aFITS image to a CASA file",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Convert aFITS image to a CASA file",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c importfits"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input image FITS file",
               "name": "fitsimage",
               "readonly": false,
               "text": "fitsimage",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output CASA image",
               "name": "imagename",
               "readonly": false,
               "text": "imagename",
               "type": "String",
               "value": null
            },
            {
               "description": "If fits image has multiple coordinate reps, choose one",
               "name": "whichrep",
               "readonly": false,
               "text": "whichrep",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If its file contains multiple images, choose one (0 = first HDU, -1 = first valid image).",
               "name": "whichhdu",
               "readonly": false,
               "text": "whichhdu",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Set blanked pixels to zero (not NaN)",
               "name": "zeroblanks",
               "readonly": false,
               "text": "zeroblanks",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Overwrite pre-existing imagename",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "List of values to assign to added degenerate axes defaultaxes==True (ra,dec,freq,stokes)",
               "name": "defaultaxesvalues",
               "readonly": false,
               "text": "defaultaxesvalues",
               "type": "dtype",
               "value": null
            },
            {
               "description": "List of values to be used to define the synthesized beam [BMAJ,BMIN,BPA] (as in the FITS keywords)",
               "name": "beam",
               "readonly": false,
               "text": "beam",
               "type": "dtype",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_importfits",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "All-purpose flagging task based on data-selections and flagging modes/algorithms.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "All-purpose flagging task based on data-selections and flagging modes/algorithms.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c imregrid"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of the source image",
               "name": "imagename",
               "readonly": false,
               "text": "imagename",
               "type": "String",
               "value": null
            },
            {
               "description": "A dictionary, refcode, or name of an image that provides the output shape and coordinate system",
               "name": "template",
               "readonly": false,
               "text": "template",
               "type": "String",
               "value": null
            },
            {
               "description": "Name for the regridded image",
               "name": "output",
               "readonly": false,
               "text": "output",
               "type": "String",
               "value": null
            },
            {
               "description": "Regrid spectral axis in velocity space rather than frequency space?",
               "name": "asvelocity",
               "readonly": false,
               "text": "asvelocity",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "The pixel axes to regrid",
               "name": "axes",
               "readonly": false,
               "text": "axes",
               "type": "String",
               "value": [
                  -1
               ]
            },
            {
               "description": "The interpolation method",
               "name": "interpolation",
               "readonly": false,
               "text": "interpolation",
               "type": "String",
               "value": "linear"
            },
            {
               "description": "Decimation factor for coordinate grid computation",
               "name": "decimate",
               "readonly": false,
               "text": "decimate",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Replicate image rather than regrid",
               "name": "replicate",
               "readonly": false,
               "text": "replicate",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "verwrite (unprompted) pre-existing output file",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_imregrid",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "List the summary of a data set in the logger or in a file",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "List the summary of a data set in the logger or in a file",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c listobs"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of disk file to write output: ''==>to terminal",
               "name": "listfile",
               "readonly": false,
               "text": "listfile",
               "type": "String",
               "value": null
            },
            {
               "description": "If True, tacitly overwrite listfile if it exists.",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Field names or field index numbers. ''==>all, field='0~2,3C286'",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "spectral-window/frequency/channel",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Antenna/baselines: ''==>all, antenna='3,VA04'",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "time range: ''==>all,timerange='09:14:0~09:54:0'",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on correlation",
               "name": "correlation",
               "readonly": false,
               "text": "correlation",
               "type": "String",
               "value": null
            },
            {
               "description": "scan numbers: ''==>all",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on observation intent: ''==>all",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Multi-feed numbers: Not yet implemented",
               "name": "feed",
               "readonly": false,
               "text": "feed",
               "type": "String",
               "value": null
            },
            {
               "description": "(sub)array numbers: ''==>all",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "uv range: ''==>all; uvrange ='0~100klambda', default units=meters",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on observation ID: ''==>all",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Verbose output",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "List unflagged row counts? If true, it can have significant negative performance impact.",
               "name": "listunfl",
               "readonly": false,
               "text": "listunfl",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "EXPERIMENTAL. Maximum size in megabytes of cache in which data structures can be held.",
               "name": "cachesize",
               "readonly": false,
               "text": "cachesize",
               "type": "Integer",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_listobs",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Makes and manipulates image masks",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Makes and manipulates image masks",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c makemask"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Mask method",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "copy"
            },
            {
               "description": "Name of input image",
               "name": "inpimage",
               "readonly": false,
               "text": "inpimage",
               "type": "String",
               "value": null
            },
            {
               "description": "Mask(s) to be processed: image masks,T/F internal masks(Need to include parent image",
               "name": "inpmask",
               "readonly": false,
               "text": "inpmask",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output mask (imagename or imagename:internal_maskname)",
               "name": "output",
               "readonly": false,
               "text": "output",
               "type": "String",
               "value": null
            },
            {
               "description": "overwrite output if exists",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cut-off threshold to mask sources",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "Float",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_makemask",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Split the MS, combine/separate/regrid spws and do channel and time averaging",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Split the MS, combine/separate/regrid spws and do channel and time averaging",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c mstransform"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output measurement set",
               "name": "output-msname",
               "readonly": false,
               "text": "output-msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Create a multi-MS output from an input MS",
               "name": "createmms",
               "readonly": false,
               "text": "createmms",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Axis to do parallelization across.",
               "name": "separationaxis",
               "readonly": false,
               "text": "separationaxis",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "The number of Sub-MSs to create (auto or any number)",
               "name": "numsubms",
               "readonly": false,
               "text": "numsubms",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "ist with 1 or 3 elements giving the tile shape of the disk data columns",
               "name": "tileshape",
               "readonly": false,
               "text": "tileshape",
               "type": "String",
               "value": null
            },
            {
               "description": "Which data column(s) to split out",
               "name": "datacolumn",
               "readonly": false,
               "text": "datacolumn",
               "type": "String",
               "value": "corrected"
            },
            {
               "description": "Make a real virtual MODEL column",
               "name": "realmodelcol",
               "readonly": false,
               "text": "realmodelcol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Keep *completely flagged rows* or drop them from the output",
               "name": "keepflags",
               "readonly": false,
               "text": "keepflags",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Create a WEIGHT_SPECTRUM column in the output MS",
               "name": "usewtspectrum",
               "readonly": false,
               "text": "usewtspectrum",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Combine the input spws into a new output spw",
               "name": "combinespws",
               "readonly": false,
               "text": "combinespws",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Average data in channels",
               "name": "chanaverage",
               "readonly": false,
               "text": "chanaverage",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Width (bin) of input channels to average to form an output channel",
               "name": "chanbin",
               "readonly": false,
               "text": "chanbin",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Hannig smooth data to remove Gibbs ringing",
               "name": "hanning",
               "readonly": false,
               "text": "hanning",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Transform channel labels and visibilities to a different spectral reference frame. Notice that u,v,w data is not transformed.",
               "name": "regridms",
               "readonly": false,
               "text": "regridms",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Regridding mode (channel/velocity/frequency/channel_b)",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "channel"
            },
            {
               "description": "Number of channels in the output spw (-1=all)",
               "name": "nchan",
               "readonly": false,
               "text": "nchan",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "First channel to use in the output spw (mode-dependant)",
               "name": "start",
               "readonly": false,
               "text": "start",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Number of input channels that are used to create an output channel.",
               "name": "width",
               "readonly": false,
               "text": "width",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Number of output spws to create in output MS.",
               "name": "nspw",
               "readonly": false,
               "text": "nspw",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Spectral interpolation method",
               "name": "interpolation",
               "readonly": false,
               "text": "interpolation",
               "type": "String",
               "value": "linear"
            },
            {
               "description": "Phase center direction to be used for the spectral coordinate transformation: position or field index",
               "name": "phasecenter",
               "readonly": false,
               "text": "phasecenter",
               "type": "String",
               "value": null
            },
            {
               "description": "Rest frequency to use for output",
               "name": "restfreq",
               "readonly": false,
               "text": "restfreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Output reference frame (''=keep input frame).",
               "name": "outframe",
               "readonly": false,
               "text": "outframe",
               "type": "String",
               "value": ""
            },
            {
               "description": "Velocity definition",
               "name": "veltype",
               "readonly": false,
               "text": "veltype",
               "type": "String",
               "value": "radio"
            },
            {
               "description": "Average data in time",
               "name": "timeaverage",
               "readonly": false,
               "text": "timeaverage",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Bin width for time averaging",
               "name": "timebin",
               "readonly": false,
               "text": "timebin",
               "type": "String",
               "value": "0s"
            },
            {
               "description": "Span the timebin across scan, state or both",
               "name": "timespan",
               "readonly": false,
               "text": "timespan",
               "type": "String",
               "value": null
            },
            {
               "description": "Maximum separation of start-to-end baselines that can be included in an average. (meters)",
               "name": "maxuvwdistance",
               "readonly": false,
               "text": "maxuvwdistance",
               "type": "Float",
               "value": null
            },
            {
               "description": "Enable on-the-fly (OTF) calibration as in task applycal",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Path to calibration library file",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable continuum subtraction as in task uvcontsub",
               "name": "douvcontsub",
               "readonly": false,
               "text": "douvcontsub",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Spectral window:channel selection for fitting the continuum",
               "name": "fitspw",
               "readonly": false,
               "text": "fitspw",
               "type": "String",
               "value": null
            },
            {
               "description": "Polynomial order for the fits",
               "name": "fitorder",
               "readonly": false,
               "text": "fitorder",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Produce continuum estimate instead of continuum subtracted data",
               "name": "want_cont",
               "readonly": false,
               "text": "want_cont",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Select field using ID(s) or name(s). Comma separated string",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan numbers",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan numbers",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan intents",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Select (sub)array(s) by array ID number",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by baseline length",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by baseline length",
               "name": "correlation",
               "readonly": false,
               "text": "correlation",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of OMP threads to use (currently maximum limited by number of polarizations)",
               "name": "nthreads",
               "readonly": false,
               "text": "nthreads",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If practical, keep *completely flagged rows* instead of dropping them.",
               "name": "keepflags",
               "readonly": false,
               "text": "keepflags",
               "type": "Boolean",
               "value": true
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_mstransform",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Create a visibility subset from an existing visibility set",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Create a visibility subset from an existing visibility set",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c oldsplit"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output measurement set",
               "name": "output-msname",
               "readonly": false,
               "text": "output-msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Which data column(s) to split out",
               "name": "datacolumn",
               "readonly": false,
               "text": "datacolumn",
               "type": "String",
               "value": "corrected"
            },
            {
               "description": "Select field using ID(s) or name(s). Comma separated string",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of channels to average to form one output channel",
               "name": "width",
               "readonly": false,
               "text": "width",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Bin width for time averaging",
               "name": "timebin",
               "readonly": false,
               "text": "timebin",
               "type": "String",
               "value": "0s"
            },
            {
               "description": "Let time bins span changes in scan and/or state",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": "scan"
            },
            {
               "description": "Select data by time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan numbers",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan intents",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Select (sub)array(s) by array ID number",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by baseline length",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by baseline length",
               "name": "correlation",
               "readonly": false,
               "text": "correlation",
               "type": "String",
               "value": null
            },
            {
               "description": "If practical, keep *completely flagged rows* instead of dropping them.",
               "name": "keepflags",
               "readonly": false,
               "text": "keepflags",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If the input is a multi-MS, make the output one, too. (experimental)",
               "name": "keepmms",
               "readonly": false,
               "text": "keepmms",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_oldsplit",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Plot the antenna distribution in the local reference frame",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Plot the antenna distribution in the local reference frame",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c plotants"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Save the plotted figure to this file",
               "name": "figfile",
               "readonly": false,
               "text": "figfile",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_plotants",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "An all-purpose plotter for calibration results",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "An all-purpose plotter for calibration results",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c plotcal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Value to plot along x axis (time,chan,freq,antenna,antenna1,antenna2,scan,amp,phase,real,imag,snr,tsys,delay,spgain)",
               "name": "xaxis",
               "readonly": false,
               "text": "xaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "Value to plot along y axis (time,chan,freq,antenna,antenna1,antenna2,scan,amp,phase,real,imag,snr,tsys,delay,spgain)",
               "name": "yaxis",
               "readonly": false,
               "text": "yaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "Antenna polarization to plot (RL,R,L,XY,X,Y,/)",
               "name": "poln",
               "readonly": false,
               "text": "poln",
               "type": "String",
               "value": null
            },
            {
               "description": "field names or index of calibrators: ''==>all",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "antenna/baselines: ''==>all, antenna = '3,VA04'",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "spectral window:channels: ''==>all, spw='1:5~57'",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "time range: ''==>all",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Panel number on display screen (yxn)",
               "name": "subplot",
               "readonly": false,
               "text": "subplot",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Overplot solutions on existing display",
               "name": "overplot",
               "readonly": false,
               "text": "overplot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Specify if old plots are cleared or not (ignore)",
               "name": "clearpanel",
               "readonly": false,
               "text": "clearpanel",
               "type": "String",
               "value": null
            },
            {
               "description": "Iterate plots on antenna,time,spw,field",
               "name": "iteration",
               "readonly": false,
               "text": "iteration",
               "type": "String",
               "value": null
            },
            {
               "description": "plot axes ranges: [xmin,xmax,ymin,ymax]",
               "name": "plotrange",
               "readonly": false,
               "text": "plotrange",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, show flagged solutions",
               "name": "showflags",
               "readonly": false,
               "text": "showflags",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "pylab plot symbol",
               "name": "plotsymbol",
               "readonly": false,
               "text": "plotsymbol",
               "type": "String",
               "value": "o"
            },
            {
               "description": "initial plotting color",
               "name": "plotcolor",
               "readonly": false,
               "text": "plotcolor",
               "type": "String",
               "value": "blue"
            },
            {
               "description": "Size of plotted marks",
               "name": "markersize",
               "readonly": false,
               "text": "markersize",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Font size for labels",
               "name": "fontsize",
               "readonly": false,
               "text": "fontsize",
               "type": "Float",
               "value": 10.0
            },
            {
               "description": "''= no plot hardcopy, otherwise supply name",
               "name": "figfile",
               "readonly": false,
               "text": "figfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Show plot on gui",
               "name": "showgui",
               "readonly": false,
               "text": "showgui",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_plotcal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "CASA plotms task",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "CASA plotms task",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c plotms"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS name",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of subplot rows (default 1).",
               "name": "gridrows",
               "readonly": false,
               "text": "gridrows",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Number of subplot columns",
               "name": "gridcols",
               "readonly": false,
               "text": "gridcols",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Row location of the plot",
               "name": "rowindex",
               "readonly": false,
               "text": "rowindex",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Column location of the plot",
               "name": "colindex",
               "readonly": false,
               "text": "colindex",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Index to address a subplot",
               "name": "plotindex",
               "readonly": false,
               "text": "plotindex",
               "type": "Integer",
               "value": 0
            },
            {
               "description": " plot x-axis (blank for default/current)",
               "name": "xaxis",
               "readonly": false,
               "text": "xaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "Plot y-axis (blank for default/current)",
               "name": "yaxis",
               "readonly": false,
               "text": "yaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "which data column to use for Visibility values",
               "name": "xdatacolumn",
               "readonly": false,
               "text": "xdatacolumn",
               "type": "String",
               "value": null
            },
            {
               "description": "which data column to use for Visibility values",
               "name": "ydatacolumn",
               "readonly": false,
               "text": "ydatacolumn",
               "type": "String",
               "value": null
            },
            {
               "description": "Field names or field index numbers",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows:channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Time range (blank for all)",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Uv range (blank for all)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Antenna/baselines (blank for all)",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan numbers (blank for all)",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Correlations (blank for all)",
               "name": "correlation",
               "readonly": false,
               "text": "correlation",
               "type": "String",
               "value": null
            },
            {
               "description": "(sub)array numbers (blank for all)",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "MS selection (blank for all)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Average data",
               "name": "averagedata",
               "readonly": false,
               "text": "averagedata",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Average over channel?  (blank = False, otherwise value in channels)",
               "name": "avgchannel",
               "readonly": false,
               "text": "avgchannel",
               "type": "String",
               "value": null
            },
            {
               "description": "Average over time? (blank = False, otherwise value in seconds)",
               "name": "avgtime",
               "readonly": false,
               "text": "avgtime",
               "type": "String",
               "value": null
            },
            {
               "description": "Only valid if time averaging is turned on.  average over scans?",
               "name": "avgscan",
               "readonly": false,
               "text": "avgscan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Only valid if time averaging is turned on.  average over fields?",
               "name": "avgfield",
               "readonly": false,
               "text": "avgfield",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Average over all baselines?  (mutually exclusive with avgantenna)",
               "name": "avgbaseline",
               "readonly": false,
               "text": "avgbaseline",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Average by per-antenna?  (mutually  exclusive with avgbaseline)",
               "name": "avgantenna",
               "readonly": false,
               "text": "avgantenna",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Average over all spectral windows?",
               "name": "avgspw",
               "readonly": false,
               "text": "avgspw",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Do scalar averaging?",
               "name": "scalar",
               "readonly": false,
               "text": "scalar",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "The frame in which to render frequency and velocity axes",
               "name": "freqframe",
               "readonly": false,
               "text": "freqframe",
               "type": "String",
               "value": null
            },
            {
               "description": "Rest frequency to use for velocity  conversions",
               "name": "restfreq",
               "readonly": false,
               "text": "restfreq",
               "type": "String",
               "value": null
            },
            {
               "description": "The definition in which to render velocity",
               "name": "veldef",
               "readonly": false,
               "text": "veldef",
               "type": "String",
               "value": "RADIO"
            },
            {
               "description": "Adjust phases by this phase center shift [dx,dy] (arcsec)",
               "name": "shift",
               "readonly": false,
               "text": "shift",
               "type": "String",
               "value": [
                  0.0,
                  0.0
               ]
            },
            {
               "description": "Extend flags based on correlation?",
               "name": "extcorr",
               "readonly": false,
               "text": "extcorr",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Extend flags based on channel?",
               "name": "extchannel",
               "readonly": false,
               "text": "extchannel",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "the axis over which to iterate",
               "name": "iteraxis",
               "readonly": false,
               "text": "iteraxis",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, iterated plots should share a common x-axis label per column.",
               "name": "xselfscale",
               "readonly": false,
               "text": "xselfscale",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If true, iterated plots should share a common y-axis label per row.",
               "name": "yselfscale",
               "readonly": false,
               "text": "yselfscale",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Plots should share a common x-axis.",
               "name": "xsharedaxis",
               "readonly": false,
               "text": "xsharedaxis",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Plots should share a common y-axis.",
               "name": "ysharedaxis",
               "readonly": false,
               "text": "ysharedaxis",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "set a custom symbol(s) for unflagged points",
               "name": "customsymbol",
               "readonly": false,
               "text": "customsymbol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "shape of plotted unflagged symbols",
               "name": "symbolshape",
               "readonly": false,
               "text": "symbolshape",
               "type": "String",
               "value": "autoscaling"
            },
            {
               "description": "size of plotted unflagged symbols",
               "name": "symbolsize",
               "readonly": false,
               "text": "symbolsize",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "color of plotted unflagged symbols",
               "name": "symbolcolor",
               "readonly": false,
               "text": "symbolcolor",
               "type": "String",
               "value": "0000ff"
            },
            {
               "description": "fill type of plotted unflagged symbols",
               "name": "symbolfill",
               "readonly": false,
               "text": "symbolfill",
               "type": "String",
               "value": "fill"
            },
            {
               "description": "selects outlining plotted unflagged points",
               "name": "symboloutline",
               "readonly": false,
               "text": "symboloutline",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "selects which data to use for colorizing",
               "name": "coloraxis",
               "readonly": false,
               "text": "coloraxis",
               "type": "String",
               "value": null
            },
            {
               "description": "set a custom plot symbol for flagged points",
               "name": "customflaggedsymbol",
               "readonly": false,
               "text": "customflaggedsymbol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "shape of plotted flagged symbols",
               "name": "flaggedsymbolshape",
               "readonly": false,
               "text": "flaggedsymbolshape",
               "type": "String",
               "value": "nosymbol"
            },
            {
               "description": "size of plotted flagged symbols",
               "name": "flaggedsymbolsize",
               "readonly": false,
               "text": "flaggedsymbolsize",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "color of plotted flagged symbols",
               "name": "flaggedsymbolcolor",
               "readonly": false,
               "text": "flaggedsymbolcolor",
               "type": "String",
               "value": "ff0000"
            },
            {
               "description": "fill type of plotted flagged symbols",
               "name": "flaggedsymbolfill",
               "readonly": false,
               "text": "flaggedsymbolfill",
               "type": "String",
               "value": "fill"
            },
            {
               "description": "selects outlining plotted flagged points",
               "name": "flaggedsymboloutline",
               "readonly": false,
               "text": "flaggedsymboloutline",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "plot axes ranges: [xmin,xmax,ymin,ymax]",
               "name": "plotrange",
               "readonly": false,
               "text": "plotrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Title written along top of plot",
               "name": "title",
               "readonly": false,
               "text": "title",
               "type": "String",
               "value": null
            },
            {
               "description": "Text for horizontal axis. Blank for default.",
               "name": "xlabel",
               "readonly": false,
               "text": "xlabel",
               "type": "String",
               "value": null
            },
            {
               "description": "Text for vertical axis. Blank for default.",
               "name": "ylabel",
               "readonly": false,
               "text": "ylabel",
               "type": "String",
               "value": null
            },
            {
               "description": "Show major grid lines (horiz and vert.)",
               "name": "showmajorgrid",
               "readonly": false,
               "text": "showmajorgrid",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Line width in pixels of major grid lines",
               "name": "majorwidth",
               "readonly": false,
               "text": "majorwidth",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Major grid line style: solid dash dot none",
               "name": "majorstyle",
               "readonly": false,
               "text": "majorstyle",
               "type": "String",
               "value": null
            },
            {
               "description": "Color as name or hex code of major grid lines",
               "name": "majorcolor",
               "readonly": false,
               "text": "majorcolor",
               "type": "String",
               "value": null
            },
            {
               "description": "Show minor grid lines (horiz and vert.)",
               "name": "showminorgrid",
               "readonly": false,
               "text": "showminorgrid",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Show a legend on the plot.",
               "name": "showlegend",
               "readonly": false,
               "text": "showlegend",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Line width in pixels of minor grid lines",
               "name": "minorwidth",
               "readonly": false,
               "text": "minorwidth",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Line width in pixels of minor grid lines",
               "name": "minorstyle",
               "readonly": false,
               "text": "minorstyle",
               "type": "String",
               "value": null
            },
            {
               "description": "Color as name or hex code of minor grid lines",
               "name": "minorcolor",
               "readonly": false,
               "text": "minorcolor",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of plot file to save automatically.",
               "name": "plotfile",
               "readonly": false,
               "text": "plotfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Remove any existing plots so new ones can replace them.",
               "name": "clearplots",
               "readonly": false,
               "text": "clearplots",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Export format type (jpg, png, ps, pdf, txt), if not provided, plotfile extension will be used",
               "name": "expformat",
               "readonly": false,
               "text": "expformat",
               "type": "String",
               "value": "png"
            },
            {
               "description": "Export all iteration plots or only the current one",
               "name": "exprange",
               "readonly": false,
               "text": "exprange",
               "type": "String",
               "value": null
            },
            {
               "description": "Overwrite exsting file",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Show gui",
               "name": "showgui",
               "readonly": false,
               "text": "showgui",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_plotms",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Plot the uv distribution",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Plot the uv distribution",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c plotuv"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Save the plotted figure to this file",
               "name": "figfile",
               "readonly": false,
               "text": "figfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using ID(s) or name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": ""
            },
            {
               "description": "Select (sub)array(s) by array ID number",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": ""
            },
            {
               "description": "Maximum number of points per plot.",
               "name": "maxnpts",
               "readonly": false,
               "text": "maxnpts",
               "type": "Integer",
               "value": 100000
            },
            {
               "description": "a list of matplotlib color codes",
               "name": "colors",
               "readonly": false,
               "text": "colors",
               "type": "String",
               "value": [
                  "r",
                  "y",
                  "g",
                  "b"
               ]
            },
            {
               "description": "A matplotlib plot symbol code",
               "name": "symb",
               "readonly": false,
               "text": "symb",
               "type": "String",
               "value": ","
            },
            {
               "description": "How many times to cycle through colors per plot.",
               "name": "ncycles",
               "readonly": false,
               "text": "ncycles",
               "type": "Integer",
               "value": 1
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa47_plotuv",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Specify Calibration Values of Various Types",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Specify Calibration Values of Various Types",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c polcal"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "vis",
               "readonly": false,
               "text": "vis",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output gain calibration table",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field using field id(s) or field name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Select data based on time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange (default units meters)",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Optional complex data selection (ignore for now)",
               "name": "msselect",
               "readonly": false,
               "text": "msselect",
               "type": "String",
               "value": null
            },
            {
               "description": "Solution interval: egs. 'inf', '60s' (see help)",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "inf"
            },
            {
               "description": "Data axes which to combine for solve (obs, scan, spw, and/or field)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": "obs,scan"
            },
            {
               "description": "Pre-averaging interval (sec) ",
               "name": "preavg",
               "readonly": false,
               "text": "preavg",
               "type": "Float",
               "value": 300.0
            },
            {
               "description": "Reference antenna name(s)",
               "name": "refant",
               "readonly": false,
               "text": "refant",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum baselines _per antenna_ required for solve",
               "name": "minblperant",
               "readonly": false,
               "text": "minblperant",
               "type": "Integer",
               "value": 4
            },
            {
               "description": "Reject solutions below this SNR",
               "name": "minsnr",
               "readonly": false,
               "text": "minsnr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Type of instrumental polarization solution (see help)",
               "name": "poltype",
               "readonly": false,
               "text": "poltype",
               "type": "String",
               "value": "D+QU"
            },
            {
               "description": "Point source Stokes parameters for source model.",
               "name": "smodel",
               "readonly": false,
               "text": "smodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Append solutions to the (existing) table",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use callib or traditional cal apply parameters",
               "name": "docallib",
               "readonly": false,
               "text": "docallib",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cal Library filename",
               "name": "callib",
               "readonly": false,
               "text": "callib",
               "type": "String",
               "value": null
            },
            {
               "description": "Gain calibration table(s) to apply on the fly",
               "name": "gaintable",
               "readonly": false,
               "text": "gaintable",
               "type": "String",
               "value": null
            },
            {
               "description": "Select a subset of calibrators from gaintable(s)",
               "name": "gainfield",
               "readonly": false,
               "text": "gainfield",
               "type": "String",
               "value": null
            },
            {
               "description": "Interpolation mode (in time) to use for each gaintable(s)",
               "name": "interp",
               "readonly": false,
               "text": "interp",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral windows combinations to form for gaintables(s)",
               "name": "spwmap",
               "readonly": false,
               "text": "spwmap",
               "type": "String",
               "value": null
            },
            {
               "description": "Save task output into a python pickle",
               "name": "save_result",
               "readonly": false,
               "text": "save_result",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_polcal",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Derive linear polarization from gain ratio",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Derive linear polarization from gain ratio",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c polfromgain"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Input calibration table",
               "name": "tablein",
               "readonly": false,
               "text": "tablein",
               "type": "String",
               "value": null
            },
            {
               "description": "Output calibration table (forces polarization correction if specified)",
               "name": "caltable",
               "readonly": false,
               "text": "caltable",
               "type": "String",
               "value": null
            },
            {
               "description": "Manual position angle offset",
               "name": "paoffset",
               "readonly": false,
               "text": "paoffset",
               "type": "Float",
               "value": null
            },
            {
               "description": "Output pickle file to the result from task",
               "name": "save_result",
               "readonly": false,
               "text": "save_result",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_polfromgain",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "This task removes tables if they are not being currently accessed via the casapy process. Note: if you have multiple sessions running bad things could happen if you remove a table being accessed by another process.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "This task removes tables if they are not being currently accessed via the casapy process. Note: if you have multiple sessions running bad things could happen if you remove a table being accessed by another process.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c rmtables"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Names of tables",
               "name": "tablenames",
               "readonly": false,
               "text": "tablenames",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_rmtables",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Runs a user defined script within CASA",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Runs a user defined script within CASA",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c casa"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS to process",
               "name": "vis",
               "readonly": false,
               "text": "vis",
               "type": "String",
               "value": null
            },
            {
               "description": "Custom script (string) to run within CASA",
               "name": "script",
               "readonly": false,
               "text": "script",
               "type": "String",
               "value": "print(\"Hello CASA!\")"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_script",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Fills the model column with the visibilities of a calibrator",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Fills the model column with the visibilities of a calibrator",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c setjy"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Field Name(s). Comma separated string of field IDs/names",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral window identifier (list)",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Time range to operate on (for usescratch=T)",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range (for  usescratch=T)",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID range (for  usescratch=T)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation intent",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "scale the flux density on a per channel basis or else on a per spw basis",
               "name": "scalebychan",
               "readonly": false,
               "text": "scalebychan",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Flux density standard",
               "name": "standard",
               "readonly": false,
               "text": "standard",
               "type": "String",
               "value": "Perley-Butler 2010"
            },
            {
               "description": "method to be used to interpolate in time",
               "name": "interpolation",
               "readonly": false,
               "text": "interpolation",
               "type": "String",
               "value": "linear"
            },
            {
               "description": "use directions in the ephemeris table",
               "name": "useephemdir",
               "readonly": false,
               "text": "useephemdir",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Specified flux density [I,Q,U,V]; (-1 will lookup values)",
               "name": "fluxdensity",
               "readonly": false,
               "text": "fluxdensity",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral index of fluxdensity",
               "name": "spix",
               "readonly": false,
               "text": "spix",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Polarization index of calibrator (taylor expansion modelling frequency dependence, first of which is ratio of sqrt(Q^2+U^2)/I). Auto determined if Q and U are non-zero in fluxdensity option. See NRAO docs.",
               "name": "polindex",
               "readonly": false,
               "text": "polindex",
               "type": "Float",
               "value": []
            },
            {
               "description": "Polarization angle (rads) of calibrator (taylor expansion modelling frequency dependence, first of which is 0.5*arctan(U/Q). Should be specified in combination with polindex option. Ignored if fluxdensity specified non-zero coefficients for Q and U. See NRAO docs.",
               "name": "polangle",
               "readonly": false,
               "text": "polangle",
               "type": "Float",
               "value": []
            },
            {
               "description": "Reference frequency for spix",
               "name": "reffreq",
               "readonly": false,
               "text": "reffreq",
               "type": "String",
               "value": "1GHz"
            },
            {
               "description": "output dictionary from fluxscale(NB: this is a dictionary)",
               "name": "fluxdict",
               "readonly": false,
               "text": "fluxdict",
               "type": "String",
               "value": null
            },
            {
               "description": "List the available modimages for VLA calibrators or Tb models for Solar System objects",
               "name": "listmodels",
               "readonly": false,
               "text": "listmodels",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Rotation measure (in rad/m^2) Subparameter of standard='manual'. Default: 0.0 Note on the use of polindex, polangle and rotmeas. When the frequnecy-dependent polindex and polangle are used, be sure to include all the coefficients of both polindex and polangle to describe frequency depencency. Otherwise frequency-dependent Q and U flux densities are not calculated correctly. If rotmeas is given, the calculated Q and U flux densities are then corrected for the Faraday rotation.",
               "name": "rotmeas",
               "readonly": false,
               "text": "rotmeas",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "File location for field model",
               "name": "model",
               "readonly": false,
               "text": "model",
               "type": "String",
               "value": null
            },
            {
               "description": "Will create if necessary and use the MODEL_DATA",
               "name": "usescratch",
               "readonly": false,
               "text": "usescratch",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_setjy",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Create a visibility subset from an existing visibility set",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Create a visibility subset from an existing visibility set",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c split"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output measurement set",
               "name": "output-msname",
               "readonly": false,
               "text": "output-msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Which data column(s) to split out",
               "name": "datacolumn",
               "readonly": false,
               "text": "datacolumn",
               "type": "String",
               "value": "corrected"
            },
            {
               "description": "Select field using ID(s) or name(s). Comma separated string",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of channels to average to form one output channel",
               "name": "width",
               "readonly": false,
               "text": "width",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Bin width for time averaging",
               "name": "timebin",
               "readonly": false,
               "text": "timebin",
               "type": "String",
               "value": "0s"
            },
            {
               "description": "Let time bins span changes in scan and/or state",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": "scan"
            },
            {
               "description": "Select data by time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan numbers",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan intents",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Select (sub)array(s) by array ID number",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by baseline length",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by baseline length",
               "name": "correlation",
               "readonly": false,
               "text": "correlation",
               "type": "String",
               "value": null
            },
            {
               "description": "If practical, keep *completely flagged rows* instead of dropping them.",
               "name": "keepflags",
               "readonly": false,
               "text": "keepflags",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If the input is a multi-MS, make the output one, too. (experimental)",
               "name": "keepmms",
               "readonly": false,
               "text": "keepmms",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_split",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Reweight visibilities according to their scatter (Experimental)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Reweight visibilities according to their scatter (Experimental)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c statwt"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Use rms instead of stddev",
               "name": "dorms",
               "readonly": false,
               "text": "dorms",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Estimate the noise per antenna -not implemented (vs. per baseline)",
               "name": "byantenna",
               "readonly": false,
               "text": "byantenna",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "The signal-free spectral window:channels to estimate the scatter from",
               "name": "fitspw",
               "readonly": false,
               "text": "fitspw",
               "type": "String",
               "value": null
            },
            {
               "description": "The signal-free correlation(s) to estimate the scatter from (not implemented)",
               "name": "fitcorr",
               "readonly": false,
               "text": "fitcorr",
               "type": "String",
               "value": null
            },
            {
               "description": "Let estimates span changes in spw, corr, scan and/or state",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": null
            },
            {
               "description": "Bin length for estimates (not implemented)",
               "name": "timebin",
               "readonly": false,
               "text": "timebin",
               "type": "String",
               "value": "0s"
            },
            {
               "description": "Minimum number of unflagged visibilities for estimating the scatter",
               "name": "minsamp",
               "readonly": false,
               "text": "minsamp",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Select field using ID(s) or name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": "0"
            },
            {
               "description": "Select spectral window/channels",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by time range",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan numbers",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data by scan intents",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Select (sub)array(s) by array ID number",
               "name": "array",
               "readonly": false,
               "text": "array",
               "type": "String",
               "value": null
            },
            {
               "description": "Select by observation ID(s)",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Which data column to calculate the scatter from",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": "corrected"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_statwt",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "CASA tclean task. Clean based algorithm for multi-scale and wideband image reconstruction, widefield imaging correcting for the w-term",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "CASA tclean task. Clean based algorithm for multi-scale and wideband image reconstruction, widefield imaging correcting for the w-term",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.6.3"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c tclean"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Pre-name of output images",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Text file with image names, sizes,centers for outliers",
               "name": "outlierfile",
               "readonly": false,
               "text": "outlierfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Field Name or id",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Spectral windows e.g. '0~3', '' is all",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Other data selection parameters",
               "name": "selectdata",
               "readonly": false,
               "text": "selectdata",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Range of time to select from data, e.g. timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'",
               "name": "timerange",
               "readonly": false,
               "text": "timerange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data within uvrange",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Select data based on antenna/baseline",
               "name": "antenna",
               "readonly": false,
               "text": "antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan number range",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": null
            },
            {
               "description": "Observation ID range",
               "name": "observation",
               "readonly": false,
               "text": "observation",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan Intent(s)",
               "name": "intent",
               "readonly": false,
               "text": "intent",
               "type": "String",
               "value": null
            },
            {
               "description": "Data column to image",
               "name": "datacolumn",
               "readonly": false,
               "text": "datacolumn",
               "type": "String",
               "value": "corrected"
            },
            {
               "description": "Spectral gridding type (mfs, cube, cubedata, cont)",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "mfs"
            },
            {
               "description": "Number of channels (planes) in output image; -1 = all",
               "name": "nchan",
               "readonly": false,
               "text": "nchan",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Begin the output cube at the frequency of this channel in the MS",
               "name": "start",
               "readonly": false,
               "text": "start",
               "type": "String",
               "value": null
            },
            {
               "description": "Width of output channel relative to MS channel (# to average)",
               "name": "width",
               "readonly": false,
               "text": "width",
               "type": "String",
               "value": 1
            },
            {
               "description": "Spectral interpolation (nearest, linear, cubic).",
               "name": "interpolation",
               "readonly": false,
               "text": "interpolation",
               "type": "String",
               "value": "linear"
            },
            {
               "description": "Re-restore the cube image to a common beam when True",
               "name": "resmooth",
               "readonly": false,
               "text": "resmooth",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "velocity frame of output image",
               "name": "outframe",
               "readonly": false,
               "text": "outframe",
               "type": "String",
               "value": null
            },
            {
               "description": "Velocity definition of output image",
               "name": "veltype",
               "readonly": false,
               "text": "veltype",
               "type": "String",
               "value": "radio"
            },
            {
               "description": "Number of Taylor coefficients to model the sky frequency dependence",
               "name": "nterms",
               "readonly": false,
               "text": "nterms",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Reference frequency (nterms > 1),'' uses central data-frequency e.g '1.4GHz' with units.",
               "name": "reffreq",
               "readonly": false,
               "text": "reffreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Gridding kernel for FFT-based transforms",
               "name": "gridmode",
               "readonly": false,
               "text": "gridmode",
               "type": "String",
               "value": "standard"
            },
            {
               "description": "Number of w-projection planes for convolution",
               "name": "wprojplanes",
               "readonly": false,
               "text": "wprojplanes",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Coordinate prection",
               "name": "projection",
               "readonly": false,
               "text": "projection",
               "type": "String",
               "value": "SIN"
            },
            {
               "description": "Number of facets along each axis (main image only)",
               "name": "facets",
               "readonly": false,
               "text": "facets",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Convolution function cache directory",
               "name": "cfcache",
               "readonly": false,
               "text": "cfcache",
               "type": "String",
               "value": null
            },
            {
               "description": "Maximum number of iterations",
               "name": "clean_iterations",
               "readonly": false,
               "text": "clean_iterations",
               "type": "Integer",
               "value": 500
            },
            {
               "description": "Maximum number of minor-cycle iterations (per plane) before triggering a major cycle",
               "name": "cycleniter",
               "readonly": false,
               "text": "cycleniter",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Loop gain for cleaning",
               "name": "gain",
               "readonly": false,
               "text": "gain",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "Flux level to stop cleaning, must include units: '1.0mJy'",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "String",
               "value": "0.0mJy"
            },
            {
               "description": "Method of PSF calculation to use during minor cycles",
               "name": "psfmode",
               "readonly": false,
               "text": "psfmode",
               "type": "String",
               "value": "clark"
            },
            {
               "description": "Controls how often major cycles are done. (e.g. 5 for frequently)",
               "name": "cyclefactor",
               "readonly": false,
               "text": "cyclefactor",
               "type": "Float",
               "value": 1.5
            },
            {
               "description": "List of deconvolution scales (pixels); [] = standard clean",
               "name": "multiscale",
               "readonly": false,
               "text": "multiscale",
               "type": "String",
               "value": null
            },
            {
               "description": "a bias to give more weight toward smaller scales",
               "name": "smallscalebias",
               "readonly": false,
               "text": "smallscalebias",
               "type": "Float",
               "value": 0.6
            },
            {
               "description": "Use interactive clean (with GUI viewer)",
               "name": "interactive",
               "readonly": false,
               "text": "interactive",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Cleanbox(es), mask image(s),region(s), or a level",
               "name": "mask",
               "readonly": false,
               "text": "mask",
               "type": "String",
               "value": null
            },
            {
               "description": "x and y image size in pixels.  Single value: same for both",
               "name": "npix",
               "readonly": false,
               "text": "npix",
               "type": "dtype",
               "value": [
                  1024,
                  1024
               ]
            },
            {
               "description": "x and y cell size(s). Default unit arcsec.",
               "name": "cellsize",
               "readonly": false,
               "text": "cellsize",
               "type": "dtype",
               "value": [
                  "1.0arcsec"
               ]
            },
            {
               "description": "Image center: direction or field index",
               "name": "phasecenter",
               "readonly": false,
               "text": "phasecenter",
               "type": "String",
               "value": null
            },
            {
               "description": "Rest frequency to assign to image (see help)",
               "name": "restfreq",
               "readonly": false,
               "text": "restfreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Stokes params to image (eg 'I','Q','U','V','IV','QU','IQ','UV','IQUV','RR','LL','XX','YY','RRLL','XXYY')",
               "name": "stokes",
               "readonly": false,
               "text": "stokes",
               "type": "String",
               "value": "I"
            },
            {
               "description": "Weighting of uv (natural, uniform,briggs, ...)",
               "name": "weight",
               "readonly": false,
               "text": "weight",
               "type": "String",
               "value": "uniform"
            },
            {
               "description": "Briggs robustness parameter",
               "name": "robust",
               "readonly": false,
               "text": "robust",
               "type": "Float",
               "value": 0.5
            },
            {
               "description": "number of pixels to determine uv-cell size 0=> field of view",
               "name": "npixels",
               "readonly": false,
               "text": "npixels",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "uv-taper on outer baselines in uv-plane",
               "name": "outertaper",
               "readonly": false,
               "text": "outertaper",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of model image(s) to initialize cleaning",
               "name": "modelimage",
               "readonly": false,
               "text": "modelimage",
               "type": "String",
               "value": null
            },
            {
               "description": "Output Gaussian restoring beam for CLEAN image",
               "name": "restoringbeam",
               "readonly": false,
               "text": "restoringbeam",
               "type": "String",
               "value": null
            },
            {
               "description": "Output primary beam-corrected image",
               "name": "pbcor",
               "readonly": false,
               "text": "pbcor",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum PB level to use (i.e. fraction that marks the max depth of cleaning)",
               "name": "minpb",
               "readonly": false,
               "text": "minpb",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum PB level to use (i.e. fraction that marks the min depth of cleaning)",
               "name": "maxpb",
               "readonly": false,
               "text": "maxpb",
               "type": "Float",
               "value": null
            },
            {
               "description": "Convert output images to FITS files",
               "name": "port2fits",
               "readonly": false,
               "text": "port2fits",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Keep casa images when 'port2fits' is enabled",
               "name": "keep_casa_images",
               "readonly": false,
               "text": "keep_casa_images",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Run major cycles in parallel",
               "name": "parallel",
               "readonly": false,
               "text": "parallel",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Calculate PSF",
               "name": "calcpsf",
               "readonly": false,
               "text": "calcpsf",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Calculate initial residual image",
               "name": "calcres",
               "readonly": false,
               "text": "calcres",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Options to save model visibilities",
               "name": "savemodel",
               "readonly": false,
               "text": "savemodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Restore the model image",
               "name": "restoration",
               "readonly": false,
               "text": "restoration",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Restart using existing images (and start from an existing model image)",
               "name": "restart",
               "readonly": false,
               "text": "restart",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Automatically adjust automask threshold to a higher value at the begging",
               "name": "autoadjust",
               "readonly": false,
               "text": "autoadjust",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Maximum number of mask regions to be added by automasking at the beginning each minor cycles run",
               "name": "nmask",
               "readonly": false,
               "text": "nmask",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Primary beam mask",
               "name": "pbmask",
               "readonly": false,
               "text": "pbmask",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Calculate initial residual image",
               "name": "calcres",
               "readonly": false,
               "text": "calcres",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Type of mask(s) to be used for deconvolution",
               "name": "usemask",
               "readonly": false,
               "text": "usemask",
               "type": "String",
               "value": "user"
            },
            {
               "description": "Threshold for automasking (with a unit e.g. 1.0mJy or in sigma e.g 3.0",
               "name": "maskthreshold",
               "readonly": false,
               "text": "maskthreshold",
               "type": "String",
               "value": null
            },
            {
               "description": "Resolution for automasking (e.g. 10arcsec)",
               "name": "maskresolution",
               "readonly": false,
               "text": "maskresolution",
               "type": "String",
               "value": null
            },
            {
               "description": "Primary beam gain level at which to cut off normalizations",
               "name": "pblimit",
               "readonly": false,
               "text": "pblimit",
               "type": "Float",
               "value": 0.2
            },
            {
               "description": "Parallactic angle interval to rotate nearest aperture illumination function (in deg)",
               "name": "rotatepastep",
               "readonly": false,
               "text": "rotatepastep",
               "type": "Float",
               "value": 360.0
            },
            {
               "description": "Parallactic angle interval to recompute aperture illumination function (in deg)",
               "name": "computepastep",
               "readonly": false,
               "text": "computepastep",
               "type": "Float",
               "value": 360.0
            },
            {
               "description": "Convolution function cache directory name",
               "name": "cfcache",
               "readonly": false,
               "text": "cfcache",
               "type": "String",
               "value": null
            },
            {
               "description": "Use conjugate frequency for wideband A-terms",
               "name": "conjbeams",
               "readonly": false,
               "text": "conjbeams",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Use frequency dependent A-term",
               "name": "wbawp",
               "readonly": false,
               "text": "wbawp",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Use prolate spheroidal during gridding",
               "name": "psterm",
               "readonly": false,
               "text": "psterm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use aperture illumination functions during gridding",
               "name": "aterm",
               "readonly": false,
               "text": "aterm",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Number of channel chunks to grid separately",
               "name": "chanchunks",
               "readonly": false,
               "text": "chanchunks",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "VP table saved via the vpmanager",
               "name": "vptable",
               "readonly": false,
               "text": "vptable",
               "type": "String",
               "value": null
            },
            {
               "description": "Normalization type",
               "name": "normtype",
               "readonly": false,
               "text": "normtype",
               "type": "String",
               "value": "flatnoise"
            },
            {
               "description": "Noise image to compute sigma for stopping threshold (in case specified it will replace threshold)",
               "name": "noise_image",
               "readonly": false,
               "text": "noise_image",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise sigma for stopping deconvolution in the case where noise_image is provided (new thresh = sigma*noise_image.std())",
               "name": "noise_sigma",
               "readonly": false,
               "text": "noise_sigma",
               "type": "Float",
               "value": 3
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_tclean",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Continuum fitting and subtraction in the uv plane. This task estimates the continuum emission by fitting polynomials to the real and imaginary parts of the spectral windows and channels selected by fitspw.  This fit represents a model of the continuum in  all channels. The fitted continuum spectrum is subtracted from all channels selected in spw, and the result (presumably only line emission)  is stored in a new MS (vis + '.contsub'). If an MS with the output name already exists, it will be overwritten. It will read from the CORRECTED_DATA column of vis if it is present, or DATA if it is not.  Whichever column is read is presumed to have already been calibrated. If want_cont is True, the continuum fit is placed in a second new MS (vis + '.cont', also overwritten if it already exists).  N.B. because the continuum model is necessarily a smoothed fit, images made with it are liable to have their field of view reduced in some strange way.  Images of the continuum should be made by simply excluding the line channels (and probably averaging the remaining ones) in clean.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Continuum fitting and subtraction in the uv plane. This task estimates the continuum emission by fitting polynomials to the real and imaginary parts of the spectral windows and channels selected by fitspw.  This fit represents a model of the continuum in  all channels. The fitted continuum spectrum is subtracted from all channels selected in spw, and the result (presumably only line emission)  is stored in a new MS (vis + '.contsub'). If an MS with the output name already exists, it will be overwritten. It will read from the CORRECTED_DATA column of vis if it is present, or DATA if it is not.  Whichever column is read is presumed to have already been calibrated. If want_cont is True, the continuum fit is placed in a second new MS (vis + '.cont', also overwritten if it already exists).  N.B. because the continuum model is necessarily a smoothed fit, images made with it are liable to have their field of view reduced in some strange way.  Images of the continuum should be made by simply excluding the line channels (and probably averaging the remaining ones) in clean.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c uvcontsub"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input MS.  Output goes to vis + '.contsub' (will be overwritten if already exists)",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Select field(s) using id(s) or name(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Spectral window:channel selection for fitting the continuum",
               "name": "fitspw",
               "readonly": false,
               "text": "fitspw",
               "type": "String",
               "value": null
            },
            {
               "description": "Exclude Spectral window:channel selection in fitspw for fitting",
               "name": "excludechans",
               "readonly": false,
               "text": "excludechans",
               "type": "String",
               "value": null
            },
            {
               "description": "Data axes to combine for the continuum estimation (none, or spw and/or scan)",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": null
            },
            {
               "description": "Continuum fit timescale (int recommended!)",
               "name": "solint",
               "readonly": false,
               "text": "solint",
               "type": "String",
               "value": "int"
            },
            {
               "description": "Polynomial order for the fits",
               "name": "fitorder",
               "readonly": false,
               "text": "fitorder",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Spectral window selection for output",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": null
            },
            {
               "description": "Create vis + '.cont' to hold the continuum estimate.",
               "name": "want_cont",
               "readonly": false,
               "text": "want_cont",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_uvcontsub",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Subtract/add model from/to the corrected visibility data.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Subtract/add model from/to the corrected visibility data.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c uvsub"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility file (MS)",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "reverse the operation (add rather than subtract)",
               "name": "reverse",
               "readonly": false,
               "text": "reverse",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_uvsub",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Concatenate several visibility data sets",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Concatenate several visibility data sets",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c virtualconcat"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of input visibility files",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of output measurement set",
               "name": "output-msname",
               "readonly": false,
               "text": "output-msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Frequency shift tolerance for considering data as the same spwid",
               "name": "freqtol",
               "readonly": false,
               "text": "freqtol",
               "type": "String",
               "value": null
            },
            {
               "description": "Direction shift tolerance for considering data as the same field",
               "name": "dirtol",
               "readonly": false,
               "text": "dirtol",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, fields with a different name are not merged even if their direction agrees",
               "name": "respectname",
               "readonly": false,
               "text": "respectname",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Copy all rows of the POINTING table",
               "name": "copypointing",
               "readonly": false,
               "text": "copypointing",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "List of the weight scaling factors to be applied to the individual MSs",
               "name": "visweightscale",
               "readonly": false,
               "text": "visweightscale",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, a copy of the input MSs is kept in their original place",
               "name": "keepcopy",
               "readonly": false,
               "text": "keepcopy",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "casa_virtualconcat",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "CATDagger - An automatic differential gain catalog tagger",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "CATDagger - An automatic differential gain catalog tagger",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/catdagger:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " dagger"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Residual / noise FITS map to use for estimating local RMS",
               "name": "noise-map",
               "readonly": false,
               "text": "noise-map",
               "type": "String",
               "value": null
            },
            {
               "description": "Stokes to consider when computing global noise estimates. Ideally this should be 'V', if available",
               "name": "stokes",
               "readonly": false,
               "text": "stokes",
               "type": "String",
               "value": "I"
            },
            {
               "description": "Minimum number of tiles per region. Regions with fewer tiles will not be tagged as dE",
               "name": "min-tiles-region",
               "readonly": false,
               "text": "min-tiles-region",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "SAODS9 regions filename to write out",
               "name": "ds9-reg-file",
               "readonly": false,
               "text": "ds9-reg-file",
               "type": "String",
               "value": "dE.reg"
            },
            {
               "description": "SAODS9 regions filename to contain tagged cluster leads as circles",
               "name": "ds9-tag-reg-file",
               "readonly": false,
               "text": "ds9-tag-reg-file",
               "type": "String",
               "value": "dE.clusterleads.reg"
            },
            {
               "description": "Threshold to use in detecting outlier regions",
               "name": "sigma",
               "readonly": false,
               "text": "sigma",
               "type": "Float",
               "value": 4.5
            },
            {
               "description": "Number of pixels per region tile axis",
               "name": "tile-size",
               "readonly": false,
               "text": "tile-size",
               "type": "Integer",
               "value": 80
            },
            {
               "description": "Percentile tiles to consider for global rms calculations",
               "name": "global-rms-percentile",
               "readonly": false,
               "text": "global-rms-percentile",
               "type": "Float",
               "value": 20.0
            },
            {
               "description": "Tag name to use for tagged sources in tigger LSM",
               "name": "de-tag-name",
               "readonly": false,
               "text": "de-tag-name",
               "type": "String",
               "value": "dE"
            },
            {
               "description": "Cutoff distance from phase centre in which no tags be raised. This can be used to effectively exclude the FWHM of an parabolic reflector-based interferometer.",
               "name": "min-distance-from-tracking-centre",
               "readonly": false,
               "text": "min-distance-from-tracking-centre",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Add manual exclusion zone to which no dE tags shall be added. Expects a tripple of centre X, Y pixel and radius.",
               "name": "add-custom-exclusion-zone",
               "readonly": false,
               "text": "add-custom-exclusion-zone",
               "type": "String",
               "value": null
            },
            {
               "description": "The maximum tolerance for right skewness of a pixel distribution within a region.A large value (tailed distribution) indicates significant uncleaned flux remaining in the residual. This can be used to effectively control detection sensitivity to uncleaned extended emission, but should be set to 0 if residuals other than stokes I are used",
               "name": "max-region-right-skewness",
               "readonly": false,
               "text": "max-region-right-skewness",
               "type": "Float",
               "value": 2
            },
            {
               "description": "PSF image from which BPA, BMAJ and BMIN may be extracted",
               "name": "psf-image",
               "readonly": false,
               "text": "psf-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Tigger LSM to recluster and tag. If this is not specified only DS9 regions will be written out",
               "name": "input-lsm",
               "readonly": false,
               "text": "input-lsm",
               "type": "String",
               "value": null
            },
            {
               "description": "Blank out model images within resolution of tagged LSM components. Expects list of model FITS files. This option is useful for hybrid DFT-CLEAN component modelling as onlyextended / faint clean components contributes to model.",
               "name": "remove-tagged-dE-components-from-model-images",
               "readonly": false,
               "text": "remove-tagged-dE-components-from-model-images",
               "type": "String",
               "value": null
            },
            {
               "description": "Only store dE tagged sources in lsm. This option is useful for hybrid DFT-CLEAN component modelling, as only bright compact gaussian emission contributes to dE solutions",
               "name": "only-dEs-in-lsm",
               "readonly": false,
               "text": "only-dEs-in-lsm",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "The maximum tolerance for the ratio of positive to negative flux. Only to be used with stokes I",
               "name": "max-positive-to-negative-flux",
               "readonly": false,
               "text": "max-positive-to-negative-flux",
               "type": "Float",
               "value": 1.1
            },
            {
               "description": "The maximum tolerance for absolute skewness of a pixel distribution within a region.A large value (tailed distribution) indicates significant uncleaned flux remaining in the residual. This can be used to effectively control detection sensitivity to uncleaned extended emission, but should be set to 0 if residuals other than stokes Q,U or V are used",
               "name": "max-region-abs-skewness",
               "readonly": false,
               "text": "max-region-abs-skewness",
               "type": "Float",
               "value": 99999999999999
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "catdagger",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Tool used to change the phase centre of a measurement set",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Tool used to change the phase centre of a measurement set",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/chgcentre:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " chgcentre"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of MS file to change the phase centre",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "New RA to change to. The format of RA can either be 00h00m00.0s or 00:00:00.0",
               "name": "new-ra",
               "readonly": false,
               "text": "new-ra",
               "type": "String",
               "value": null
            },
            {
               "description": "New DEC to change to. The format of DEC can either be 00h00m00.0s or 00:00:00.0",
               "name": "new-dec",
               "readonly": false,
               "text": "new-dec",
               "type": "String",
               "value": null
            },
            {
               "description": "Rephase to the direction orthogonal to the best-fit plane to the antennas",
               "name": "minw",
               "readonly": false,
               "text": "minw",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Rephase to the local array zenith",
               "name": "zenith",
               "readonly": false,
               "text": "zenith",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Prepare the measurement set for w-snapshot imaging with WSClean",
               "name": "shiftback",
               "readonly": false,
               "text": "shiftback",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "chgcentre",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Creates a binary mask from a FITS image",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Creates a binary mask from a FITS image",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/astropy:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " cleanmask"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of FITS image from which to derive the mask",
               "name": "image",
               "readonly": false,
               "text": "image",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of resulting binary mask",
               "name": "output",
               "readonly": false,
               "text": "output",
               "type": "String",
               "value": null
            },
            {
               "description": "The number of standard deviations to use when clipping image",
               "name": "sigma",
               "readonly": false,
               "text": "sigma",
               "type": "Float",
               "value": 5
            },
            {
               "description": "Will divide image into this number of boxes, then perform sigma clipping in each of these boxes",
               "name": "boxes",
               "readonly": false,
               "text": "boxes",
               "type": "Integer",
               "value": 11
            },
            {
               "description": "The number of iterations to perform sigma clipping, or 0 to clip until convergence is achieved.",
               "name": "iters",
               "readonly": false,
               "text": "iters",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Value to use for masked regions",
               "name": "mask-value",
               "readonly": false,
               "text": "mask-value",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Overlap region. As a fraction of -nb/--boxes",
               "name": "overlap",
               "readonly": false,
               "text": "overlap",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Dilate mask. This is an attempt to include low surface brightness in an image.",
               "name": "dilate",
               "readonly": false,
               "text": "dilate",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Maximun dilation iterations per island",
               "name": "diter",
               "readonly": false,
               "text": "diter",
               "type": "Integer",
               "value": 20
            },
            {
               "description": "Include negative pixels when creating mask",
               "name": "no-negative",
               "readonly": false,
               "text": "no-negative",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Tolerance for dilating the mask. Will stop dilating if percentage difference between dilations is smaller than this value.",
               "name": "tolerance",
               "readonly": false,
               "text": "tolerance",
               "type": "Float",
               "value": 0.05
            },
            {
               "description": "Clip image based on this fraction of the peak pixel in the image. Will ingore sigma option",
               "name": "peak-fraction",
               "readonly": false,
               "text": "peak-fraction",
               "type": "Float",
               "value": null
            },
            {
               "description": "Log level",
               "name": "log-level",
               "readonly": false,
               "text": "log-level",
               "type": "String",
               "value": "INFO"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "cleanmask",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Distributed prediction of visibilities from a sky model",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Distributed prediction of visibilities from a sky model",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/codex-africanus:1.6.7"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " crystalball"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input MS file.",
               "name": "ms",
               "readonly": false,
               "text": "ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of file containing the sky model.",
               "name": "sky-model",
               "readonly": false,
               "text": "sky-model",
               "type": "String",
               "value": null
            },
            {
               "description": "Output visibility column",
               "name": "output-column",
               "readonly": false,
               "text": "output-column",
               "type": "String",
               "value": "MODEL_DATA"
            },
            {
               "description": "Number of rows of input .MS that are processed in a single chunk. If zero, it will be set automatically.",
               "name": "row-chunks",
               "readonly": false,
               "text": "row-chunks",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Number of sky model components that are processed in a single chunk. If 0 it will be set automatically.",
               "name": "model-chunks",
               "readonly": false,
               "text": "model-chunks",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Optional. Give JS9 region file. Only sources within those regions will be included.",
               "name": "within",
               "readonly": false,
               "text": "within",
               "type": "String",
               "value": null
            },
            {
               "description": "Select only point-type sources.",
               "name": "points-only",
               "readonly": false,
               "text": "points-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Select only N brightest sources.",
               "name": "num-sources",
               "readonly": false,
               "text": "num-sources",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Explicitly set the number of worker threads.",
               "name": "num-workers",
               "readonly": false,
               "text": "num-workers",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Fraction of system RAM that can be used. Used when setting automatically the chunk size.",
               "name": "memory-fraction",
               "readonly": false,
               "text": "memory-fraction",
               "type": "Float",
               "value": 0.5
            },
            {
               "description": "The field name or id to be predicted. If not provided, only a single field may be present in the MS.",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "crystalball",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "CubiCal is a suite of fast radio interferometric calibration routines exploiting complex optimisation.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "CubiCal is a suite of fast radio interferometric calibration routines exploiting complex optimisation.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/cubical:1.5.8"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " gocubical"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of parset file",
               "name": "parset",
               "readonly": false,
               "text": "parset",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of measurement set (MS)",
               "name": "data-ms",
               "readonly": false,
               "text": "data-ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of MS column to read for data.",
               "name": "data-column",
               "readonly": false,
               "text": "data-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Chunk data up by this number of timeslots. This limits the amount of data\nprocessed at once. Smaller chunks allow for a smaller RAM footprint and\ngreater parallelism, but this sets an upper limit on the solution intervals\nthat may be employed. 0 means use full time axis.",
               "name": "data-time-chunk",
               "readonly": false,
               "text": "data-time-chunk",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Chunk data by this number of channels. See time-chunk for info.\n0 means full frequency axis.",
               "name": "data-freq-chunk",
               "readonly": false,
               "text": "data-freq-chunk",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If set, then time chunks will be broken up whenever the value in the named\ncolumn(s) jumps by >JUMPSIZE. Multiple column names may be given, separated\nby commas. Use None to disable.",
               "name": "data-chunk-by",
               "readonly": false,
               "text": "data-chunk-by",
               "type": "String",
               "value": null
            },
            {
               "description": "The jump size used in conjunction with chunk-by. If 0, then any change in\nvalue is a jump. If n, then the change must be >n.",
               "name": "data-chunk-by-jump",
               "readonly": false,
               "text": "data-chunk-by-jump",
               "type": "Float",
               "value": null
            },
            {
               "description": "If set, processes just one chunk of data matching the chunk ID. Useful for\ndebugging.",
               "name": "data-single-chunk",
               "readonly": false,
               "text": "data-single-chunk",
               "type": "String",
               "value": null
            },
            {
               "description": "FIELD_ID to read from the MS.",
               "name": "sel-field",
               "readonly": false,
               "text": "sel-field",
               "type": "Integer",
               "value": null
            },
            {
               "description": "DATA_DESC_IDs to read from the MS. Default reads all. Can be specified as\ne.g. \"5\", \"5,6,7\", \"5~7\" (inclusive range), \"5:8\" (exclusive range),\n\"5:\" (from 5 to last).",
               "name": "sel-ddid",
               "readonly": false,
               "text": "sel-ddid",
               "type": "String",
               "value": null
            },
            {
               "description": "Additional TaQL selection string. Combined with other selection options.",
               "name": "sel-taql",
               "readonly": false,
               "text": "sel-taql",
               "type": "String",
               "value": null
            },
            {
               "description": "Channels to read (within each DDID). Default reads all. Can be specified as\ne.g. \"5\", \"10~20\" (10 to 20 inclusive), \"10:21\" (same), \"10:\" (from 10 to\nend), \":10\" (0 to 9 inclusive), \"~9\" (same).",
               "name": "sel-chan",
               "readonly": false,
               "text": "sel-chan",
               "type": "String",
               "value": null
            },
            {
               "description": "Predict model visibilities from given LSM (using Montblanc). Expects pattern of the style source(+-?source)*(:source(+-?source)*)* where source at present can be a column name, lsm or DDFacet DicoModel. Colons split directions as specifiable as 0-indexed indicies through the gain directions and fix directions switches. If an lsm file is spcified a tagged selection of sources can be picked by appending a @[user tag] option. If a DicoModel is used regions can be extracted from the model components through a @[DS9 polygon regions file].",
               "name": "model-list",
               "readonly": false,
               "text": "model-list",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable direction-dependent models. If 'auto', this is determined\nby --sol-jones and --model-list, otherwise, enable/disable\nexplicitly.",
               "name": "model-ddes",
               "readonly": false,
               "text": "model-ddes",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply beams if specified eg. 'beam_$(corr)_$(reim).fits' or\n'beam_$(CORR)_$(REIM).fits'",
               "name": "model-beam-pattern",
               "readonly": false,
               "text": "model-beam-pattern",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam l axis",
               "name": "model-beam-l-axis",
               "readonly": false,
               "text": "model-beam-l-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam m axis",
               "name": "model-beam-m-axis",
               "readonly": false,
               "text": "model-beam-m-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply parallactic angle rotation to model visibilities. Enable this for alt-azmounts, unless your model visibilities are already rotated.",
               "name": "model-pa-rotate",
               "readonly": false,
               "text": "model-pa-rotate",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply a feed angle rotation to the model visibilities. Use 'auto' to read angles from FEED subtable, or give an explicit value in degrees.",
               "name": "model-feed-rotate",
               "readonly": false,
               "text": "model-feed-rotate",
               "type": "String",
               "value": false
            },
            {
               "description": "Use CPU or GPU for simulation.",
               "name": "montblanc-device-type",
               "readonly": false,
               "text": "montblanc-device-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Precision for simulation.",
               "name": "montblanc-dtype",
               "readonly": false,
               "text": "montblanc-dtype",
               "type": "String",
               "value": null
            },
            {
               "description": "Simulate using linear or circular feeds.",
               "name": "montblanc-feed-type",
               "readonly": false,
               "text": "montblanc-feed-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Memory budget in MB for simulation.",
               "name": "montblanc-mem-budget",
               "readonly": false,
               "text": "montblanc-mem-budget",
               "type": "Integer",
               "value": null
            },
            {
               "description": "verbosity level of Montblanc's console output",
               "name": "montblanc-verbosity",
               "readonly": false,
               "text": "montblanc-verbosity",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of OMP threads to run. Note that --dist-pin-io overrides this, if set.If 0, uses default setting. ",
               "name": "montblanc-threads",
               "readonly": false,
               "text": "montblanc-threads",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If not None, then overrides --model-pa-rotate setting to explicitly enable or disable parallactic angle rotation when computing Montblanc model visibilities. Ninja option.",
               "name": "montblanc-pa-rotate",
               "readonly": false,
               "text": "montblanc-pa-rotate",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Column to read weights from. Weights are applied by default. Specify an\nempty string to disable.",
               "name": "weight-column",
               "readonly": false,
               "text": "weight-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Which flagsets will be applied prior to calibration. \nUse \"-FLAGSET\" to apply everything except the named flagset (\"-cubical\" is\nuseful, to ignore the flags of a previous CubiCal run).",
               "name": "flags-apply",
               "readonly": false,
               "text": "flags-apply",
               "type": "String",
               "value": null
            },
            {
               "description": "Insert BITFLAG column if it is missing, and initialize a named flagset\nfrom FLAG/FLAG_ROW.",
               "name": "flags-auto-init",
               "readonly": false,
               "text": "flags-auto-init",
               "type": "String",
               "value": null
            },
            {
               "description": "Save flags to named flagset in BITFLAG. If none or 0, will not save.",
               "name": "flags-save",
               "readonly": false,
               "text": "flags-save",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, reninitializes BITFLAG column from scratch. Useful if you ended up\nwith a dead one.",
               "name": "flags-reinit-bitflags",
               "readonly": false,
               "text": "flags-reinit-bitflags",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If True, will do an extra round of flagging at the end  (post-solution)\nbased on solutions statistics, as per the following options.",
               "name": "flags-post-sol",
               "readonly": false,
               "text": "flags-post-sol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Intervals with chi-squared values larger than this value times the median\nwill be flagged.",
               "name": "flags-tf-chisq-median",
               "readonly": false,
               "text": "flags-tf-chisq-median",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities per time/frequncy slot\nrequired to prevent flagging.",
               "name": "flags-tf-np-median",
               "readonly": false,
               "text": "flags-tf-np-median",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities along the time axis required\nto prevent flagging.",
               "name": "flags-time-density",
               "readonly": false,
               "text": "flags-time-density",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities along the frequency axis\nrequired to prevent flagging.",
               "name": "flags-chan-density",
               "readonly": false,
               "text": "flags-chan-density",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities along the DDID axis\nrequired to prevent flagging.",
               "name": "flags-ddid-density",
               "readonly": false,
               "text": "flags-ddid-density",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable Mad Max flagging in the solver. This computes the median absolute residual (i.e. median absolute deviation from zero), and flags visibilities exceeding the thresholds",
               "name": "madmax-enable",
               "readonly": false,
               "text": "madmax-enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "MAD estimation mode. Use 'corr' for a separate estimate per each baseline and correlation. Otherwise, a single estimate per baseline is computed using 'all' correlations, or only the 'diag' or 'offdiag' correlations.",
               "name": "madmax-estimate",
               "readonly": false,
               "text": "madmax-estimate",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable plots for Mad Max flagging. Use 'show' to show figures interactively. Plots will show the worst flagged baseline, and a median flagged baseline, provided the fraction of flagged visibilities is above --flags-mad-plot-thr.",
               "name": "madmax-plot",
               "readonly": false,
               "text": "madmax-plot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Threshold (in terms of fraction of visibilities flagged) above which plots will be generated.",
               "name": "madmax-plot-frac-above",
               "readonly": false,
               "text": "madmax-plot-frac-above",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag on on-diagonal (parallel-hand) residuals",
               "name": "madmax-diag",
               "readonly": false,
               "text": "madmax-diag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag on off-diagonal (cross-hand) residuals",
               "name": "madmax-offdiag",
               "readonly": false,
               "text": "madmax-offdiag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Threshold for global median MAD (MMAD) flagging. MMAD is computed as the median of the per-baseline MADs. Residuals exceeding S*MMAD/1.428 will be flagged. Can be specified",
               "name": "madmax-global-threshold",
               "readonly": false,
               "text": "madmax-global-threshold",
               "type": "String",
               "value": null
            },
            {
               "description": "Threshold for MAD flagging per baseline (specified in sigmas). Residuals exceeding mad-thr*MAD/1.428 will be flagged. MAD is computed per baseline. This can be specified as a list e.g. N1,N2,N3,... The first value is used to flag residuals before a solution starts (use 0 to disable), the next value is used when the residuals are first recomputed during the solution several iteratins later (see -chi-int), etc. A final pass may be done at the end of the solution. The last value in the list is reused if necessary. Using a list with gradually decreasing values may be sensible. #metavar:SIGMAS",
               "name": "madmax-threshold",
               "readonly": false,
               "text": "madmax-threshold",
               "type": "String",
               "value": null
            },
            {
               "description": "Comma-separated list of Jones terms to enable, e.g. \"G,B,dE\"\n(default: G)",
               "name": "sol-jones",
               "readonly": false,
               "text": "sol-jones",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, then data, model and gains are taken to be diagonal. Off-diagonal terms in data and model are ignored. This option is then enforced on all Jones terms.",
               "name": "sel-diag",
               "readonly": false,
               "text": "sel-diag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "if true, then data, model and gains are taken to be diagonal. off-diagonal terms in data and model are ignored. this option is then enforced on all jones terms.",
               "name": "g-diag-only",
               "readonly": false,
               "text": "g-diag-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If true, then data, model and gains are taken to be diagonal. Off-diagonal terms in data and model are ignored. This option is then enforced on all Jones terms.",
               "name": "dd-diag-only",
               "readonly": false,
               "text": "dd-diag-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Solve in single or double precision",
               "name": "sol-precision",
               "readonly": false,
               "text": "sol-precision",
               "type": "String",
               "value": null
            },
            {
               "description": "Theshold for gain accuracy - gains which improve by less than this value\nare considered converged.",
               "name": "sol-delta-g",
               "readonly": false,
               "text": "sol-delta-g",
               "type": "String",
               "value": null
            },
            {
               "description": "Theshold for solution stagnancy - if the chi-squared is improving by less\nthan this value, the gain is considered stalled.",
               "name": "sol-delta-chi",
               "readonly": false,
               "text": "sol-delta-chi",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of iterations to perform between chi-suqared checks. This is done to\navoid computing the expensive chi-squared test evey iteration.",
               "name": "sol-chi-int",
               "readonly": false,
               "text": "sol-chi-int",
               "type": "String",
               "value": null
            },
            {
               "description": "Re-estimate chi-squred and noise at the end of a solution cycle. Disabling\nlast rites can save a bit of time, but makes the post-solution stats less\ninformative.",
               "name": "sol-last-rites",
               "readonly": false,
               "text": "sol-last-rites",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum percentage of solutions which must have stalled before terminating\nthe solver.",
               "name": "sol-stall-quorum",
               "readonly": false,
               "text": "sol-stall-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations per Jones term. If empty, then each Jones\nterm is solved for once, up to convergence, or up to its -max-iter\nsetting.\nOtherwise, set to a list giving the number of iterations per Jones term.\nFor example, given two Jones terms and --sol-num-iter 10,20,10, it will\ndo 10 iterations on the first term, 20 on the second, and 10 again on the\nfirst.",
               "name": "sol-term-iters",
               "readonly": false,
               "text": "sol-term-iters",
               "type": "dtype",
               "value": null
            },
            {
               "description": "Min baseline length to solve for",
               "name": "sol-min-bl",
               "readonly": false,
               "text": "sol-min-bl",
               "type": "Float",
               "value": null
            },
            {
               "description": "Max baseline length to solve for. If 0, no maximum is applied.",
               "name": "sol-max-bl",
               "readonly": false,
               "text": "sol-max-bl",
               "type": "Float",
               "value": null
            },
            {
               "description": "Additional subset of data to actually solve for. Any TaQL string may be\nused.",
               "name": "sol-subset",
               "readonly": false,
               "text": "sol-subset",
               "type": "String",
               "value": null
            },
            {
               "description": "Load and apply BBCs computed in a previous run. Apply with care! This will\ntend to suppress all unmodelled flux towards the centre of the field.",
               "name": "bbc-load-from",
               "readonly": false,
               "text": "bbc-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Compute full 2x2 BBCs (as opposed to diagonal-only). Only useful if you\nreally trust the polarisation information in your sky model.",
               "name": "bbc-compute-2x2",
               "readonly": false,
               "text": "bbc-compute-2x2",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply full 2x2 BBCs (as opposed to diagonal-only). Only enable this if you\nreally trust the polarisation information in your sky model.",
               "name": "bbc-apply-2x2",
               "readonly": false,
               "text": "bbc-apply-2x2",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Compute suggested BBCs at end of run,\nand save them to the given database. It can be useful to have this always\nenabled, since the BBCs provide useful diagnostics of the solution quality\n(and are not actually applied without a load-from setting).",
               "name": "bbc-save-to",
               "readonly": false,
               "text": "bbc-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "Compute BBCs per-channel (else across entire band).",
               "name": "bbc-per-chan",
               "readonly": false,
               "text": "bbc-per-chan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Generate output BBC plots.",
               "name": "bbc-plot",
               "readonly": false,
               "text": "bbc-plot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of CPUs (processes) to use (0 or 1 disables parallelism).",
               "name": "dist-ncpu",
               "readonly": false,
               "text": "dist-ncpu",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Maximum number of time/freq data-chunks to load into memory simultaneously. If 0, then as many as possible will be loaded.",
               "name": "dist-max-chunks",
               "readonly": false,
               "text": "dist-max-chunks",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Number of OMP threads to use. 0: determine automatically.",
               "name": "dist-nthread",
               "readonly": false,
               "text": "dist-nthread",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If empty or None, processes will not be pinned to cores. Otherwise, set to the starting core number, or 'N:K' to start with N and step by K",
               "name": "dist-pin",
               "readonly": false,
               "text": "dist-pin",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If not 0, pins the I/O & Montblanc process to a separate core, or cores if --montblanc-threads is specified). Ignored if --dist-pin is not set",
               "name": "dist-pin-io",
               "readonly": false,
               "text": "dist-pin-io",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set, pins the main process to a separate core. If set to, pins it to the same core as the I/O process, if I/O process is pinned. Ignored if --dist-pin is not set",
               "name": "pin-main",
               "readonly": false,
               "text": "pin-main",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum number of time/freq data-chunks to load into memory\nsimultaneously. This number should be divisible by ncpu-1 for optimal\nperformance.",
               "name": "dist-min-chunks",
               "readonly": false,
               "text": "dist-min-chunks",
               "type": "String",
               "value": null
            },
            {
               "description": "Base name of output files.",
               "name": "out-name",
               "readonly": false,
               "text": "out-name",
               "type": "String",
               "value": null
            },
            {
               "description": "Allow overwriting of existing output files. If this is set, and the output parset file exists, will raise an exception",
               "name": "out-overwrite",
               "readonly": false,
               "text": "out-overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Operational mode.\n[so] solve only;\n[sc] solve and generate corrected visibilities;\n[sr] solve and generate corrected residuals;\n[ss] solve and generate uncorrected residuals;\n[ac] apply solutions, generate corrected visibilities;\n[ar] apply solutions, generate corrected residuals;\n[as] apply solutions, generate uncorrected residuals;",
               "name": "out-mode",
               "readonly": false,
               "text": "out-mode",
               "type": "String",
               "value": null
            },
            {
               "description": "Output MS column name (if applicable).",
               "name": "out-column",
               "readonly": false,
               "text": "out-column",
               "type": "String",
               "value": null
            },
            {
               "description": "If set, model visibilities will be written to the specified column.",
               "name": "out-model-column",
               "readonly": false,
               "text": "out-model-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Reinitialize output MS column. Useful if the column is in a half-filled\nor corrupt state.",
               "name": "out-reinit-column",
               "readonly": false,
               "text": "out-reinit-column",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Which model to subtract, if generating residuals.",
               "name": "out-subtract-model",
               "readonly": false,
               "text": "out-subtract-model",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Which model directions to subtract, if generating residuals. \":\"\nsubtracts all. Can also be specified as \"N\", \"N:M\", \":N\", \"N:\", \"N,M,K\".",
               "name": "out-subtract-dirs",
               "readonly": false,
               "text": "out-subtract-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Export gaintables to CASA caltable format. Tables are exported to same directory as set for cubical databases",
               "name": "out-casa-gaintables",
               "readonly": false,
               "text": "out-casa-gaintables",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Generate summary plots.",
               "name": "out-plots",
               "readonly": false,
               "text": "out-plots",
               "type": "Boolean",
               "value": false
            },
            {
               "description": " If direction-dependent gains are in use and correction is being done, selects direction to correct in. If -1, corrects only for the last direction-independent term. Set to 0 to avoid. ",
               "name": "out-correct-dir",
               "readonly": false,
               "text": "out-correct-dir",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Number of processes",
               "name": "dist-nworker",
               "readonly": false,
               "text": "dist-nworker",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Log memory usage.",
               "name": "log-memory",
               "readonly": false,
               "text": "log-memory",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Disable progress bars and some console output.",
               "name": "log-boring",
               "readonly": false,
               "text": "log-boring",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Append to log file if it exists.",
               "name": "log-append",
               "readonly": false,
               "text": "log-append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Default console output verbosity level. \nCan either be a single number, or a sequence of \"name=level,name=level,...\"\nassignments.",
               "name": "log-verbose",
               "readonly": false,
               "text": "log-verbose",
               "type": "String",
               "value": null
            },
            {
               "description": "Default logfile output verbosity level. \nCan either be a single number, or a sequence of \"name=level,name=level,...\"\nassignments. If None, then this simply follows the console level.",
               "name": "log-file-verbose",
               "readonly": false,
               "text": "log-file-verbose",
               "type": "String",
               "value": null
            },
            {
               "description": "Jumps into pdb on error.",
               "name": "debug-pdb",
               "readonly": false,
               "text": "debug-pdb",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Throw an error if a visibility amplitude in the results exceeds the given value.\nUseful for troubleshooting.",
               "name": "debug-panic-amplitude",
               "readonly": false,
               "text": "debug-panic-amplitude",
               "type": "Float",
               "value": null
            },
            {
               "description": "Invoke pdb before entering the solver.",
               "name": "debug-stop-before-solver",
               "readonly": false,
               "text": "debug-stop-before-solver",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Seed random number generator with explicit seed. Useful for reproducibility\nof the random-based optimizations (sparsification, etc.).",
               "name": "misc-random-seed",
               "readonly": false,
               "text": "misc-random-seed",
               "type": "String",
               "value": null
            },
            {
               "description": "Parset version number, for migration purposes. Can't be specified on command\nline.",
               "name": "misc-parset-version",
               "readonly": false,
               "text": "misc-parset-version",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g-dd-term",
               "readonly": false,
               "text": "g-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g-time-int",
               "readonly": false,
               "text": "g-time-int",
               "type": "Float",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g-freq-int",
               "readonly": false,
               "text": "g-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g-clip-low",
               "readonly": false,
               "text": "g-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g-clip-high",
               "readonly": false,
               "text": "g-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g-clip-after",
               "readonly": false,
               "text": "g-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g-conv-quorum",
               "readonly": false,
               "text": "g-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g-ref-ant",
               "readonly": false,
               "text": "g-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g-solvable",
               "readonly": false,
               "text": "g-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g-type",
               "readonly": false,
               "text": "g-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g-load-from",
               "readonly": false,
               "text": "g-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g-xfer-from",
               "readonly": false,
               "text": "g-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g-save-to",
               "readonly": false,
               "text": "g-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g-fix-dirs",
               "readonly": false,
               "text": "g-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g-update-type",
               "readonly": false,
               "text": "g-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g-max-prior-error",
               "readonly": false,
               "text": "g-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g-max-post-error",
               "readonly": false,
               "text": "g-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g-max-iter",
               "readonly": false,
               "text": "g-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g-prop-flags",
               "readonly": false,
               "text": "g-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g1-dd-term",
               "readonly": false,
               "text": "g1-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g1-time-int",
               "readonly": false,
               "text": "g1-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g1-freq-int",
               "readonly": false,
               "text": "g1-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g1-clip-low",
               "readonly": false,
               "text": "g1-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g1-clip-high",
               "readonly": false,
               "text": "g1-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g1-clip-after",
               "readonly": false,
               "text": "g1-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g1-conv-quorum",
               "readonly": false,
               "text": "g1-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g1-ref-ant",
               "readonly": false,
               "text": "g1-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g1-solvable",
               "readonly": false,
               "text": "g1-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g1-type",
               "readonly": false,
               "text": "g1-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g1-load-from",
               "readonly": false,
               "text": "g1-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g1-xfer-from",
               "readonly": false,
               "text": "g1-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g1-save-to",
               "readonly": false,
               "text": "g1-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g1-fix-dirs",
               "readonly": false,
               "text": "g1-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g1-update-type",
               "readonly": false,
               "text": "g1-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g1-max-prior-error",
               "readonly": false,
               "text": "g1-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g1-max-post-error",
               "readonly": false,
               "text": "g1-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g1-max-iter",
               "readonly": false,
               "text": "g1-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g1-prop-flags",
               "readonly": false,
               "text": "g1-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g2-dd-term",
               "readonly": false,
               "text": "g2-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g2-time-int",
               "readonly": false,
               "text": "g2-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g2-freq-int",
               "readonly": false,
               "text": "g2-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g2-clip-low",
               "readonly": false,
               "text": "g2-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g2-clip-high",
               "readonly": false,
               "text": "g2-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g2-clip-after",
               "readonly": false,
               "text": "g2-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g2-conv-quorum",
               "readonly": false,
               "text": "g2-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g2-ref-ant",
               "readonly": false,
               "text": "g2-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g2-solvable",
               "readonly": false,
               "text": "g2-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g2-type",
               "readonly": false,
               "text": "g2-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g2-load-from",
               "readonly": false,
               "text": "g2-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g2-xfer-from",
               "readonly": false,
               "text": "g2-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g2-save-to",
               "readonly": false,
               "text": "g2-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g2-fix-dirs",
               "readonly": false,
               "text": "g2-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g2-update-type",
               "readonly": false,
               "text": "g2-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g2-max-prior-error",
               "readonly": false,
               "text": "g2-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g2-max-post-error",
               "readonly": false,
               "text": "g2-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g2-max-iter",
               "readonly": false,
               "text": "g2-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g2-prop-flags",
               "readonly": false,
               "text": "g2-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g3-dd-term",
               "readonly": false,
               "text": "g3-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g3-time-int",
               "readonly": false,
               "text": "g3-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g3-freq-int",
               "readonly": false,
               "text": "g3-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g3-clip-low",
               "readonly": false,
               "text": "g3-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g3-clip-high",
               "readonly": false,
               "text": "g3-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g3-clip-after",
               "readonly": false,
               "text": "g3-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g3-conv-quorum",
               "readonly": false,
               "text": "g3-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g3-ref-ant",
               "readonly": false,
               "text": "g3-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g3-solvable",
               "readonly": false,
               "text": "g3-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g3-type",
               "readonly": false,
               "text": "g3-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g3-load-from",
               "readonly": false,
               "text": "g3-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g3-xfer-from",
               "readonly": false,
               "text": "g3-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g3-save-to",
               "readonly": false,
               "text": "g3-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g3-fix-dirs",
               "readonly": false,
               "text": "g3-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g3-update-type",
               "readonly": false,
               "text": "g3-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g3-max-prior-error",
               "readonly": false,
               "text": "g3-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g3-max-post-error",
               "readonly": false,
               "text": "g3-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g3-max-iter",
               "readonly": false,
               "text": "g3-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g3-prop-flags",
               "readonly": false,
               "text": "g3-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b-dd-term",
               "readonly": false,
               "text": "b-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b-time-int",
               "readonly": false,
               "text": "b-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b-freq-int",
               "readonly": false,
               "text": "b-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b-clip-low",
               "readonly": false,
               "text": "b-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b-clip-high",
               "readonly": false,
               "text": "b-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b-clip-after",
               "readonly": false,
               "text": "b-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b-conv-quorum",
               "readonly": false,
               "text": "b-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b-ref-ant",
               "readonly": false,
               "text": "b-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b-solvable",
               "readonly": false,
               "text": "b-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b-type",
               "readonly": false,
               "text": "b-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b-load-from",
               "readonly": false,
               "text": "b-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b-xfer-from",
               "readonly": false,
               "text": "b-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b-save-to",
               "readonly": false,
               "text": "b-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b-fix-dirs",
               "readonly": false,
               "text": "b-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b-update-type",
               "readonly": false,
               "text": "b-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b-max-prior-error",
               "readonly": false,
               "text": "b-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b-max-post-error",
               "readonly": false,
               "text": "b-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b-max-iter",
               "readonly": false,
               "text": "b-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b-prop-flags",
               "readonly": false,
               "text": "b-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b1-dd-term",
               "readonly": false,
               "text": "b1-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b1-time-int",
               "readonly": false,
               "text": "b1-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b1-freq-int",
               "readonly": false,
               "text": "b1-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b1-clip-low",
               "readonly": false,
               "text": "b1-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b1-clip-high",
               "readonly": false,
               "text": "b1-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b1-clip-after",
               "readonly": false,
               "text": "b1-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b1-conv-quorum",
               "readonly": false,
               "text": "b1-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b1-ref-ant",
               "readonly": false,
               "text": "b1-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b1-solvable",
               "readonly": false,
               "text": "b1-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b1-type",
               "readonly": false,
               "text": "b1-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b1-load-from",
               "readonly": false,
               "text": "b1-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b1-xfer-from",
               "readonly": false,
               "text": "b1-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b1-save-to",
               "readonly": false,
               "text": "b1-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b1-fix-dirs",
               "readonly": false,
               "text": "b1-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b1-update-type",
               "readonly": false,
               "text": "b1-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b1-max-prior-error",
               "readonly": false,
               "text": "b1-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b1-max-post-error",
               "readonly": false,
               "text": "b1-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b1-max-iter",
               "readonly": false,
               "text": "b1-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b1-prop-flags",
               "readonly": false,
               "text": "b1-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b2-dd-term",
               "readonly": false,
               "text": "b2-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b2-time-int",
               "readonly": false,
               "text": "b2-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b2-freq-int",
               "readonly": false,
               "text": "b2-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b2-clip-low",
               "readonly": false,
               "text": "b2-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b2-clip-high",
               "readonly": false,
               "text": "b2-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b2-clip-after",
               "readonly": false,
               "text": "b2-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b2-conv-quorum",
               "readonly": false,
               "text": "b2-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b2-ref-ant",
               "readonly": false,
               "text": "b2-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b2-solvable",
               "readonly": false,
               "text": "b2-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b2-type",
               "readonly": false,
               "text": "b2-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b2-load-from",
               "readonly": false,
               "text": "b2-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b2-xfer-from",
               "readonly": false,
               "text": "b2-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b2-save-to",
               "readonly": false,
               "text": "b2-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b2-fix-dirs",
               "readonly": false,
               "text": "b2-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b2-update-type",
               "readonly": false,
               "text": "b2-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b2-max-prior-error",
               "readonly": false,
               "text": "b2-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b2-max-post-error",
               "readonly": false,
               "text": "b2-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b2-max-iter",
               "readonly": false,
               "text": "b2-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b2-prop-flags",
               "readonly": false,
               "text": "b2-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b3-dd-term",
               "readonly": false,
               "text": "b3-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b3-time-int",
               "readonly": false,
               "text": "b3-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b3-freq-int",
               "readonly": false,
               "text": "b3-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b3-clip-low",
               "readonly": false,
               "text": "b3-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b3-clip-high",
               "readonly": false,
               "text": "b3-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b3-clip-after",
               "readonly": false,
               "text": "b3-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b3-conv-quorum",
               "readonly": false,
               "text": "b3-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b3-ref-ant",
               "readonly": false,
               "text": "b3-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b3-solvable",
               "readonly": false,
               "text": "b3-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b3-type",
               "readonly": false,
               "text": "b3-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b3-load-from",
               "readonly": false,
               "text": "b3-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b3-xfer-from",
               "readonly": false,
               "text": "b3-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b3-save-to",
               "readonly": false,
               "text": "b3-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b3-fix-dirs",
               "readonly": false,
               "text": "b3-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b3-update-type",
               "readonly": false,
               "text": "b3-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b3-max-prior-error",
               "readonly": false,
               "text": "b3-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b3-max-post-error",
               "readonly": false,
               "text": "b3-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b3-max-iter",
               "readonly": false,
               "text": "b3-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b3-prop-flags",
               "readonly": false,
               "text": "b3-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "dd-dd-term",
               "readonly": false,
               "text": "dd-dd-term",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd-time-int",
               "readonly": false,
               "text": "dd-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd-freq-int",
               "readonly": false,
               "text": "dd-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd-clip-low",
               "readonly": false,
               "text": "dd-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd-clip-high",
               "readonly": false,
               "text": "dd-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd-clip-after",
               "readonly": false,
               "text": "dd-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd-conv-quorum",
               "readonly": false,
               "text": "dd-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd-ref-ant",
               "readonly": false,
               "text": "dd-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd-solvable",
               "readonly": false,
               "text": "dd-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd-type",
               "readonly": false,
               "text": "dd-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd-load-from",
               "readonly": false,
               "text": "dd-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd-xfer-from",
               "readonly": false,
               "text": "dd-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd-save-to",
               "readonly": false,
               "text": "dd-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd-fix-dirs",
               "readonly": false,
               "text": "dd-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd-update-type",
               "readonly": false,
               "text": "dd-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd-max-prior-error",
               "readonly": false,
               "text": "dd-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd-max-post-error",
               "readonly": false,
               "text": "dd-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd-max-iter",
               "readonly": false,
               "text": "dd-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd-prop-flags",
               "readonly": false,
               "text": "dd-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd1-time-int",
               "readonly": false,
               "text": "dd1-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd1-freq-int",
               "readonly": false,
               "text": "dd1-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd1-clip-low",
               "readonly": false,
               "text": "dd1-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd1-clip-high",
               "readonly": false,
               "text": "dd1-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd1-clip-after",
               "readonly": false,
               "text": "dd1-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd1-conv-quorum",
               "readonly": false,
               "text": "dd1-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd1-ref-ant",
               "readonly": false,
               "text": "dd1-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd1-solvable",
               "readonly": false,
               "text": "dd1-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd1-type",
               "readonly": false,
               "text": "dd1-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd1-load-from",
               "readonly": false,
               "text": "dd1-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd1-xfer-from",
               "readonly": false,
               "text": "dd1-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd1-save-to",
               "readonly": false,
               "text": "dd1-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd1-fix-dirs",
               "readonly": false,
               "text": "dd1-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd1-update-type",
               "readonly": false,
               "text": "dd1-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd1-max-prior-error",
               "readonly": false,
               "text": "dd1-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd1-max-post-error",
               "readonly": false,
               "text": "dd1-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd1-max-iter",
               "readonly": false,
               "text": "dd1-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd1-prop-flags",
               "readonly": false,
               "text": "dd1-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd2-time-int",
               "readonly": false,
               "text": "dd2-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd2-freq-int",
               "readonly": false,
               "text": "dd2-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd2-clip-low",
               "readonly": false,
               "text": "dd2-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd2-clip-high",
               "readonly": false,
               "text": "dd2-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd2-clip-after",
               "readonly": false,
               "text": "dd2-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd2-conv-quorum",
               "readonly": false,
               "text": "dd2-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd2-ref-ant",
               "readonly": false,
               "text": "dd2-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd2-solvable",
               "readonly": false,
               "text": "dd2-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd2-type",
               "readonly": false,
               "text": "dd2-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd2-load-from",
               "readonly": false,
               "text": "dd2-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd2-xfer-from",
               "readonly": false,
               "text": "dd2-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd2-save-to",
               "readonly": false,
               "text": "dd2-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd2-fix-dirs",
               "readonly": false,
               "text": "dd2-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd2-update-type",
               "readonly": false,
               "text": "dd2-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd2-max-prior-error",
               "readonly": false,
               "text": "dd2-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd2-max-post-error",
               "readonly": false,
               "text": "dd2-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd2-max-iter",
               "readonly": false,
               "text": "dd2-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd2-prop-flags",
               "readonly": false,
               "text": "dd2-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd3-time-int",
               "readonly": false,
               "text": "dd3-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd3-freq-int",
               "readonly": false,
               "text": "dd3-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd3-clip-low",
               "readonly": false,
               "text": "dd3-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd3-clip-high",
               "readonly": false,
               "text": "dd3-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd3-clip-after",
               "readonly": false,
               "text": "dd3-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd3-conv-quorum",
               "readonly": false,
               "text": "dd3-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd3-ref-ant",
               "readonly": false,
               "text": "dd3-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd3-solvable",
               "readonly": false,
               "text": "dd3-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd3-type",
               "readonly": false,
               "text": "dd3-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd3-load-from",
               "readonly": false,
               "text": "dd3-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd3-xfer-from",
               "readonly": false,
               "text": "dd3-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd3-save-to",
               "readonly": false,
               "text": "dd3-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd3-fix-dirs",
               "readonly": false,
               "text": "dd3-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd3-update-type",
               "readonly": false,
               "text": "dd3-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd3-max-prior-error",
               "readonly": false,
               "text": "dd3-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd3-max-post-error",
               "readonly": false,
               "text": "dd3-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd3-max-iter",
               "readonly": false,
               "text": "dd3-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd3-prop-flags",
               "readonly": false,
               "text": "dd3-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Default console output verbosity level",
               "name": "log-verbose",
               "readonly": false,
               "text": "log-verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Oversampling factor.",
               "name": "degridding-OverS",
               "readonly": false,
               "text": "degridding-OverS",
               "type": "Integer",
               "value": null
            },
            {
               "description": "CF support size.",
               "name": "degridding-Support",
               "readonly": false,
               "text": "degridding-Support",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Number of w-planes.",
               "name": "degridding-Nw",
               "readonly": false,
               "text": "degridding-Nw",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Maximum w coordinate (meters). Visibilities with larger w will not be gridded. If 0, no maximum is imposed.",
               "name": "degridding-wmax",
               "readonly": false,
               "text": "degridding-wmax",
               "type": "Float",
               "value": null
            },
            {
               "description": "Facet padding factor.",
               "name": "degridding-Padding",
               "readonly": false,
               "text": "degridding-Padding",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of image bands for degridding. 0 means degrid each channel.",
               "name": "degridding-NDegridBand",
               "readonly": false,
               "text": "degridding-NDegridBand",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Maximum facet size in degrees",
               "name": "degridding-MaxFacetSize",
               "readonly": false,
               "text": "degridding-MaxFacetSize",
               "type": "Float",
               "value": null
            },
            {
               "description": "Minimum number of facets per direction",
               "name": "degridding-MinNFacetPerAxis",
               "readonly": false,
               "text": "degridding-MinNFacetPerAxis",
               "type": "Integer",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "cubical",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "CubiCal is a suite of fast radio interferometric calibration routines exploiting complex optimisation.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "CubiCal is a suite of fast radio interferometric calibration routines exploiting complex optimisation.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/cubicalddf:1.4.5"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " gocubical"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of measurement set (MS)",
               "name": "data-ms",
               "readonly": false,
               "text": "data-ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of MS column to read for data.",
               "name": "data-column",
               "readonly": false,
               "text": "data-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Chunk data up by this number of timeslots. This limits the amount of data\nprocessed at once. Smaller chunks allow for a smaller RAM footprint and\ngreater parallelism, but this sets an upper limit on the solution intervals\nthat may be employed. 0 means use full time axis.",
               "name": "data-time-chunk",
               "readonly": false,
               "text": "data-time-chunk",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Chunk data by this number of channels. See time-chunk for info.\n0 means full frequency axis.",
               "name": "data-freq-chunk",
               "readonly": false,
               "text": "data-freq-chunk",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If set, then time chunks will be broken up whenever the value in the named\ncolumn(s) jumps by >JUMPSIZE. Multiple column names may be given, separated\nby commas. Use None to disable.",
               "name": "data-chunk-by",
               "readonly": false,
               "text": "data-chunk-by",
               "type": "String",
               "value": null
            },
            {
               "description": "The jump size used in conjunction with chunk-by. If 0, then any change in\nvalue is a jump. If n, then the change must be >n.",
               "name": "data-chunk-by-jump",
               "readonly": false,
               "text": "data-chunk-by-jump",
               "type": "Float",
               "value": null
            },
            {
               "description": "If set, processes just one chunk of data matching the chunk ID. Useful for\ndebugging.",
               "name": "data-single-chunk",
               "readonly": false,
               "text": "data-single-chunk",
               "type": "String",
               "value": null
            },
            {
               "description": "FIELD_ID to read from the MS.",
               "name": "sel-field",
               "readonly": false,
               "text": "sel-field",
               "type": "Integer",
               "value": null
            },
            {
               "description": "DATA_DESC_IDs to read from the MS. Default reads all. Can be specified as\ne.g. \"5\", \"5,6,7\", \"5~7\" (inclusive range), \"5:8\" (exclusive range),\n\"5:\" (from 5 to last).",
               "name": "sel-ddid",
               "readonly": false,
               "text": "sel-ddid",
               "type": "String",
               "value": null
            },
            {
               "description": "Additional TaQL selection string. Combined with other selection options.",
               "name": "sel-taql",
               "readonly": false,
               "text": "sel-taql",
               "type": "String",
               "value": null
            },
            {
               "description": "Channels to read (within each DDID). Default reads all. Can be specified as\ne.g. \"5\", \"10~20\" (10 to 20 inclusive), \"10:21\" (same), \"10:\" (from 10 to\nend), \":10\" (0 to 9 inclusive), \"~9\" (same).",
               "name": "sel-chan",
               "readonly": false,
               "text": "sel-chan",
               "type": "String",
               "value": null
            },
            {
               "description": "Predict model visibilities from given LSM (using Montblanc). Expects pattern of the style source(+-?source)*(:source(+-?source)*)* where source at present can be a column name, lsm or DDFacet DicoModel. Colons split directions as specifiable as 0-indexed indicies through the gain directions and fix directions switches. If an lsm file is spcified a tagged selection of sources can be picked by appending a @[user tag] option. If a DicoModel is used regions can be extracted from the model components through a @[DS9 polygon regions file].",
               "name": "model-list",
               "readonly": false,
               "text": "model-list",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable direction-dependent models. If 'auto', this is determined\nby --sol-jones and --model-list, otherwise, enable/disable\nexplicitly.",
               "name": "model-ddes",
               "readonly": false,
               "text": "model-ddes",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Apply beams if specified eg. 'beam_$(corr)_$(reim).fits' or\n'beam_$(CORR)_$(REIM).fits'",
               "name": "model-beam-pattern",
               "readonly": false,
               "text": "model-beam-pattern",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam l axis",
               "name": "model-beam-l-axis",
               "readonly": false,
               "text": "model-beam-l-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam m axis",
               "name": "model-beam-m-axis",
               "readonly": false,
               "text": "model-beam-m-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "Use CPU or GPU for simulation.",
               "name": "montblanc-device-type",
               "readonly": false,
               "text": "montblanc-device-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Precision for simulation.",
               "name": "montblanc-dtype",
               "readonly": false,
               "text": "montblanc-dtype",
               "type": "String",
               "value": null
            },
            {
               "description": "Simulate using linear or circular feeds.",
               "name": "montblanc-feed-type",
               "readonly": false,
               "text": "montblanc-feed-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Memory budget in MB for simulation.",
               "name": "montblanc-mem-budget",
               "readonly": false,
               "text": "montblanc-mem-budget",
               "type": "Integer",
               "value": null
            },
            {
               "description": "verbosity level of Montblanc's console output",
               "name": "montblanc-verbosity",
               "readonly": false,
               "text": "montblanc-verbosity",
               "type": "String",
               "value": null
            },
            {
               "description": "Column to read weights from. Weights are applied by default. Specify an\nempty string to disable.",
               "name": "weight-column",
               "readonly": false,
               "text": "weight-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Which flagsets will be applied prior to calibration. \nUse \"-FLAGSET\" to apply everything except the named flagset (\"-cubical\" is\nuseful, to ignore the flags of a previous CubiCal run).",
               "name": "flags-apply",
               "readonly": false,
               "text": "flags-apply",
               "type": "String",
               "value": null
            },
            {
               "description": "Insert BITFLAG column if it is missing, and initialize a named flagset\nfrom FLAG/FLAG_ROW.",
               "name": "flags-auto-init",
               "readonly": false,
               "text": "flags-auto-init",
               "type": "String",
               "value": null
            },
            {
               "description": "Save flags to named flagset in BITFLAG. If none or 0, will not save.",
               "name": "flags-save",
               "readonly": false,
               "text": "flags-save",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, reninitializes BITFLAG column from scratch. Useful if you ended up\nwith a dead one.",
               "name": "flags-reinit-bitflags",
               "readonly": false,
               "text": "flags-reinit-bitflags",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If True, will do an extra round of flagging at the end  (post-solution)\nbased on solutions statistics, as per the following options.",
               "name": "flags-post-sol",
               "readonly": false,
               "text": "flags-post-sol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Intervals with chi-squared values larger than this value times the median\nwill be flagged.",
               "name": "flags-tf-chisq-median",
               "readonly": false,
               "text": "flags-tf-chisq-median",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities per time/frequncy slot\nrequired to prevent flagging.",
               "name": "flags-tf-np-median",
               "readonly": false,
               "text": "flags-tf-np-median",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities along the time axis required\nto prevent flagging.",
               "name": "flags-time-density",
               "readonly": false,
               "text": "flags-time-density",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities along the frequency axis\nrequired to prevent flagging.",
               "name": "flags-chan-density",
               "readonly": false,
               "text": "flags-chan-density",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum percentage of unflagged visibilities along the DDID axis\nrequired to prevent flagging.",
               "name": "flags-ddid-density",
               "readonly": false,
               "text": "flags-ddid-density",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable Mad Max flagging in the solver. This computes the median absolute residual (i.e. median absolute deviation from zero), and flags visibilities exceeding the thresholds",
               "name": "madmax-enable",
               "readonly": false,
               "text": "madmax-enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "MAD estimation mode. Use 'corr' for a separate estimate per each baseline and correlation. Otherwise, a single estimate per baseline is computed using 'all' correlations, or only the 'diag' or 'offdiag' correlations.",
               "name": "madmax-estimate",
               "readonly": false,
               "text": "madmax-estimate",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable plots for Mad Max flagging. Use 'show' to show figures interactively. Plots will show the worst flagged baseline, and a median flagged baseline, provided the fraction of flagged visibilities is above --flags-mad-plot-thr.",
               "name": "madmax-plot",
               "readonly": false,
               "text": "madmax-plot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Threshold (in terms of fraction of visibilities flagged) above which plots will be generated.",
               "name": "madmax-plot-frac-above",
               "readonly": false,
               "text": "madmax-plot-frac-above",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag on on-diagonal (parallel-hand) residuals",
               "name": "madmax-diag",
               "readonly": false,
               "text": "madmax-diag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag on off-diagonal (cross-hand) residuals",
               "name": "madmax-offdiag",
               "readonly": false,
               "text": "madmax-offdiag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Threshold for global median MAD (MMAD) flagging. MMAD is computed as the median of the per-baseline MADs. Residuals exceeding S*MMAD/1.428 will be flagged. Can be specified",
               "name": "madmax-global-threshold",
               "readonly": false,
               "text": "madmax-global-threshold",
               "type": "String",
               "value": null
            },
            {
               "description": "Threshold for MAD flagging per baseline (specified in sigmas). Residuals exceeding mad-thr*MAD/1.428 will be flagged. MAD is computed per baseline. This can be specified as a list e.g. N1,N2,N3,... The first value is used to flag residuals before a solution starts (use 0 to disable), the next value is used when the residuals are first recomputed during the solution several iteratins later (see -chi-int), etc. A final pass may be done at the end of the solution. The last value in the list is reused if necessary. Using a list with gradually decreasing values may be sensible. #metavar:SIGMAS",
               "name": "madmax-threshold",
               "readonly": false,
               "text": "madmax-threshold",
               "type": "String",
               "value": null
            },
            {
               "description": "Comma-separated list of Jones terms to enable, e.g. \"G,B,dE\"\n(default: G)",
               "name": "sol-jones",
               "readonly": false,
               "text": "sol-jones",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, then data, model and gains are taken to be diagonal. Off-diagonal terms in data and model are ignored. This option is then enforced on all Jones terms.",
               "name": "sel-diag",
               "readonly": false,
               "text": "sel-diag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "if true, then data, model and gains are taken to be diagonal. off-diagonal terms in data and model are ignored. this option is then enforced on all jones terms.",
               "name": "g-diag-only",
               "readonly": false,
               "text": "g-diag-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If true, then data, model and gains are taken to be diagonal. Off-diagonal terms in data and model are ignored. This option is then enforced on all Jones terms.",
               "name": "dd-diag-only",
               "readonly": false,
               "text": "dd-diag-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Solve in single or double precision",
               "name": "sol-precision",
               "readonly": false,
               "text": "sol-precision",
               "type": "String",
               "value": null
            },
            {
               "description": "Theshold for gain accuracy - gains which improve by less than this value\nare considered converged.",
               "name": "sol-delta-g",
               "readonly": false,
               "text": "sol-delta-g",
               "type": "String",
               "value": null
            },
            {
               "description": "Theshold for solution stagnancy - if the chi-squared is improving by less\nthan this value, the gain is considered stalled.",
               "name": "sol-delta-chi",
               "readonly": false,
               "text": "sol-delta-chi",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of iterations to perform between chi-suqared checks. This is done to\navoid computing the expensive chi-squared test evey iteration.",
               "name": "sol-chi-int",
               "readonly": false,
               "text": "sol-chi-int",
               "type": "String",
               "value": null
            },
            {
               "description": "Re-estimate chi-squred and noise at the end of a solution cycle. Disabling\nlast rites can save a bit of time, but makes the post-solution stats less\ninformative.",
               "name": "sol-last-rites",
               "readonly": false,
               "text": "sol-last-rites",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum percentage of solutions which must have stalled before terminating\nthe solver.",
               "name": "sol-stall-quorum",
               "readonly": false,
               "text": "sol-stall-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations per Jones term. If empty, then each Jones\nterm is solved for once, up to convergence, or up to its -max-iter\nsetting.\nOtherwise, set to a list giving the number of iterations per Jones term.\nFor example, given two Jones terms and --sol-num-iter 10,20,10, it will\ndo 10 iterations on the first term, 20 on the second, and 10 again on the\nfirst.",
               "name": "sol-term-iters",
               "readonly": false,
               "text": "sol-term-iters",
               "type": "dtype",
               "value": [
                  50
               ]
            },
            {
               "description": "Min baseline length to solve for",
               "name": "sol-min-bl",
               "readonly": false,
               "text": "sol-min-bl",
               "type": "Float",
               "value": null
            },
            {
               "description": "Max baseline length to solve for. If 0, no maximum is applied.",
               "name": "sol-max-bl",
               "readonly": false,
               "text": "sol-max-bl",
               "type": "Float",
               "value": null
            },
            {
               "description": "Additional subset of data to actually solve for. Any TaQL string may be\nused.",
               "name": "sol-subset",
               "readonly": false,
               "text": "sol-subset",
               "type": "String",
               "value": null
            },
            {
               "description": "Load and apply BBCs computed in a previous run. Apply with care! This will\ntend to suppress all unmodelled flux towards the centre of the field.",
               "name": "bbc-load-from",
               "readonly": false,
               "text": "bbc-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Compute full 2x2 BBCs (as opposed to diagonal-only). Only useful if you\nreally trust the polarisation information in your sky model.",
               "name": "bbc-compute-2x2",
               "readonly": false,
               "text": "bbc-compute-2x2",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply full 2x2 BBCs (as opposed to diagonal-only). Only enable this if you\nreally trust the polarisation information in your sky model.",
               "name": "bbc-apply-2x2",
               "readonly": false,
               "text": "bbc-apply-2x2",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Compute suggested BBCs at end of run,\nand save them to the given database. It can be useful to have this always\nenabled, since the BBCs provide useful diagnostics of the solution quality\n(and are not actually applied without a load-from setting).",
               "name": "bbc-save-to",
               "readonly": false,
               "text": "bbc-save-to",
               "type": "String",
               "value": "{out[name]}-BBC-field_{sel[field]}-ddid_{sel[ddid]}.parmdb"
            },
            {
               "description": "Compute BBCs per-channel (else across entire band).",
               "name": "bbc-per-chan",
               "readonly": false,
               "text": "bbc-per-chan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Generate output BBC plots.",
               "name": "bbc-plot",
               "readonly": false,
               "text": "bbc-plot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of CPUs (processes) to use (0 or 1 disables parallelism).",
               "name": "dist-ncpu",
               "readonly": false,
               "text": "dist-ncpu",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Maximum number of time/freq data-chunks to load into memory simultaneously. If 0, then as many as possible will be loaded.",
               "name": "dist-max-chunks",
               "readonly": false,
               "text": "dist-max-chunks",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Number of OMP threads to use. 0: determine automatically.",
               "name": "dist-nthread",
               "readonly": false,
               "text": "dist-nthread",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If empty or None, processes will not be pinned to cores. Otherwise, set to the starting core number, or 'N:K' to start with N and step by K",
               "name": "dist-pin",
               "readonly": false,
               "text": "dist-pin",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If not 0, pins the I/O & Montblanc process to a separate core, or cores if --montblanc-threads is specified). Ignored if --dist-pin is not set",
               "name": "dist-pin-io",
               "readonly": false,
               "text": "dist-pin-io",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set, pins the main process to a separate core. If set to, pins it to the same core as the I/O process, if I/O process is pinned. Ignored if --dist-pin is not set",
               "name": "pin-main",
               "readonly": false,
               "text": "pin-main",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum number of time/freq data-chunks to load into memory\nsimultaneously. This number should be divisible by ncpu-1 for optimal\nperformance.",
               "name": "dist-min-chunks",
               "readonly": false,
               "text": "dist-min-chunks",
               "type": "String",
               "value": null
            },
            {
               "description": "Base name of output files.",
               "name": "out-name",
               "readonly": false,
               "text": "out-name",
               "type": "String",
               "value": null
            },
            {
               "description": "Allow overwriting of existing output files. If this is set, and the output parset file exists, will raise an exception",
               "name": "out-overwrite",
               "readonly": false,
               "text": "out-overwrite",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Operational mode.\n[so] solve only;\n[sc] solve and generate corrected visibilities;\n[sr] solve and generate corrected residuals;\n[ss] solve and generate uncorrected residuals;\n[ac] apply solutions, generate corrected visibilities;\n[ar] apply solutions, generate corrected residuals;\n[as] apply solutions, generate uncorrected residuals;",
               "name": "out-mode",
               "readonly": false,
               "text": "out-mode",
               "type": "String",
               "value": null
            },
            {
               "description": "Output MS column name (if applicable).",
               "name": "out-column",
               "readonly": false,
               "text": "out-column",
               "type": "String",
               "value": null
            },
            {
               "description": "If set, model visibilities will be written to the specified column.",
               "name": "out-model-column",
               "readonly": false,
               "text": "out-model-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Reinitialize output MS column. Useful if the column is in a half-filled\nor corrupt state.",
               "name": "out-reinit-column",
               "readonly": false,
               "text": "out-reinit-column",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Which model to subtract, if generating residuals.",
               "name": "out-subtract-model",
               "readonly": false,
               "text": "out-subtract-model",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Which model directions to subtract, if generating residuals. \":\"\nsubtracts all. Can also be specified as \"N\", \"N:M\", \":N\", \"N:\", \"N,M,K\".",
               "name": "out-subtract-dirs",
               "readonly": false,
               "text": "out-subtract-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Export gaintables to CASA caltable format. Tables are exported to same directory as set for cubical databases",
               "name": "out-casa-gaintables",
               "readonly": false,
               "text": "out-casa-gaintables",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Generate summary plots.",
               "name": "out-plots",
               "readonly": false,
               "text": "out-plots",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Number of processes",
               "name": "dist-nworker",
               "readonly": false,
               "text": "dist-nworker",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Log memory usage.",
               "name": "log-memory",
               "readonly": false,
               "text": "log-memory",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Disable progress bars and some console output.",
               "name": "log-boring",
               "readonly": false,
               "text": "log-boring",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Append to log file if it exists.",
               "name": "log-append",
               "readonly": false,
               "text": "log-append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Default console output verbosity level. \nCan either be a single number, or a sequence of \"name=level,name=level,...\"\nassignments.",
               "name": "log-verbose",
               "readonly": false,
               "text": "log-verbose",
               "type": "String",
               "value": null
            },
            {
               "description": "Default logfile output verbosity level. \nCan either be a single number, or a sequence of \"name=level,name=level,...\"\nassignments. If None, then this simply follows the console level.",
               "name": "log-file-verbose",
               "readonly": false,
               "text": "log-file-verbose",
               "type": "String",
               "value": null
            },
            {
               "description": "Jumps into pdb on error.",
               "name": "debug-pdb",
               "readonly": false,
               "text": "debug-pdb",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Throw an error if a visibility amplitude in the results exceeds the given value.\nUseful for troubleshooting.",
               "name": "debug-panic-amplitude",
               "readonly": false,
               "text": "debug-panic-amplitude",
               "type": "Float",
               "value": null
            },
            {
               "description": "Invoke pdb before entering the solver.",
               "name": "debug-stop-before-solver",
               "readonly": false,
               "text": "debug-stop-before-solver",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Seed random number generator with explicit seed. Useful for reproducibility\nof the random-based optimizations (sparsification, etc.).",
               "name": "misc-random-seed",
               "readonly": false,
               "text": "misc-random-seed",
               "type": "String",
               "value": null
            },
            {
               "description": "Parset version number, for migration purposes. Can't be specified on command\nline.",
               "name": "misc-parset-version",
               "readonly": false,
               "text": "misc-parset-version",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g-dd-term",
               "readonly": false,
               "text": "g-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g-time-int",
               "readonly": false,
               "text": "g-time-int",
               "type": "Float",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g-freq-int",
               "readonly": false,
               "text": "g-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g-clip-low",
               "readonly": false,
               "text": "g-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g-clip-high",
               "readonly": false,
               "text": "g-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g-clip-after",
               "readonly": false,
               "text": "g-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g-conv-quorum",
               "readonly": false,
               "text": "g-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g-ref-ant",
               "readonly": false,
               "text": "g-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g-solvable",
               "readonly": false,
               "text": "g-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g-type",
               "readonly": false,
               "text": "g-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g-load-from",
               "readonly": false,
               "text": "g-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g-xfer-from",
               "readonly": false,
               "text": "g-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g-save-to",
               "readonly": false,
               "text": "g-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g-fix-dirs",
               "readonly": false,
               "text": "g-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g-update-type",
               "readonly": false,
               "text": "g-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g-max-prior-error",
               "readonly": false,
               "text": "g-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g-max-post-error",
               "readonly": false,
               "text": "g-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g-max-iter",
               "readonly": false,
               "text": "g-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g-prop-flags",
               "readonly": false,
               "text": "g-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g1-dd-term",
               "readonly": false,
               "text": "g1-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g1-time-int",
               "readonly": false,
               "text": "g1-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g1-freq-int",
               "readonly": false,
               "text": "g1-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g1-clip-low",
               "readonly": false,
               "text": "g1-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g1-clip-high",
               "readonly": false,
               "text": "g1-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g1-clip-after",
               "readonly": false,
               "text": "g1-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g1-conv-quorum",
               "readonly": false,
               "text": "g1-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g1-ref-ant",
               "readonly": false,
               "text": "g1-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g1-solvable",
               "readonly": false,
               "text": "g1-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g1-type",
               "readonly": false,
               "text": "g1-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g1-load-from",
               "readonly": false,
               "text": "g1-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g1-xfer-from",
               "readonly": false,
               "text": "g1-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g1-save-to",
               "readonly": false,
               "text": "g1-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g1-fix-dirs",
               "readonly": false,
               "text": "g1-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g1-update-type",
               "readonly": false,
               "text": "g1-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g1-max-prior-error",
               "readonly": false,
               "text": "g1-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g1-max-post-error",
               "readonly": false,
               "text": "g1-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g1-max-iter",
               "readonly": false,
               "text": "g1-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g1-prop-flags",
               "readonly": false,
               "text": "g1-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g2-dd-term",
               "readonly": false,
               "text": "g2-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g2-time-int",
               "readonly": false,
               "text": "g2-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g2-freq-int",
               "readonly": false,
               "text": "g2-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g2-clip-low",
               "readonly": false,
               "text": "g2-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g2-clip-high",
               "readonly": false,
               "text": "g2-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g2-clip-after",
               "readonly": false,
               "text": "g2-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g2-conv-quorum",
               "readonly": false,
               "text": "g2-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g2-ref-ant",
               "readonly": false,
               "text": "g2-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g2-solvable",
               "readonly": false,
               "text": "g2-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g2-type",
               "readonly": false,
               "text": "g2-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g2-load-from",
               "readonly": false,
               "text": "g2-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g2-xfer-from",
               "readonly": false,
               "text": "g2-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g2-save-to",
               "readonly": false,
               "text": "g2-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g2-fix-dirs",
               "readonly": false,
               "text": "g2-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g2-update-type",
               "readonly": false,
               "text": "g2-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g2-max-prior-error",
               "readonly": false,
               "text": "g2-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g2-max-post-error",
               "readonly": false,
               "text": "g2-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g2-max-iter",
               "readonly": false,
               "text": "g2-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g2-prop-flags",
               "readonly": false,
               "text": "g2-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "g3-dd-term",
               "readonly": false,
               "text": "g3-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "g3-time-int",
               "readonly": false,
               "text": "g3-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "g3-freq-int",
               "readonly": false,
               "text": "g3-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "g3-clip-low",
               "readonly": false,
               "text": "g3-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "g3-clip-high",
               "readonly": false,
               "text": "g3-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "g3-clip-after",
               "readonly": false,
               "text": "g3-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "g3-conv-quorum",
               "readonly": false,
               "text": "g3-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "g3-ref-ant",
               "readonly": false,
               "text": "g3-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "g3-solvable",
               "readonly": false,
               "text": "g3-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "g3-type",
               "readonly": false,
               "text": "g3-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "g3-load-from",
               "readonly": false,
               "text": "g3-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "g3-xfer-from",
               "readonly": false,
               "text": "g3-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "g3-save-to",
               "readonly": false,
               "text": "g3-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "g3-fix-dirs",
               "readonly": false,
               "text": "g3-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "g3-update-type",
               "readonly": false,
               "text": "g3-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "g3-max-prior-error",
               "readonly": false,
               "text": "g3-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "g3-max-post-error",
               "readonly": false,
               "text": "g3-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "g3-max-iter",
               "readonly": false,
               "text": "g3-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "g3-prop-flags",
               "readonly": false,
               "text": "g3-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b-dd-term",
               "readonly": false,
               "text": "b-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b-time-int",
               "readonly": false,
               "text": "b-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b-freq-int",
               "readonly": false,
               "text": "b-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b-clip-low",
               "readonly": false,
               "text": "b-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b-clip-high",
               "readonly": false,
               "text": "b-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b-clip-after",
               "readonly": false,
               "text": "b-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b-conv-quorum",
               "readonly": false,
               "text": "b-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b-ref-ant",
               "readonly": false,
               "text": "b-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b-solvable",
               "readonly": false,
               "text": "b-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b-type",
               "readonly": false,
               "text": "b-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b-load-from",
               "readonly": false,
               "text": "b-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b-xfer-from",
               "readonly": false,
               "text": "b-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b-save-to",
               "readonly": false,
               "text": "b-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b-fix-dirs",
               "readonly": false,
               "text": "b-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b-update-type",
               "readonly": false,
               "text": "b-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b-max-prior-error",
               "readonly": false,
               "text": "b-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b-max-post-error",
               "readonly": false,
               "text": "b-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b-max-iter",
               "readonly": false,
               "text": "b-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b-prop-flags",
               "readonly": false,
               "text": "b-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b1-dd-term",
               "readonly": false,
               "text": "b1-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b1-time-int",
               "readonly": false,
               "text": "b1-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b1-freq-int",
               "readonly": false,
               "text": "b1-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b1-clip-low",
               "readonly": false,
               "text": "b1-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b1-clip-high",
               "readonly": false,
               "text": "b1-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b1-clip-after",
               "readonly": false,
               "text": "b1-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b1-conv-quorum",
               "readonly": false,
               "text": "b1-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b1-ref-ant",
               "readonly": false,
               "text": "b1-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b1-solvable",
               "readonly": false,
               "text": "b1-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b1-type",
               "readonly": false,
               "text": "b1-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b1-load-from",
               "readonly": false,
               "text": "b1-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b1-xfer-from",
               "readonly": false,
               "text": "b1-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b1-save-to",
               "readonly": false,
               "text": "b1-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b1-fix-dirs",
               "readonly": false,
               "text": "b1-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b1-update-type",
               "readonly": false,
               "text": "b1-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b1-max-prior-error",
               "readonly": false,
               "text": "b1-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b1-max-post-error",
               "readonly": false,
               "text": "b1-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b1-max-iter",
               "readonly": false,
               "text": "b1-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b1-prop-flags",
               "readonly": false,
               "text": "b1-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b2-dd-term",
               "readonly": false,
               "text": "b2-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b2-time-int",
               "readonly": false,
               "text": "b2-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b2-freq-int",
               "readonly": false,
               "text": "b2-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b2-clip-low",
               "readonly": false,
               "text": "b2-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b2-clip-high",
               "readonly": false,
               "text": "b2-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b2-clip-after",
               "readonly": false,
               "text": "b2-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b2-conv-quorum",
               "readonly": false,
               "text": "b2-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b2-ref-ant",
               "readonly": false,
               "text": "b2-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b2-solvable",
               "readonly": false,
               "text": "b2-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b2-type",
               "readonly": false,
               "text": "b2-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b2-load-from",
               "readonly": false,
               "text": "b2-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b2-xfer-from",
               "readonly": false,
               "text": "b2-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b2-save-to",
               "readonly": false,
               "text": "b2-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b2-fix-dirs",
               "readonly": false,
               "text": "b2-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b2-update-type",
               "readonly": false,
               "text": "b2-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b2-max-prior-error",
               "readonly": false,
               "text": "b2-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b2-max-post-error",
               "readonly": false,
               "text": "b2-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b2-max-iter",
               "readonly": false,
               "text": "b2-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b2-prop-flags",
               "readonly": false,
               "text": "b2-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "b3-dd-term",
               "readonly": false,
               "text": "b3-dd-term",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "b3-time-int",
               "readonly": false,
               "text": "b3-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "b3-freq-int",
               "readonly": false,
               "text": "b3-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "b3-clip-low",
               "readonly": false,
               "text": "b3-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "b3-clip-high",
               "readonly": false,
               "text": "b3-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "b3-clip-after",
               "readonly": false,
               "text": "b3-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "b3-conv-quorum",
               "readonly": false,
               "text": "b3-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "b3-ref-ant",
               "readonly": false,
               "text": "b3-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "b3-solvable",
               "readonly": false,
               "text": "b3-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "b3-type",
               "readonly": false,
               "text": "b3-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "b3-load-from",
               "readonly": false,
               "text": "b3-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "b3-xfer-from",
               "readonly": false,
               "text": "b3-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "b3-save-to",
               "readonly": false,
               "text": "b3-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "b3-fix-dirs",
               "readonly": false,
               "text": "b3-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "b3-update-type",
               "readonly": false,
               "text": "b3-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "b3-max-prior-error",
               "readonly": false,
               "text": "b3-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "b3-max-post-error",
               "readonly": false,
               "text": "b3-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "b3-max-iter",
               "readonly": false,
               "text": "b3-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "b3-prop-flags",
               "readonly": false,
               "text": "b3-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines whether this term is direction dependent. --model-ddes must",
               "name": "dd-dd-term",
               "readonly": false,
               "text": "dd-dd-term",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd-time-int",
               "readonly": false,
               "text": "dd-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd-freq-int",
               "readonly": false,
               "text": "dd-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd-clip-low",
               "readonly": false,
               "text": "dd-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd-clip-high",
               "readonly": false,
               "text": "dd-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd-clip-after",
               "readonly": false,
               "text": "dd-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd-conv-quorum",
               "readonly": false,
               "text": "dd-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd-ref-ant",
               "readonly": false,
               "text": "dd-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd-solvable",
               "readonly": false,
               "text": "dd-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd-type",
               "readonly": false,
               "text": "dd-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd-load-from",
               "readonly": false,
               "text": "dd-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd-xfer-from",
               "readonly": false,
               "text": "dd-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd-save-to",
               "readonly": false,
               "text": "dd-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd-fix-dirs",
               "readonly": false,
               "text": "dd-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd-update-type",
               "readonly": false,
               "text": "dd-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd-max-prior-error",
               "readonly": false,
               "text": "dd-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd-max-post-error",
               "readonly": false,
               "text": "dd-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd-max-iter",
               "readonly": false,
               "text": "dd-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd-prop-flags",
               "readonly": false,
               "text": "dd-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd1-time-int",
               "readonly": false,
               "text": "dd1-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd1-freq-int",
               "readonly": false,
               "text": "dd1-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd1-clip-low",
               "readonly": false,
               "text": "dd1-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd1-clip-high",
               "readonly": false,
               "text": "dd1-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd1-clip-after",
               "readonly": false,
               "text": "dd1-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd1-conv-quorum",
               "readonly": false,
               "text": "dd1-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd1-ref-ant",
               "readonly": false,
               "text": "dd1-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd1-solvable",
               "readonly": false,
               "text": "dd1-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd1-type",
               "readonly": false,
               "text": "dd1-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd1-load-from",
               "readonly": false,
               "text": "dd1-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd1-xfer-from",
               "readonly": false,
               "text": "dd1-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd1-save-to",
               "readonly": false,
               "text": "dd1-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd1-fix-dirs",
               "readonly": false,
               "text": "dd1-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd1-update-type",
               "readonly": false,
               "text": "dd1-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd1-max-prior-error",
               "readonly": false,
               "text": "dd1-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd1-max-post-error",
               "readonly": false,
               "text": "dd1-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd1-max-iter",
               "readonly": false,
               "text": "dd1-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd1-prop-flags",
               "readonly": false,
               "text": "dd1-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd2-time-int",
               "readonly": false,
               "text": "dd2-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd2-freq-int",
               "readonly": false,
               "text": "dd2-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd2-clip-low",
               "readonly": false,
               "text": "dd2-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd2-clip-high",
               "readonly": false,
               "text": "dd2-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd2-clip-after",
               "readonly": false,
               "text": "dd2-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd2-conv-quorum",
               "readonly": false,
               "text": "dd2-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd2-ref-ant",
               "readonly": false,
               "text": "dd2-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd2-solvable",
               "readonly": false,
               "text": "dd2-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd2-type",
               "readonly": false,
               "text": "dd2-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd2-load-from",
               "readonly": false,
               "text": "dd2-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd2-xfer-from",
               "readonly": false,
               "text": "dd2-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd2-save-to",
               "readonly": false,
               "text": "dd2-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd2-fix-dirs",
               "readonly": false,
               "text": "dd2-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd2-update-type",
               "readonly": false,
               "text": "dd2-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd2-max-prior-error",
               "readonly": false,
               "text": "dd2-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd2-max-post-error",
               "readonly": false,
               "text": "dd2-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd2-max-iter",
               "readonly": false,
               "text": "dd2-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd2-prop-flags",
               "readonly": false,
               "text": "dd2-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Time solution interval for this term. 0 means use entire chunk.",
               "name": "dd3-time-int",
               "readonly": false,
               "text": "dd3-time-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Frequency solution interval for this term. 0 means use entire chunk.",
               "name": "dd3-freq-int",
               "readonly": false,
               "text": "dd3-freq-int",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with diagonal amplitudes below this\nvalue.",
               "name": "dd3-clip-low",
               "readonly": false,
               "text": "dd3-clip-low",
               "type": "Float",
               "value": null
            },
            {
               "description": "Amplitude clipping - flag solutions with any amplitudes above this value.",
               "name": "dd3-clip-high",
               "readonly": false,
               "text": "dd3-clip-high",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of iterations after which to clip this gain.",
               "name": "dd3-clip-after",
               "readonly": false,
               "text": "dd3-clip-after",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Minimum percentage of converged solutions to accept.",
               "name": "dd3-conv-quorum",
               "readonly": false,
               "text": "dd3-conv-quorum",
               "type": "Float",
               "value": null
            },
            {
               "description": "Reference antenna - its phase is guaranteed to be zero.",
               "name": "dd3-ref-ant",
               "readonly": false,
               "text": "dd3-ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable\nterm is loaded from disk. Not to be confused with --sol-jones, which\ndetermines the active Jones terms.",
               "name": "dd3-solvable",
               "readonly": false,
               "text": "dd3-solvable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of Jones matrix to solve for. Note that if multiple Jones terms are\nenabled, then only complex-2x2 is supported.",
               "name": "dd3-type",
               "readonly": false,
               "text": "dd3-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Load solutions from given database. The DB must define solutions\non the same time/frequency grid (i.e. should normally come from\ncalibrating the same pointing/observation). By default, the Jones\nmatrix label is used to form up parameter names, but his may be\noverridden by adding an explicit \"//LABEL\" to the database filename.",
               "name": "dd3-load-from",
               "readonly": false,
               "text": "dd3-load-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Transfer solutions from given database. Similar to -load-from, but\nsolutions will be interpolated onto the required time/frequency grid,\nso they can originate from a different field (e.g. from a calibrator).",
               "name": "dd3-xfer-from",
               "readonly": false,
               "text": "dd3-xfer-from",
               "type": "String",
               "value": null
            },
            {
               "description": "Save solutions to given database.",
               "name": "dd3-save-to",
               "readonly": false,
               "text": "dd3-save-to",
               "type": "String",
               "value": null
            },
            {
               "description": "For DD terms, makes the listed directions non-solvable.",
               "name": "dd3-fix-dirs",
               "readonly": false,
               "text": "dd3-fix-dirs",
               "type": "String",
               "value": null
            },
            {
               "description": "Determines update type. This does not change the Jones solver type, but\nrestricts the update rule to pin the solutions within a certain subspace:\n'full' is the default behaviour;\n'diag' pins the off-diagonal terms to 0;\n'phase-diag' also pins the amplitudes of the diagonal terms to unity;\n'amp-diag' also pins the phases to 0.",
               "name": "dd3-update-type",
               "readonly": false,
               "text": "dd3-update-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag solution intervals where the prior error estimate is above this value.",
               "name": "dd3-max-prior-error",
               "readonly": false,
               "text": "dd3-max-prior-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag solution intervals where the posterior variance estimate is above this value.",
               "name": "dd3-max-post-error",
               "readonly": false,
               "text": "dd3-max-post-error",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of iterations spent on this term.",
               "name": "dd3-max-iter",
               "readonly": false,
               "text": "dd3-max-iter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag propagation policy. Determines how flags raised on gains propagate back\ninto the data. Options are 'never' to never propagate, 'always' to always\npropagate, 'default' to only propagate flags from direction-independent gains.",
               "name": "dd3-prop-flags",
               "readonly": false,
               "text": "dd3-prop-flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Default console output verbosity level",
               "name": "log-verbose",
               "readonly": false,
               "text": "log-verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Oversampling factor.",
               "name": "degridding-OverS",
               "readonly": false,
               "text": "degridding-OverS",
               "type": "Integer",
               "value": 11
            },
            {
               "description": "CF support size.",
               "name": "degridding-Support",
               "readonly": false,
               "text": "degridding-Support",
               "type": "Integer",
               "value": 7
            },
            {
               "description": "Number of w-planes.",
               "name": "degridding-Nw",
               "readonly": false,
               "text": "degridding-Nw",
               "type": "Integer",
               "value": 100
            },
            {
               "description": "Maximum w coordinate (meters). Visibilities with larger w will not be gridded. If 0, no maximum is imposed.",
               "name": "degridding-wmax",
               "readonly": false,
               "text": "degridding-wmax",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Facet padding factor.",
               "name": "degridding-Padding",
               "readonly": false,
               "text": "degridding-Padding",
               "type": "Float",
               "value": 1.7
            },
            {
               "description": "Number of image bands for degridding. 0 means degrid each channel.",
               "name": "degridding-NDegridBand",
               "readonly": false,
               "text": "degridding-NDegridBand",
               "type": "Integer",
               "value": 16
            },
            {
               "description": "Maximum facet size in degrees",
               "name": "degridding-MaxFacetSize",
               "readonly": false,
               "text": "degridding-MaxFacetSize",
               "type": "Float",
               "value": 0.25
            },
            {
               "description": "Minimum number of facets per direction",
               "name": "degridding-MinNFacetPerAxis",
               "readonly": false,
               "text": "degridding-MinNFacetPerAxis",
               "type": "Integer",
               "value": 1
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "cubical_ddf",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Download data from a remote path",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Download data from a remote path",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/curl:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " curl"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "url name",
               "name": "url",
               "readonly": false,
               "text": "url",
               "type": "String",
               "value": null
            },
            {
               "description": "info",
               "name": "output",
               "readonly": false,
               "text": "output",
               "type": "String",
               "value": true
            },
            {
               "description": " Client certificate file and password (SSL)",
               "name": "cert",
               "readonly": false,
               "text": "cert",
               "type": "String",
               "value": null
            },
            {
               "description": "Verify the status of the server certificate",
               "name": "cert-status",
               "readonly": false,
               "text": "cert-status",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Verify the status of the server certificate",
               "name": "cert-type",
               "readonly": false,
               "text": "cert-type",
               "type": "String",
               "value": null
            },
            {
               "description": "SSL ciphers to use",
               "name": "ciphers",
               "readonly": false,
               "text": "ciphers",
               "type": "String",
               "value": null
            },
            {
               "description": "Follow redirects",
               "name": "location",
               "readonly": false,
               "text": "location",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Read config from FILE",
               "name": "config",
               "readonly": false,
               "text": "config",
               "type": "String",
               "value": null
            },
            {
               "description": "Specify number of bytes to resume download from, alternatively specify '-' to tell curl to automatically detect",
               "name": "continue-at",
               "readonly": false,
               "text": "continue-at",
               "type": "String",
               "value": "-"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "curl",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "DDFacet: a facet-based imager",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "DDFacet: a facet-based imager",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/ddfacet:1.7.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " DDF.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Custom parset file (note: all paths in the parset must be relative to the mount points inside the container). Advance usage only.",
               "name": "Parset",
               "readonly": false,
               "text": "Parset",
               "type": "String",
               "value": null
            },
            {
               "description": "Name(s) of database to image",
               "name": "Data-MS",
               "readonly": false,
               "text": "Data-MS",
               "type": "String",
               "value": null
            },
            {
               "description": "ColName to image",
               "name": "Data-ColName",
               "readonly": false,
               "text": "Data-ColName",
               "type": "String",
               "value": "DATA"
            },
            {
               "description": "Chunk data into time bins of x hours to conserve memory",
               "name": "Data-ChunkHours",
               "readonly": false,
               "text": "Data-ChunkHours",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Sort the data by baseline-time order internally. Can improve processing speed",
               "name": "Data-Sort",
               "readonly": false,
               "text": "Data-Sort",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "MS column to write predict to. Can be left empty to disable",
               "name": "Predict-ColName",
               "readonly": false,
               "text": "Predict-ColName",
               "type": "String",
               "value": null
            },
            {
               "description": "Use this field if you want to predict (in/out)side a square region. Syntax is (MaskOutSide,NpixInside). For example setting (0,1000) will predict the outer (1000x1000) square only",
               "name": "Predict-MaskSquare",
               "readonly": false,
               "text": "Predict-MaskSquare",
               "type": "String",
               "value": null
            },
            {
               "description": "In --Image-Mode=Predict, will predict data from this image, rather than --Data-InitDicoModel",
               "name": "Predict-FromImage",
               "readonly": false,
               "text": "Predict-FromImage",
               "type": "String",
               "value": null
            },
            {
               "description": "Resume deconvolution from given DicoModel",
               "name": "Predict-InitDicoModel",
               "readonly": false,
               "text": "Predict-InitDicoModel",
               "type": "String",
               "value": null
            },
            {
               "description": "Allow overwriting of predict column",
               "name": "Predict-Overwrite",
               "readonly": false,
               "text": "Predict-Overwrite",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Default FIELD_ID to read",
               "name": "Selection-Field",
               "readonly": false,
               "text": "Selection-Field",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Default DATA_DESC_ID to read",
               "name": "Selection-DDID",
               "readonly": false,
               "text": "Selection-DDID",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Additional TaQL selection string",
               "name": "Selection-TaQL",
               "readonly": false,
               "text": "Selection-TaQL",
               "type": "String",
               "value": "''"
            },
            {
               "description": "First channel",
               "name": "Selection-ChanStart",
               "readonly": false,
               "text": "Selection-ChanStart",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Last channel+1, -1 means up and including last channel",
               "name": "Selection-ChanEnd",
               "readonly": false,
               "text": "Selection-ChanEnd",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "List of antennas to be flagged, e.g. 'RS,CS017LBA'",
               "name": "Selection-FlagAnts",
               "readonly": false,
               "text": "Selection-FlagAnts",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Select baseline range km_min,km_max",
               "name": "Selection-UVRangeKm",
               "readonly": false,
               "text": "Selection-UVRangeKm",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Select time range, in hours, since start of MS. Format H0,H1",
               "name": "Selection-TimeRange",
               "readonly": false,
               "text": "Selection-TimeRange",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Select antennas by specifying a maximum distance to core",
               "name": "Selection-DistMaxToCore",
               "readonly": false,
               "text": "Selection-DistMaxToCore",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Output mode",
               "name": "Output-Mode",
               "readonly": false,
               "text": "Output-Mode",
               "type": "String",
               "value": "Clean"
            },
            {
               "description": "Clobber output",
               "name": "Output-Clobber",
               "readonly": false,
               "text": "Output-Clobber",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Image name prefix",
               "name": "Output-Name",
               "readonly": false,
               "text": "Output-Name",
               "type": "String",
               "value": "image"
            },
            {
               "description": "Output name for restoring beam",
               "name": "Output-RestoringBeam",
               "readonly": false,
               "text": "Output-RestoringBeam",
               "type": "String",
               "value": null
            },
            {
               "description": "Additionally output specified set of images. See Output-Images for arguments",
               "name": "Output-Also",
               "readonly": false,
               "text": "Output-Also",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Specify cubes to output. Any combination of MmRrIi are acceptable. See Output-Images for explanation on types",
               "name": "Output-Cubes",
               "readonly": false,
               "text": "Output-Cubes",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Specify images to output. Combination of letter codes indicating what images to save. Uppercase for intrinsic flux scale [D]irty, [M]odel, [C]onvolved model, [R]esiduals, restored [I]mage; Lowercase for apparent flux scale  [d]irty, [m]odel, [c]onvolved model, [r]esiduals, restored [i]mage; Other images: [P]SF, [N]orm, [n]orm facets, [S] flux scale, [A]lpha (spectral index), [X] mixed-scale (intrinsic model, apparent residuals, i.e. Cyrils original output), [o] intermediate mOdels (Model_i), [e] intermediate rEsiduals (Residual_i), [k] intermediate masK image, [z] intermediate auto mask-related noiZe image, [g] intermediate dirty images (only if [Debugging] SaveIntermediateDirtyImages is enabled). Use 'all' to save all. (default: DdPAMRIikz)",
               "name": "Output-Images",
               "readonly": false,
               "text": "Output-Images",
               "type": "String",
               "value": "DdPAMRIikz"
            },
            {
               "description": "Number of pixels in output Image",
               "name": "Image-NPix",
               "readonly": false,
               "text": "Image-NPix",
               "type": "Integer",
               "value": 5000
            },
            {
               "description": "Cell size of pixels in output image (in arcseconds)",
               "name": "Image-Cell",
               "readonly": false,
               "text": "Image-Cell",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Manually specify image phase centre in format RA,DEC",
               "name": "Image-PhaseCenterRADEC",
               "readonly": false,
               "text": "Image-PhaseCenterRADEC",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Manually specify sidelobe search window when fitting the restoring beam. Specify number of pixels",
               "name": "Image-SidelobeSearchWindow",
               "readonly": false,
               "text": "Image-SidelobeSearchWindow",
               "type": "Float",
               "value": 200
            },
            {
               "description": "Number of facets to use",
               "name": "Facets-NFacets",
               "readonly": false,
               "text": "Facets-NFacets",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Override facet directions with catalogue",
               "name": "Facets-CatNodes",
               "readonly": false,
               "text": "Facets-CatNodes",
               "type": "String",
               "value": null
            },
            {
               "description": "Maximum facet size (deg). Larger facets will be broken up",
               "name": "Facets-DiamMax",
               "readonly": false,
               "text": "Facets-DiamMax",
               "type": "Float",
               "value": 180.0
            },
            {
               "description": "Minimum facet size (deg). Smaller facets will be merged",
               "name": "Facets-DiamMin",
               "readonly": false,
               "text": "Facets-DiamMin",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "For cleaning, oversize PSF relative to the size of the facet",
               "name": "Facets-PSFOversize",
               "readonly": false,
               "text": "Facets-PSFOversize",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "Number of PSFs to create. 0: one per facet, 1: one PSF for entire field",
               "name": "Facets-PSFFacets",
               "readonly": false,
               "text": "Facets-PSFFacets",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Facet padding factor. Value should be >>> 1.0 to account for anti-aliasing filter rolloff.",
               "name": "Facets-Padding",
               "readonly": false,
               "text": "Facets-Padding",
               "type": "Float",
               "value": 1.7
            },
            {
               "description": "Read data weights from specified column. Use WEIGHT_SPECTRUM or WEIGHT, more rarely IMAGING_WEIGHT.",
               "name": "Weight-ColName",
               "readonly": false,
               "text": "Weight-ColName",
               "type": "String",
               "value": "WEIGHT_SPECTRUM"
            },
            {
               "description": "UV weighting mode",
               "name": "Weight-Mode",
               "readonly": false,
               "text": "Weight-Mode",
               "type": "String",
               "value": "Briggs"
            },
            {
               "description": "If True, MFS uniform/Briggs weighting is used (all channels binned onto one uv grid). If 0, binning is per-band.",
               "name": "Weight-MFS",
               "readonly": false,
               "text": "Weight-MFS",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Briggs robustness parameter, from -2 (more uniform) to 2 (more natural)",
               "name": "Weight-Robust",
               "readonly": false,
               "text": "Weight-Robust",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Super/subuniform weighting: FoV for weighting purposes is taken as X*Image_Size",
               "name": "Weight-SuperUniform",
               "readonly": false,
               "text": "Weight-SuperUniform",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "Gridding polarization mode (non-stokes I is only supported in Imager-Mode=Dirty)",
               "name": "RIME-PolMode",
               "readonly": false,
               "text": "RIME-PolMode",
               "type": "String",
               "value": "I"
            },
            {
               "description": "FFTW engine",
               "name": "RIME-FFTMachine",
               "readonly": false,
               "text": "RIME-FFTMachine",
               "type": "String",
               "value": "FFTW"
            },
            {
               "description": "Forward predict engine",
               "name": "RIME-ForwardMode",
               "readonly": false,
               "text": "RIME-ForwardMode",
               "type": "String",
               "value": "BDA-degrid"
            },
            {
               "description": "Backward inversion engine",
               "name": "RIME-BackwardMode",
               "readonly": false,
               "text": "RIME-BackwardMode",
               "type": "String",
               "value": "BDA-grid"
            },
            {
               "description": "Decorrelation mode (undocumented ???)",
               "name": "RIME-DecorrMode",
               "readonly": false,
               "text": "RIME-DecorrMode",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Decorrelation location",
               "name": "RIME-DecorrLocation",
               "readonly": false,
               "text": "RIME-DecorrLocation",
               "type": "String",
               "value": "Edge"
            },
            {
               "description": "Convolution filter oversampling factor",
               "name": "CF-OverS",
               "readonly": false,
               "text": "CF-OverS",
               "type": "Integer",
               "value": 11
            },
            {
               "description": "AA convolution filter support",
               "name": "CF-Support",
               "readonly": false,
               "text": "CF-Support",
               "type": "Integer",
               "value": 7
            },
            {
               "description": "Number of w-planes. Should be selected such that the projection error at the edge of the facet is << 1 radian per w plane",
               "name": "CF-Nw",
               "readonly": false,
               "text": "CF-Nw",
               "type": "Integer",
               "value": 100
            },
            {
               "description": "Overwrite maximum w (in metres) of the interferometer sampling. This controlls the support needed for the w kernels and can bring down computational costs if more error is tolerated on the longest baselines",
               "name": "CF-wmax",
               "readonly": false,
               "text": "CF-wmax",
               "type": "Float",
               "value": 10000.0
            },
            {
               "description": "Maximum tolerated BDA decorrelation response factor for gridding",
               "name": "Comp-GridDecorr",
               "readonly": false,
               "text": "Comp-GridDecorr",
               "type": "Float",
               "value": 0.02
            },
            {
               "description": "Maximum tolerated BDA decorrelation response factor for degridding",
               "name": "Comp-DegridDecorr",
               "readonly": false,
               "text": "Comp-DegridDecorr",
               "type": "Float",
               "value": 0.02
            },
            {
               "description": "FoV over which gridding decorrelation factor is computed",
               "name": "Comp-GridFoV",
               "readonly": false,
               "text": "Comp-GridFoV",
               "type": "String",
               "value": "Facet"
            },
            {
               "description": "Maximum tolerated BDA decorrelation response factor for degridding",
               "name": "Comp-GridDecorr",
               "readonly": false,
               "text": "Comp-GridDecorr",
               "type": "Float",
               "value": 0.02
            },
            {
               "description": "FoV over which degridding decorrelation factor is computed",
               "name": "Comp-DegridFoV",
               "readonly": false,
               "text": "Comp-DegridFoV",
               "type": "String",
               "value": "Facet"
            },
            {
               "description": "Apply sparsification compression to initial major cycles. Sparsification refers to throwing away random visibilities. Supply a list of factors: e.g. 100,30,10 would mean only 1/100 of the data is used for the first major cycle, 1/30 for the second, 1/10 for the third, and full data for the fourth cycle onwards. This can substantially accelerate deconvolution of deep observations, since, in these regimes, very little sensitivity is required for model construction in the initial cycles.",
               "name": "Comp-Sparsification",
               "readonly": false,
               "text": "Comp-Sparsification",
               "type": "String",
               "value": "0"
            },
            {
               "description": "Number of processes / threads to use in parallel mode. 0 - all available. 1 - disable parallelism",
               "name": "Parallel-NCPU",
               "readonly": false,
               "text": "Parallel-NCPU",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Sets affinity of the subprocesses / threads.  -1/1/2 determines stepping used in selecting cores. Alternatively specifies a list of length NCPU. Alternatively 'disable' to disable affinity settings Alternatively 'enable_ht' uses stepping of 1 (equivalent to Parallel.Affinity=1), will use all vthreads - the obvious exception is if HT is disabled at BIOS level. Alternatively 'disable_ht' autodetects the NUMA layout of the chip for Debian-based systems and don't use both vthreads per core. Use 1 if unsure.",
               "name": "Parallel-Affinity",
               "readonly": false,
               "text": "Parallel-Affinity",
               "type": "String",
               "value": "1"
            },
            {
               "description": "Pins parent process to specified core. This should be set to a vcore that is not used by forked processes, this option is ignored when using option 'disable' or 'disable_ht' for Parallel-Affinity.",
               "name": "Parallel-Affinity",
               "readonly": false,
               "text": "Parallel-Affinity",
               "type": "String",
               "value": "0"
            },
            {
               "description": "Reset all caches (including PSF and dirty image)",
               "name": "Cache-Reset",
               "readonly": false,
               "text": "Cache-Reset",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Reset cached smooth beam",
               "name": "Cache-SmoothBeam",
               "readonly": false,
               "text": "Cache-SmoothBeam",
               "type": "String",
               "value": "reset"
            },
            {
               "description": "Cache PSF data",
               "name": "Cache-PSF",
               "readonly": false,
               "text": "Cache-PSF",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Cache dirty image data",
               "name": "Cache-Dirty",
               "readonly": false,
               "text": "Cache-Dirty",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Cache visibility data and flags at runtime",
               "name": "Cache-VisData",
               "readonly": false,
               "text": "Cache-VisData",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Cache visibility data and flags at runtime",
               "name": "Cache-VisData",
               "readonly": false,
               "text": "Cache-VisData",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Cache last residual data (at end of last minor cycle)",
               "name": "Cache-LastResidual",
               "readonly": false,
               "text": "Cache-LastResidual",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Directory to store caches in. Default is to keep cache next to the MS, but this can cause performance issues with e.g. NFS volumes. If you have fast local storage, point to it.",
               "name": "Cache-Dir",
               "readonly": false,
               "text": "Cache-Dir",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Directory in which to store the FFTW wisdom files",
               "name": "Cache-DirWisdomFFTW",
               "readonly": false,
               "text": "Cache-DirWisdomFFTW",
               "type": "String",
               "value": ".fftw_wisdom"
            },
            {
               "description": "Reset wisdom file",
               "name": "Cache-ResetWisdom",
               "readonly": false,
               "text": "Cache-ResetWisdom",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Beam model to use.",
               "name": "Beam-Model",
               "readonly": false,
               "text": "Beam-Model",
               "type": "String",
               "value": null
            },
            {
               "description": "LOFAR beam mode.",
               "name": "Beam-LOFARBeamMode",
               "readonly": false,
               "text": "Beam-LOFARBeamMode",
               "type": "String",
               "value": "AE"
            },
            {
               "description": "N Number of channels over which same beam value is used. 0 means use every channel.",
               "name": "Beam-NBand",
               "readonly": false,
               "text": "Beam-NBand",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Normalize beam so that its amplitude at the centre is 1.",
               "name": "Beam-CenterNorm",
               "readonly": false,
               "text": "Beam-CenterNorm",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "BEAM_SMOOTH Compute the interpolated smooth beam",
               "name": "Beam-Smooth",
               "readonly": false,
               "text": "Beam-Smooth",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "BEAM_SMOOTHNPIX Number of pixels the beam is evaluated and smoothed",
               "name": "Beam-SmoothNPix",
               "readonly": false,
               "text": "Beam-SmoothNPix",
               "type": "Integer",
               "value": 11
            },
            {
               "description": "PATTERN Beam FITS file pattern. A beam pattern consists of eight FITS files, i.e. a real and imaginary part for each of the four Jones terms. The following substitutions are performed to form up the eight filenames: $(corr) or $(xy) is replaced by the Jones element label (e.g. \"xx\" or \"rr\"), $(reim) is replaced by \"re\" or \"im\", $(realimag) is replaced by \"real\" or \"imag\". Uppercase variables are replaced by uppercase values, e.g. $(REIM) by \"RE\" or \"IM\". Correlation labels (XY or RL) are determined by reading the MS, but may be overridden by the FITSFeed option.",
               "name": "Beam-FITSFile",
               "readonly": false,
               "text": "Beam-FITSFile",
               "type": "String",
               "value": "'beam_$(corr)_$(reim).fits'"
            },
            {
               "description": "If set, overrides correlation labels given by the MS.",
               "name": "Beam-FITSFeed",
               "readonly": false,
               "text": "Beam-FITSFeed",
               "type": "String",
               "value": null
            },
            {
               "description": "If set, overrides correlation labels given by the MS.",
               "name": "Beam-FITSFeed",
               "readonly": false,
               "text": "Beam-FITSFeed",
               "type": "String",
               "value": null
            },
            {
               "description": "MIN change in minutes on which the beam is re-evaluated",
               "name": "Beam-DtBeamMin",
               "readonly": false,
               "text": "Beam-DtBeamMin",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "DEG increment in PA in degrees at which the beam is to be re-evaluated (on top of DtBeamMin)",
               "name": "Beam-FITSParAngleIncDeg",
               "readonly": false,
               "text": "Beam-FITSParAngleIncDeg",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "AXIS L axis of FITS file. Minus sign indicates reverse coordinate convention.",
               "name": "Beam-FITSLAxis",
               "readonly": false,
               "text": "Beam-FITSLAxis",
               "type": "String",
               "value": "-X"
            },
            {
               "description": "AXIS M axis of FITS file. Minus sign indicates reverse coordinate convention.",
               "name": "Beam-FITSMAxis",
               "readonly": false,
               "text": "Beam-FITSMAxis",
               "type": "String",
               "value": "Y"
            },
            {
               "description": "LEVEL set to >0 to have verbose output from FITS interpolator classes.",
               "name": "Beam-FITSVerbosity",
               "readonly": false,
               "text": "Beam-FITSVerbosity",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "MHz Gridding cube frequency step. If 0, --Freq-NBand is used instead.",
               "name": "Freq-BandMHz",
               "readonly": false,
               "text": "Freq-BandMHz",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "MHz Degridding cube frequency step. If 0, --Freq- NDegridBand is used instead.",
               "name": "Freq-DegridBandMHz",
               "readonly": false,
               "text": "Freq-DegridBandMHz",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "N Number of image bands for gridding.",
               "name": "Freq-NBand",
               "readonly": false,
               "text": "Freq-NBand",
               "type": "Integer",
               "value": "1"
            },
            {
               "description": "N Number of image bands for degridding. 0 means degrid each channel.",
               "name": "Freq-NDegridBand",
               "readonly": false,
               "text": "Freq-NDegridBand",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "DDESOLUTIONS_DDSOLS (???)",
               "name": "DDESolutions-DDSols",
               "readonly": false,
               "text": "DDESolutions-DDSols",
               "type": "String",
               "value": "''"
            },
            {
               "description": "DDESOLUTIONS_GLOBALNORM (???)",
               "name": "DDESolutions-GlobalNorm",
               "readonly": false,
               "text": "DDESolutions-GlobalNorm",
               "type": "String",
               "value": null
            },
            {
               "description": "DDESOLUTIONS_JONESNORMLIST (???)",
               "name": "DDESolutions-JonesNormList",
               "readonly": false,
               "text": "DDESolutions-JonesNormList",
               "type": "String",
               "value": "AP"
            },
            {
               "description": "(???)",
               "name": "DDESolutions-JonesMode",
               "readonly": false,
               "text": "DDESolutions-JonesMode",
               "type": "String",
               "value": "Full"
            },
            {
               "description": "DDESOLUTIONS_DDMODEGRID (???)",
               "name": "DDESolutions-DDModeGrid",
               "readonly": false,
               "text": "DDESolutions-DDModeGrid",
               "type": "String",
               "value": "AP"
            },
            {
               "description": "DDESOLUTIONS_DDMODEDEGRID (???)",
               "name": "DDESolutions-DDModeDeGrid",
               "readonly": false,
               "text": "DDESolutions-DDModeDeGrid",
               "type": "String",
               "value": "AP"
            },
            {
               "description": "DDESOLUTIONS_SCALEAMPGRID (???)",
               "name": "DDESolutions-ScaleAmpGrid",
               "readonly": false,
               "text": "DDESolutions-ScaleAmpGrid",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "DDESOLUTIONS_SCALEAMPDEGRID (???)",
               "name": "DDESolutions-ScaleAmpDeGrid",
               "readonly": false,
               "text": "DDESolutions-ScaleAmpDeGrid",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "DDESOLUTIONS_CALIBERR (???)",
               "name": "DDESolutions-CalibErr",
               "readonly": false,
               "text": "DDESolutions-CalibErr",
               "type": "Float",
               "value": "10.0"
            },
            {
               "description": "???",
               "name": "DDESolutions-Type",
               "readonly": false,
               "text": "DDESolutions-Type",
               "type": "String",
               "value": "Nearest"
            },
            {
               "description": "DEG (???)",
               "name": "DDESolutions-Scale",
               "readonly": false,
               "text": "DDESolutions-Scale",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "DDESOLUTIONS_GAMMA (???)",
               "name": "DDESolutions-gamma",
               "readonly": false,
               "text": "DDESolutions-gamma",
               "type": "Float",
               "value": 4.0
            },
            {
               "description": "DDESOLUTIONS_RESTORESUB (???)",
               "name": "DDESolutions-RestoreSub",
               "readonly": false,
               "text": "DDESolutions-RestoreSub",
               "type": "String",
               "value": "False"
            },
            {
               "description": "DDESOLUTIONS_REWEIGHTSNR (???)",
               "name": "DDESolutions-ReWeightSNR",
               "readonly": false,
               "text": "DDESolutions-ReWeightSNR",
               "type": "String",
               "value": 0.0
            },
            {
               "description": "Deconvolution algorithm.",
               "name": "Deconv-Mode",
               "readonly": false,
               "text": "Deconv-Mode",
               "type": "String",
               "value": "HMP"
            },
            {
               "description": "N Max number of major cycles.",
               "name": "Deconv-MaxMajorIter",
               "readonly": false,
               "text": "Deconv-MaxMajorIter",
               "type": "Integer",
               "value": 20
            },
            {
               "description": "N Max number of (overall) minor cycle iterations (HMP, Hogbom).",
               "name": "Deconv-MaxMinorIter",
               "readonly": false,
               "text": "Deconv-MaxMinorIter",
               "type": "Integer",
               "value": 20000
            },
            {
               "description": "Allow negative components (HMP, Hogbom).",
               "name": "Deconv-AllowNegative",
               "readonly": false,
               "text": "Deconv-AllowNegative",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "GAIN Loop gain (HMP, Hogbom).",
               "name": "Deconv-Gain",
               "readonly": false,
               "text": "Deconv-Gain",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "Jy Absolute flux threshold at which deconvolution is stopped (HMP, Hogbom).",
               "name": "Deconv-FluxThreshold",
               "readonly": false,
               "text": "Deconv-FluxThreshold",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "X Cycle factor: used to set a minor cycle stopping threshold based on PSF sidelobe level (HMP, Hogbom). Use 0 to disable, otherwise 2.5 is a reasonable value, but may lead to very shallow minor cycle.",
               "name": "Deconv-CycleFactor",
               "readonly": false,
               "text": "Deconv-CycleFactor",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "X Set minor cycle stopping threshold to X*{residual RMS} (HMP, Hogbom).",
               "name": "Deconv-RMSFactor",
               "readonly": false,
               "text": "Deconv-RMSFactor",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "X Set minor cycle stopping threshold to X*{peak residual} (HMP, Hogbom).",
               "name": "Deconv-PeakFactor",
               "readonly": false,
               "text": "Deconv-PeakFactor",
               "type": "Float",
               "value": 0.15
            },
            {
               "description": "N How many samples to draw for RMS computation. Use 0 to use all pixels (most precise).",
               "name": "Deconv-NumRMSSamples",
               "readonly": false,
               "text": "Deconv-NumRMSSamples",
               "type": "Float",
               "value": 10000
            },
            {
               "description": "SF when --Comp-Sparsification is on, use approximate (i.e. central facet) PSF for cleaning while operating above the given sparsification factor (SF). This speeds up HMP reinitialization in major cycles. A value of 1-10 is sensible. Set to 0 to always use precise per-facet PSF.",
               "name": "Deconv-ApproximatePSF",
               "readonly": false,
               "text": "Deconv-ApproximatePSF",
               "type": "String",
               "value": 0
            },
            {
               "description": "BOX determines the size of the PSF subtraction box used in CLEAN-style deconvolution (if appropriate). Use \"auto\" (or \"sidelobe\") for a Clark-CLEAN-style box taken out to a certain sidelobe (faster). Use \"full\" to subtract the full PSF, Hogbom-style (more accurate, can also combine with --Image-PSFOversize for maximum accuracy). Use an integer number to set an explicit box radius, in pixels. (HMP)",
               "name": "Deconv-PSFBox",
               "readonly": false,
               "text": "Deconv-PSFBox",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "FILENAME External clean mask image (FITS format)",
               "name": "Mask-External",
               "readonly": false,
               "text": "Mask-External",
               "type": "String",
               "value": null
            },
            {
               "description": "MASK_AUTO Use automatic masking",
               "name": "Mask-Auto",
               "readonly": false,
               "text": "Mask-Auto",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "set Threshold (in sigma) for automatic masking",
               "name": "Mask-SigTh",
               "readonly": false,
               "text": "Mask-SigTh",
               "type": "Float",
               "value": 10
            },
            {
               "description": "If Auto enabled, does the cut of SigTh either on the ModelConv or the Restored",
               "name": "Mask-FluxImageType",
               "readonly": false,
               "text": "Mask-FluxImageType",
               "type": "String",
               "value": "ModelConv"
            },
            {
               "description": "MIN,MAX,N String list of alphas to fit. e.g [-1.0, 1.0, 11]",
               "name": "HMP-Alpha",
               "readonly": false,
               "text": "HMP-Alpha",
               "type": "String",
               "value": "'[-1.0, 1.0, 11]'"
            },
            {
               "description": "LIST String list of scales to use e.g [0]",
               "name": "HMP-Scales",
               "readonly": false,
               "text": "HMP-Scales",
               "type": "String",
               "value": "'[0]'"
            },
            {
               "description": "HMP_RATIOS (???)",
               "name": "HMP-Ratios",
               "readonly": false,
               "text": "HMP-Ratios",
               "type": "String",
               "value": "\"['']\""
            },
            {
               "description": "N Number of PA steps to use.",
               "name": "HMP-NTheta",
               "readonly": false,
               "text": "HMP-NTheta",
               "type": "Integer",
               "value": 6
            },
            {
               "description": "Solver mode: pseudoinverse, or non-negative least squares.",
               "name": "HMP-SolverMode",
               "readonly": false,
               "text": "HMP-SolverMode",
               "type": "String",
               "value": "PI"
            },
            {
               "description": "Allow the maximum residual to increase within the minor cycle",
               "name": "HMP-AllowResidIncrease",
               "readonly": false,
               "text": "HMP-AllowResidIncrease",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Weighting taper size for HMP fit. If 0, determined automatically.",
               "name": "HMP-Taper",
               "readonly": false,
               "text": "HMP-Taper",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Basis function support size. If 0, determined automatically.",
               "name": "HMP-Support",
               "readonly": false,
               "text": "HMP-Support",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "HMP_KAPPA Regularization parameter. If stddev of per-alpha solutions exceeds the maximum solution amplitude divided by Kappa, forces a fully-regularized solution. Use 0 for no such regularization.",
               "name": "HMP-Kappa",
               "readonly": false,
               "text": "HMP-Kappa",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "HOGBOM_POLYFITORDER polynomial order for frequency fitting",
               "name": "Hogbom-PolyFitOrder",
               "readonly": false,
               "text": "Hogbom-PolyFitOrder",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "URL for the TensorflowServer, e.g. grpc://tensorflow.server.com:8888/",
               "name": "Montblanc-TensorflowServerTarget",
               "readonly": false,
               "text": "Montblanc-TensorflowServerTarget",
               "type": "String",
               "value": "''"
            },
            {
               "description": "Enable parallel mode in SSD clean",
               "name": "SSDClean-Parallel",
               "readonly": false,
               "text": "SSDClean-Parallel",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "SSDCLEAN_ISLANDDECONVMODE (???)",
               "name": "SSDClean-IslandDeconvMode",
               "readonly": false,
               "text": "SSDClean-IslandDeconvMode",
               "type": "String",
               "value": "GA"
            },
            {
               "description": "SSDCLEAN_SSDSOLVEPARS (???)",
               "name": "SSDClean-SSDSolvePars",
               "readonly": false,
               "text": "SSDClean-SSDSolvePars",
               "type": "String",
               "value": "\"['S', 'Alpha']\""
            },
            {
               "description": "SSDCLEAN_SSDCOSTFUNC (???)",
               "name": "SSDClean-SSDCostFunc",
               "readonly": false,
               "text": "SSDClean-SSDCostFunc",
               "type": "String",
               "value": "\"['Chi2', 'MinFlux']\""
            },
            {
               "description": "SSDCLEAN_BICFACTOR (???)",
               "name": "SSDClean-BICFactor",
               "readonly": false,
               "text": "SSDClean-BICFactor",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "SSDCLEAN_ARTIFACTROBUST (???)",
               "name": "SSDClean-ArtifactRobust",
               "readonly": false,
               "text": "SSDClean-ArtifactRobust",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "SSDCLEAN_CONVFFTSWITCH (???)",
               "name": "SSDClean-ConvFFTSwitch",
               "readonly": false,
               "text": "SSDClean-ConvFFTSwitch",
               "type": "Integer",
               "value": 1000
            },
            {
               "description": "SSDCLEAN_NENLARGEPARS (???)",
               "name": "SSDClean-NEnlargePars",
               "readonly": false,
               "text": "SSDClean-NEnlargePars",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "SSDCLEAN_NENLARGEDATA (???)",
               "name": "SSDClean-NEnlargeData",
               "readonly": false,
               "text": "SSDClean-NEnlargeData",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "SSDCLEAN_RESTOREMETROSWITCH (???)",
               "name": "SSDClean-RestoreMetroSwitch",
               "readonly": false,
               "text": "SSDClean-RestoreMetroSwitch",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "SSDCLEAN_MINMAXGROUPDISTANCE (???)",
               "name": "SSDClean-MinMaxGroupDistance",
               "readonly": false,
               "text": "SSDClean-MinMaxGroupDistance",
               "type": "String",
               "value": "\"[5, 50]\""
            },
            {
               "description": "GACLEAN_NSOURCEKIN (???)",
               "name": "GAClean-NSourceKin",
               "readonly": false,
               "text": "GAClean-NSourceKin",
               "type": "String",
               "value": "100"
            },
            {
               "description": "GACLEAN_NMAXGEN (???)",
               "name": "GAClean-NMaxGen",
               "readonly": false,
               "text": "GAClean-NMaxGen",
               "type": "String",
               "value": "100"
            },
            {
               "description": "log memory use",
               "name": "Log-Memory",
               "readonly": false,
               "text": "Log-Memory",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "able progress bars and other pretty console output",
               "name": "Log-Boring",
               "readonly": false,
               "text": "Log-Boring",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "append to log file if it exists (default truncates)",
               "name": "Log-Append",
               "readonly": false,
               "text": "Log-Append",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "grid worker processes upon launch (with SIGSTOP). Useful to attach gdb to workers.",
               "name": "Debug-PauseWorkers",
               "readonly": false,
               "text": "Debug-PauseWorkers",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "L,M Shift in facet coordinates in arcseconds for l and m (this phase steers the sky over the image plane).",
               "name": "Debug-FacetPhaseShift",
               "readonly": false,
               "text": "Debug-FacetPhaseShift",
               "type": "String",
               "value": "\"[0.0, 0.0]\""
            },
            {
               "description": "Compute and print RMS in minor cycle iterations.",
               "name": "Debug-PrintMinorCycleRMS",
               "readonly": false,
               "text": "Debug-PrintMinorCycleRMS",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Dump intermediate minor cycle solutions to a file. Use 0 or 1, or give an explicit list of things to dump",
               "name": "Debug-DumpCleanSolutions",
               "readonly": false,
               "text": "Debug-DumpCleanSolutions",
               "type": "String",
               "value": "0"
            },
            {
               "description": "X,Y,R Also dump postage stamps when cleaning within a radius R of X,Y. Implies --Debug-DumpCleanSolutions.",
               "name": "Debug-DumpCleanPostageStamps",
               "readonly": false,
               "text": "Debug-DumpCleanPostageStamps",
               "type": "String",
               "value": null
            },
            {
               "description": "Throw an exception when a fitted CLEAN component is below this threshold in flux. Useful for debugging.",
               "name": "Debug-CleanStallThreshold",
               "readonly": false,
               "text": "Debug-CleanStallThreshold",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Enable memory-greedy mode. Retain certain shared arrays in RAM as long as possible.",
               "name": "Debug-MemoryGreedy",
               "readonly": false,
               "text": "Debug-MemoryGreedy",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Verbosity level for multiprocessing.",
               "name": "Debug-APPVerbose",
               "readonly": false,
               "text": "Debug-APPVerbose",
               "type": "Integer",
               "value": "0"
            },
            {
               "description": "N seed random number generator with explicit seed, if given. Useful for reproducibility of the random-based optimizations (sparsification, etc.).",
               "name": "Misc-RandomSeed",
               "readonly": false,
               "text": "Misc-RandomSeed",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Noise image to compute sigma for stopping threshold (in case specified it will replace Deconv-FluxThreshold)",
               "name": "Noise-Image",
               "readonly": false,
               "text": "Noise-Image",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise sigma for stopping deconvolution in the case where noise_image is provided (new thresh = sigma*noise_image.std())",
               "name": "Noise-Sigma",
               "readonly": false,
               "text": "Noise-Sigma",
               "type": "Float",
               "value": 3.0
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "ddfacet",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Create primary beam model of MeerKAT",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Create primary beam model of MeerKAT",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/eidos:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " eidos"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Number of pixels on one side",
               "name": "pixels",
               "readonly": false,
               "text": "pixels",
               "type": "Integer",
               "value": 256
            },
            {
               "description": "A single freq, or the start, end freqs, and channel width in MHz",
               "name": "freq",
               "readonly": false,
               "text": "freq",
               "type": "String",
               "value": null
            },
            {
               "description": "Diameter of the required beam",
               "name": "diameter",
               "readonly": false,
               "text": "diameter",
               "type": "Float",
               "value": 6.0
            },
            {
               "description": "Coefficients file name",
               "name": "coefficients-file",
               "readonly": false,
               "text": "coefficients-file",
               "type": "String",
               "value": null
            },
            {
               "description": "Which coefficients to use: mh for MeerKAT holography, me for MeerKAT EM simulation and vh for VLA holography?",
               "name": "coeff",
               "readonly": false,
               "text": "coeff",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix for output beam file(s)",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Output complex volatge beams (8 files)",
               "name": "output-eight",
               "readonly": false,
               "text": "output-eight",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "normalise the E-Jones wrt central pixels",
               "name": "normalise",
               "readonly": false,
               "text": "normalise",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "eidos",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Convolve fits images and data cubes to the same resolution",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Convolve fits images and data cubes to the same resolution",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/equolver:0.0.8"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " equolver"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Number of threads",
               "name": "threads",
               "readonly": false,
               "text": "threads",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Switch to enable verbose output",
               "name": "verb",
               "readonly": false,
               "text": "verb",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Input cubes: names or list of names, python style",
               "name": "inc_cubes",
               "readonly": false,
               "text": "inc_cubes",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam major axis default value(s), format see verbose description",
               "name": "bin_bmaj",
               "readonly": false,
               "text": "bin_bmaj",
               "type": "String",
               "value": null
            },
            {
               "description": "Switch to enforce usage of default value(s) bin_bmaj",
               "name": "bin_bmaj_replace",
               "readonly": false,
               "text": "bin_bmaj_replace",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Beam minor axis default value(s), format see verbose description",
               "name": "bin_bmin",
               "readonly": false,
               "text": "bin_bmin",
               "type": "String",
               "value": null
            },
            {
               "description": "Switch to enforce usage of default value(s) bin_bmin",
               "name": "bin_bmin_replace",
               "readonly": false,
               "text": "bin_bmin_replace",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Beam position angle default value(s), format see verbose description",
               "name": "bin_bpa",
               "readonly": false,
               "text": "bin_bpa",
               "type": "String",
               "value": null
            },
            {
               "description": "Switch to enforce usage of default value(s) bin_bpa",
               "name": "bin_bpa_replace",
               "readonly": false,
               "text": "bin_bpa_replace",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Rest frequency default value(s), format see verbose description",
               "name": "bin_restfreq",
               "readonly": false,
               "text": "bin_restfreq",
               "type": "String",
               "value": null
            },
            {
               "description": "Switch to enforce usage of default value(s) bin_restfreq",
               "name": "bin_restfreq_replace",
               "readonly": false,
               "text": "bin_restfreq_replace",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Frequency in Hz to normalize beam to if mode is 'frequency'",
               "name": "bin_normfreq",
               "readonly": false,
               "text": "bin_normfreq",
               "type": "Float",
               "value": null
            },
            {
               "description": "Switch to suppress generation of beam statistics",
               "name": "genbstats_suppress",
               "readonly": false,
               "text": "genbstats_suppress",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Parameter name ('all', \bmaj', 'bmin', 'bpa', 'bsa', 'ceb')",
               "name": "bst_parameter",
               "readonly": false,
               "text": "bst_parameter",
               "type": "String",
               "value": null
            },
            {
               "description": "Scaling type ('all', 'constant', 'frequency')",
               "name": "bst_scaling",
               "readonly": false,
               "text": "bst_scaling",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of statistics to calculate ('all', 'minimum', 'maximum', 'average', 'stdev', 'median', 'mad', 'madstdev', 'percentile', 'percents', 'commonbeam')",
               "name": "bst_stype",
               "readonly": false,
               "text": "bst_stype",
               "type": "String",
               "value": null
            },
            {
               "description": "Sample(s) to calculate statistics on ('all', 'cube', 'chan', 'total')",
               "name": "bst_sample",
               "readonly": false,
               "text": "bst_sample",
               "type": "String",
               "value": null
            },
            {
               "description": "Percents for the percentile statistics",
               "name": "bst_percents",
               "readonly": false,
               "text": "bst_percents",
               "type": "Float",
               "value": null
            },
            {
               "description": "Tolerance for searching the common beam",
               "name": "bst_tolerance",
               "readonly": false,
               "text": "bst_tolerance",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of edges of beam for common beam",
               "name": "bst_nsamps",
               "readonly": false,
               "text": "bst_nsamps",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Epsilon to search for common beam",
               "name": "bst_epsilon",
               "readonly": false,
               "text": "bst_epsilon",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum iterations to search for common beam",
               "name": "bst_maxiter",
               "readonly": false,
               "text": "bst_maxiter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Name of static plot",
               "name": "hist_plotname",
               "readonly": false,
               "text": "hist_plotname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of interactive plot",
               "name": "hist_interactive",
               "readonly": false,
               "text": "hist_interactive",
               "type": "String",
               "value": null
            },
            {
               "description": "Sample to plot 'cube', 'chan', or 'total'",
               "name": "hist_sample",
               "readonly": false,
               "text": "hist_sample",
               "type": "String",
               "value": null
            },
            {
               "description": "Scaling to use ('frequency' or 'constant')",
               "name": "hist_scaling",
               "readonly": false,
               "text": "hist_scaling",
               "type": "String",
               "value": null
            },
            {
               "description": "Allow overwriting files produced before? ('True': yes)",
               "name": "hist_overwrite",
               "readonly": false,
               "text": "hist_overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Switch to suppress the generation of target beams",
               "name": "gentarget_suppress",
               "readonly": false,
               "text": "gentarget_suppress",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Beam major axis intercept (variable format)",
               "name": "tar_bmaj_inter",
               "readonly": false,
               "text": "tar_bmaj_inter",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam major axis slope (variable format)",
               "name": "tar_bmaj_slope",
               "readonly": false,
               "text": "tar_bmaj_slope",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam major axis abscissae (variable format)",
               "name": "tar_bmaj_absc",
               "readonly": false,
               "text": "tar_bmaj_absc",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam minor axis intercept (variable format)",
               "name": "tar_bmin_inter",
               "readonly": false,
               "text": "tar_bmin_inter",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam minor axis slope (variable format)",
               "name": "tar_bmin_slope",
               "readonly": false,
               "text": "tar_bmin_slope",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam minor axis abscissae (variable format)",
               "name": "tar_bmin_absc",
               "readonly": false,
               "text": "tar_bmin_absc",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam position angle axis intercept (variable format)",
               "name": "tar_bpa_inter",
               "readonly": false,
               "text": "tar_bpa_inter",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam position angle axis slope (variable format)",
               "name": "tar_bpa_slope",
               "readonly": false,
               "text": "tar_bpa_slope",
               "type": "String",
               "value": null
            },
            {
               "description": "Beam position angle abscissae (variable format)",
               "name": "tar_bpa_absc",
               "readonly": false,
               "text": "tar_bpa_absc",
               "type": "String",
               "value": null
            },
            {
               "description": "Use 1/F scaling when calculating the target array, either 'frequency' or 'input'",
               "name": "tar_scaling",
               "readonly": false,
               "text": "tar_scaling",
               "type": "String",
               "value": null
            },
            {
               "description": "Switch to suppress the generation of transformed cubes",
               "name": "gentrans_suppress",
               "readonly": false,
               "text": "gentrans_suppress",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Input fits file names, containing the models.",
               "name": "tra_modelnames",
               "readonly": false,
               "text": "tra_modelnames",
               "type": "String",
               "value": null
            },
            {
               "description": "Input fits file names, containing the residuals.",
               "name": "tra_residualnames",
               "readonly": false,
               "text": "tra_residualnames",
               "type": "String",
               "value": null
            },
            {
               "description": "Output fits file names.",
               "name": "tra_fitsnames",
               "readonly": false,
               "text": "tra_fitsnames",
               "type": "String",
               "value": null
            },
            {
               "description": "'scale', 'mask', 'hybrid', 'max'",
               "name": "tra_mode",
               "readonly": false,
               "text": "tra_mode",
               "type": "String",
               "value": null
            },
            {
               "description": "tolerance to determine if convolution failed",
               "name": "tra_tol",
               "readonly": false,
               "text": "tra_tol",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum value that the FT of the convolution kernel can assume, will assume failure if larger",
               "name": "tra_maxker",
               "readonly": false,
               "text": "tra_maxker",
               "type": "Float",
               "value": null
            },
            {
               "description": "Switch to suppress common (average) beam information in header",
               "name": "tra_no_commonbeam",
               "readonly": false,
               "text": "tra_no_commonbeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Switch to suppress individual beam information in header",
               "name": "tra_no_indibeam",
               "readonly": false,
               "text": "tra_no_indibeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Switch to suppress information about scaling/convolution in header",
               "name": "tra_no_hdmode",
               "readonly": false,
               "text": "tra_no_hdmode",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Switch to overwrite output if existent'",
               "name": "tra_overwrite",
               "readonly": false,
               "text": "tra_overwrite",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "equolver",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Convinience tools for manipulating FITS images",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Convinience tools for manipulating FITS images",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/owlcat:1.2.5-1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " fitstool.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input image(s)",
               "name": "image",
               "readonly": false,
               "text": "image",
               "type": "String",
               "value": null
            },
            {
               "description": "Output image",
               "name": "output",
               "readonly": false,
               "text": "output",
               "type": "String",
               "value": null
            },
            {
               "description": "overwrite output file even if it exists",
               "name": "force",
               "readonly": false,
               "text": "force",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Sanitize FITS files by replacing NANs and INFs with a vlaue",
               "name": "sanitize",
               "readonly": false,
               "text": "sanitize",
               "type": "Float",
               "value": null
            },
            {
               "description": "Replace zeros with NaN",
               "name": "zero-to-nan",
               "readonly": false,
               "text": "zero-to-nan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "replace negative values by 0",
               "name": "nonneg",
               "readonly": false,
               "text": "nonneg",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "take mean of input images",
               "name": "mean",
               "readonly": false,
               "text": "mean",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "sum input images",
               "name": "sum",
               "readonly": false,
               "text": "sum",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "take difference of 2 input images",
               "name": "diff",
               "readonly": false,
               "text": "diff",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "product of input images",
               "name": "prod",
               "readonly": false,
               "text": "prod",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "take ratio of 2 input images",
               "name": "ratio",
               "readonly": false,
               "text": "ratio",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "transfer data from image 2 into image 1, preserving the FITS header of image 1",
               "name": "transfer",
               "readonly": false,
               "text": "transfer",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Zoom into central sqaure region given in pixles",
               "name": "zoom",
               "readonly": false,
               "text": "zoom",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Rescale image values",
               "name": "rescale",
               "readonly": false,
               "text": "rescale",
               "type": "Float",
               "value": null
            },
            {
               "description": "KEY=VALUE",
               "name": "edit-header",
               "readonly": false,
               "text": "edit-header",
               "type": "String",
               "value": null
            },
            {
               "description": "header key you wish to delete",
               "name": "delete-header",
               "readonly": false,
               "text": "delete-header",
               "type": "String",
               "value": null
            },
            {
               "description": "Stack a list of FITS images along a given axis. This axis may given as an integer(as it appears in the NAXIS keyword), or as a string (as it appears in the CTYPE keyword)",
               "name": "stack",
               "readonly": false,
               "text": "stack",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Delete original file(s) after stacking/unstacking using --stack/--unstack",
               "name": "delete-files",
               "readonly": false,
               "text": "delete-files",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Unstack a FITS image into smaller chunks each having [each_chunk] planes along a given axis. This axis may given as an integer (as it appears in the NAXIS keyword), or as a string (as it appears in the CTYPE keyword)",
               "name": "unstack",
               "readonly": false,
               "text": "unstack",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Unstack FITS image into images of this width (along the given axis)",
               "name": "unstack-chunk",
               "readonly": false,
               "text": "unstack-chunk",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Stack/Unstack along this axis",
               "name": "fits-axis",
               "readonly": false,
               "text": "fits-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "Required order. List of comma seperated indeces",
               "name": "reorder",
               "readonly": false,
               "text": "reorder",
               "type": "String",
               "value": null
            },
            {
               "description": "Add axis to a FITS image. The AXIS will be described by CTYPE:CRVAL:CRPIX:CDELT[:CUNIT:CROTA]. The keywords in brackets are optinal, while those not in brackets are mendatory. This axis will be the last dimension.",
               "name": "add-axis",
               "readonly": false,
               "text": "add-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "print header(s) of input image(s)",
               "name": "header",
               "readonly": false,
               "text": "header",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Print stats on images and exit. No output images will be written",
               "name": "stats",
               "readonly": false,
               "text": "stats",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Speicfy input images via a pattern string, e.g, prefix*June2016.fits",
               "name": "file_pattern",
               "readonly": false,
               "text": "file_pattern",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "fitstool",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "This program will execute an RFI strategy as can be created with the RFI gui and executes it on one or several   observations.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "This program will execute an RFI strategy as can be created with the RFI gui and executes it on one or several   observations.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/owlcat:1.2.5-1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " flag-ms.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of MS to be flagged",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "channel selection: single number or start:end[:step] to select channels start through end-1, or start~end[:step] to select channels start through end, with an optional stepping.",
               "name": "channels",
               "readonly": false,
               "text": "channels",
               "type": "String",
               "value": null
            },
            {
               "description": "timeslot selection: single number or start:end to select timeslots start through end-1, or start~end to select timeslots start through end.",
               "name": "timeslots",
               "readonly": false,
               "text": "timeslots",
               "type": "String",
               "value": null
            },
            {
               "description": "multiplies the timeslot numbers given to -T by the given factor.",
               "name": "timeslot-multiplier",
               "readonly": false,
               "text": "timeslot-multiplier",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "correlation selection. Use comma-separated list of correlation indices.",
               "name": "corrs",
               "readonly": false,
               "text": "corrs",
               "type": "String",
               "value": null
            },
            {
               "description": "station (=antenna) selection. Use comma-separated list of station indices.",
               "name": "stations",
               "readonly": false,
               "text": "stations",
               "type": "String",
               "value": null
            },
            {
               "description": "interferometer selection.",
               "name": "ifrs",
               "readonly": false,
               "text": "ifrs",
               "type": "String",
               "value": null
            },
            {
               "description": "DATA_DESC_ID selection. Single number, or comma-separated list.",
               "name": "ddid",
               "readonly": false,
               "text": "ddid",
               "type": "String",
               "value": null
            },
            {
               "description": "FIELD_ID selection. Single number, or comma-separated list.",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Additional TaQL selection to restrict subset. Selection by data value",
               "name": "taql",
               "readonly": false,
               "text": "taql",
               "type": "String",
               "value": null
            },
            {
               "description": "select on abs(data)>X",
               "name": "above",
               "readonly": false,
               "text": "above",
               "type": "Float",
               "value": null
            },
            {
               "description": "select on abs(data)<X",
               "name": "below",
               "readonly": false,
               "text": "below",
               "type": "Float",
               "value": null
            },
            {
               "description": "select on invalid data (NaN or infinite)",
               "name": "nan",
               "readonly": false,
               "text": "nan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "select on mean(abs(data))>X, where mean is over frequencies",
               "name": "fm-above",
               "readonly": false,
               "text": "fm-above",
               "type": "Float",
               "value": null
            },
            {
               "description": "select on mean(abs(data))<X, where mean is over frequencies",
               "name": "fm-below=X",
               "readonly": false,
               "text": "fm-below=X",
               "type": "Float",
               "value": null
            },
            {
               "description": "data column for --above/--below/--nan options.",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": "CORRECTED_DATA"
            },
            {
               "description": "flags to apply to data column (when e.g. computing mean). Default is ALL. See below for details on specifying flags.",
               "name": "data-flagmask",
               "readonly": false,
               "text": "data-flagmask",
               "type": "String",
               "value": null
            },
            {
               "description": "Selects if any of the specified flags are raised. For this and all other options taking a FLAGS argument, FLAGS can be a flagset name or an integer bitmask (if bitflags are in use -- see also the -l/--list option). Prefix the bitmask by '0x' to use hex. Append a '+L' to include legacy boolean FLAG/FLAG_ROW columns. Use 'all' for all bitflags, and 'ALL' for all bitflags plus legacy flags (equivalent to 'all+L'). FLAGS may also be a comma-separated list of any of the above terms.",
               "name": "flagged-any",
               "readonly": false,
               "text": "flagged-any",
               "type": "String",
               "value": null
            },
            {
               "description": "Selects if all of the specified flags are raised",
               "name": "flagged-all",
               "readonly": false,
               "text": "flagged-all",
               "type": "String",
               "value": null
            },
            {
               "description": "Selects if none of the specified flags are raised",
               "name": "flagged-none",
               "readonly": false,
               "text": "flagged-none",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply selection to all correlations if at least one is selected",
               "name": "extend-all-corr",
               "readonly": false,
               "text": "extend-all-corr",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "for 'flag' option only: if a named flagset doesn't exist, creates it. Without this option, an error is reported",
               "name": "create",
               "readonly": false,
               "text": "create",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Raise the specified FLAGS",
               "name": "flag",
               "readonly": false,
               "text": "flag",
               "type": "String",
               "value": null
            },
            {
               "description": "Clear the specified flags",
               "name": "unflag",
               "readonly": false,
               "text": "unflag",
               "type": "String",
               "value": null
            },
            {
               "description": "Fills legacy FLAG/FLAG_ROW columns using the specified FLAGS. When -f/--flag or -u/--unflag or -r/--remove is used, legacy flags are implicitly reset using all bitflags: use '-g -' to skip this step. You may also use this option on its own to reset legacy flags (within the specified data subset) using some bitmask. Use '-g 0' to clear legacy flags. -c, --create for -f/--flag option only: if a named flagset doesn't exist, creates it. Without this option, an error is reported.",
               "name": "fill-legacy",
               "readonly": false,
               "text": "fill-legacy",
               "type": "String",
               "value": null
            },
            {
               "description": "lists various info about the MS, including its flagsets.",
               "name": "list",
               "readonly": false,
               "text": "list",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "prints per-flagset flagging stats.",
               "name": "stats",
               "readonly": false,
               "text": "stats",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Unflags and removes named flagset(s). You can use a comma-separated list.",
               "name": "remove",
               "readonly": false,
               "text": "remove",
               "type": "String",
               "value": null
            },
            {
               "description": "exports all flags to flag file. FILENAME may end with .gz to produce a gzip-compressed file. If any flagging actions are specified, these will be done before the export.",
               "name": "export",
               "readonly": false,
               "text": "export",
               "type": "String",
               "value": null
            },
            {
               "description": "Imports flags from flag file. If any flagging actions are specified, these will be done after the import.",
               "name": "import",
               "readonly": false,
               "text": "import",
               "type": "String",
               "value": null
            },
            {
               "description": "Verbosity level for messages. Higher is more verbose",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "adds timestamps to verbosity messages.",
               "name": "timestamps",
               "readonly": false,
               "text": "timestamps",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of rows to process at once. Set to higher values if you have RAM to spare.",
               "name": "chunk-size",
               "readonly": false,
               "text": "chunk-size",
               "type": "Integer",
               "value": 20000
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "flagms",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Extract flag statistics for a set of fields and antennas from an MS",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Extract flag statistics for a set of fields and antennas from an MS",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/msutils:1.6.9"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " msutils"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS name",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Output file (JSON format)",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Field(s)",
               "name": "fields",
               "readonly": false,
               "text": "fields",
               "type": "String",
               "value": null
            },
            {
               "description": "Antennas",
               "name": "antennas",
               "readonly": false,
               "text": "antennas",
               "type": "String",
               "value": null
            },
            {
               "description": "Plot flag statistic summary",
               "name": "plot",
               "readonly": false,
               "text": "plot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Output plots html file",
               "name": "htmlfile",
               "readonly": false,
               "text": "htmlfile",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "flagstats",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Image and deconvolve a measurement set (MS)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Image and deconvolve a measurement set (MS)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casarest:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " lwimager"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS to be imaged and/or deconvolved",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix for output images. If not specified, will use the basename of MS.",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Column to be imaged. Note that you can only make a clean (or restored) image from the CORRECTED_DATA column",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": "CORRECTED_DATA"
            },
            {
               "description": "Image size in pixels",
               "name": "npix",
               "readonly": false,
               "text": "npix",
               "type": "Integer",
               "value": 2048
            },
            {
               "description": "Size of a pixel in arcsec. But can also be specified as '2arcsec/2armnin etc.",
               "name": "cellsize",
               "readonly": false,
               "text": "cellsize",
               "type": "String",
               "value": "2arcsec"
            },
            {
               "description": "Visibility weighting mode",
               "name": "weight",
               "readonly": false,
               "text": "weight",
               "type": "String",
               "value": "briggs"
            },
            {
               "description": "Briggs robustness parameter",
               "name": "robust",
               "readonly": false,
               "text": "robust",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Name of prior image file",
               "name": "prior",
               "readonly": false,
               "text": "prior",
               "type": "String",
               "value": null
            },
            {
               "description": "Imaging mode",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "mfs"
            },
            {
               "description": "Apply gaussian tapering filter; specify as major,minor,pa",
               "name": "filter",
               "readonly": false,
               "text": "filter",
               "type": "String",
               "value": null
            },
            {
               "description": "Specify clean restoring beam; specify as major axis,minor axis,position angle with unitsi",
               "name": "clean_beam",
               "readonly": false,
               "text": "clean_beam",
               "type": "String",
               "value": null
            },
            {
               "description": "Field of view size for uniform/briggs weighting, if different from image size",
               "name": "weight_fov",
               "readonly": false,
               "text": "weight_fov",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise (in Jy) for briggsabs weightingfloat",
               "name": "noise",
               "readonly": false,
               "text": "noise",
               "type": "Float",
               "value": null
            },
            {
               "description": "if >0 specifies nr of convolution functions to use in W-projection",
               "name": "wprojplanes",
               "readonly": false,
               "text": "wprojplanes",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "padding factor in image plane (>=1.0)",
               "name": "padding",
               "readonly": false,
               "text": "padding",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum size of gridding cache (in MB)",
               "name": "cachesize",
               "readonly": false,
               "text": "cachesize",
               "type": "Integer",
               "value": 512
            },
            {
               "description": "Stokes parameters to image",
               "name": "stokes",
               "readonly": false,
               "text": "stokes",
               "type": "String",
               "value": "I"
            },
            {
               "description": "Number of facets in x or y",
               "name": "nfacets",
               "readonly": false,
               "text": "nfacets",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Phase center to be used (e.g. 'j2000,05h30m,-30.2deg')",
               "name": "phasecenter",
               "readonly": false,
               "text": "phasecenter",
               "type": "String",
               "value": null
            },
            {
               "description": "Field ID",
               "name": "field-id",
               "readonly": false,
               "text": "field-id",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Spectral window ID(s)",
               "name": "spw-id",
               "readonly": false,
               "text": "spw-id",
               "type": "String",
               "value": null
            },
            {
               "description": "Frequency channel mode",
               "name": "chanmode",
               "readonly": false,
               "text": "chanmode",
               "type": "String",
               "value": "channel"
            },
            {
               "description": "number of frequency channels to select from each spectral window (one number per spw). Comma separated string",
               "name": "nchan",
               "readonly": false,
               "text": "nchan",
               "type": "String",
               "value": 1
            },
            {
               "description": "First frequency channel per each spw (0-relative). Comma separated string",
               "name": "chanstart",
               "readonly": false,
               "text": "chanstart",
               "type": "String",
               "value": 0
            },
            {
               "description": "frequency channel step per each spw. Comma separated string",
               "name": "chanstep",
               "readonly": false,
               "text": "chanstep",
               "type": "String",
               "value": 1
            },
            {
               "description": "Number of frequency channels in image",
               "name": "img_nchan",
               "readonly": false,
               "text": "img_nchan",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "first frequency channel in image (0-relative)",
               "name": "img_chanstart",
               "readonly": false,
               "text": "img_chanstart",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "frequency channel step in image",
               "name": "img_chanstep",
               "readonly": false,
               "text": "img_chanstep",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "UV range filter for MS",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "TaQL selection string for MS",
               "name": "select",
               "readonly": false,
               "text": "select",
               "type": "String",
               "value": null
            },
            {
               "description": "Operation",
               "name": "operation",
               "readonly": false,
               "text": "operation",
               "type": "String",
               "value": "image"
            },
            {
               "description": "Number of clean iterations",
               "name": "clean_iterations",
               "readonly": false,
               "text": "clean_iterations",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Loop gain for cleaning",
               "name": "gain",
               "readonly": false,
               "text": "gain",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "Flux level at which to stop cleaning. Assumed to be in Jy if units not specified.",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Noise image to compute sigma for stopping threshold (in case specified it will replace threshold)",
               "name": "noise_image",
               "readonly": false,
               "text": "noise_image",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise sigma for stopping deconvolution in the case where noise_image is provided (new thresh = sigma*noise_image.std())",
               "name": "noise_sigma",
               "readonly": false,
               "text": "noise_sigma",
               "type": "Float",
               "value": 3
            },
            {
               "description": "Target flux for maximum entropy",
               "name": "targetflux",
               "readonly": false,
               "text": "targetflux",
               "type": "Float",
               "value": null
            },
            {
               "description": "Deviation for maximum entropy",
               "name": "sigma",
               "readonly": false,
               "text": "sigma",
               "type": "Float",
               "value": null
            },
            {
               "description": "Keep clean model fixed",
               "name": "fixed",
               "readonly": false,
               "text": "fixed",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Fill MODEL_DATA column with clean model visibilities, else keeps model in memory",
               "name": "fillmodel",
               "readonly": false,
               "text": "fillmodel",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Constrain image to match target flux? For max entropy",
               "name": "constrainflux",
               "readonly": false,
               "text": "constrainflux",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Should FITS image spectral axis be velocity or frequency",
               "name": "prefervelocity",
               "readonly": false,
               "text": "prefervelocity",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Name of the mask to use in cleaning",
               "name": "mask",
               "readonly": false,
               "text": "mask",
               "type": "String",
               "value": null
            },
            {
               "description": "Bottom left corner of mask region",
               "name": "maskblc",
               "readonly": false,
               "text": "maskblc",
               "type": "String",
               "value": null
            },
            {
               "description": "Top right corner of mask region",
               "name": "masktrc",
               "readonly": false,
               "text": "masktrc",
               "type": "String",
               "value": null
            },
            {
               "description": "Scales for multiscale clean",
               "name": "nscales",
               "readonly": false,
               "text": "nscales",
               "type": "Integer",
               "value": null
            },
            {
               "description": "User-defined scales for multiscale clean. Comma separated string",
               "name": "uservector",
               "readonly": false,
               "text": "uservector",
               "type": "String",
               "value": null
            },
            {
               "description": "Value to store in mask region; if given, mask is created; if mask not exists, defaults to 1.0",
               "name": "maskvalue",
               "readonly": false,
               "text": "maskvalue",
               "type": "Float",
               "value": null
            },
            {
               "description": "Simulate a FITS image into MS",
               "name": "simulate_fits",
               "readonly": false,
               "text": "simulate_fits",
               "type": "String",
               "value": null
            },
            {
               "description": "Predict from FITS files in chunks in the frequency axis",
               "name": "chanchunk",
               "readonly": false,
               "text": "chanchunk",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Multi-field deconvolution parameter; see casapy's imager.setmfcontrol",
               "name": "cyclefactor",
               "readonly": false,
               "text": "cyclefactor",
               "type": "Float",
               "value": null
            },
            {
               "description": "multi-field deconvolution parameter; see casapy's imager.setmfcontrol",
               "name": "cyclespeedup",
               "readonly": false,
               "text": "cyclespeedup",
               "type": "Float",
               "value": null
            },
            {
               "description": "Multi-field deconvolution parameter; see casapy's imager.setmfcontrol",
               "name": "cyclemaxpsffraction",
               "readonly": false,
               "text": "cyclemaxpsffraction",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Multi-field deconvolution parameter; see casapy's imager.setmfcontrol",
               "name": "stoplargenegatives",
               "readonly": false,
               "text": "stoplargenegatives",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Multi-field deconvolution parameter; see casapy's imager.setmfcontrol",
               "name": "stoppointmode",
               "readonly": false,
               "text": "stoppointmode",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Convert output images to FITS files",
               "name": "port2fits",
               "readonly": false,
               "text": "port2fits",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Keep casa images when 'port2fits' is enabled",
               "name": "keep_casa_images",
               "readonly": false,
               "text": "keep_casa_images",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "lwimager",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "mProjectCube reprojects a single cube to the scale defined in a FITS header template file (read more about header templates here). The program produces a pair of files: the reprojected cube and an 'area' image consisting of the fraction input pixel sky area that went into each output pixel. The 'drizzle' algorithm is implemented. The algorithm proceeds by mapping pixel corners (as adjusted by drizzle, if called) from the input pixel space to the output pixel space, calculating overlap area with each output pixel, and accumulating an appropriate fraction of the input flux into the output cube pixels. In addition, the appropriate fraction of the input pixel area is accumulated into the area image pixels. Projection of points from input pixel space to output pixel space is calculated in two steps: first map from input pixel space to sky coordinates; second map from sky coordinates to output pixel space.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "mProjectCube reprojects a single cube to the scale defined in a FITS header template file (read more about header templates here). The program produces a pair of files: the reprojected cube and an 'area' image consisting of the fraction input pixel sky area that went into each output pixel. The 'drizzle' algorithm is implemented. The algorithm proceeds by mapping pixel corners (as adjusted by drizzle, if called) from the input pixel space to the output pixel space, calculating overlap area with each output pixel, and accumulating an appropriate fraction of the input flux into the output cube pixels. In addition, the appropriate fraction of the input pixel area is accumulated into the area image pixels. Projection of points from input pixel space to output pixel space is calculated in two steps: first map from input pixel space to sky coordinates; second map from sky coordinates to output pixel space.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/montage:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " mProjectCube"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input FITS file to be reprojected",
               "name": "in.fits",
               "readonly": false,
               "text": "in.fits",
               "type": "String",
               "value": null
            },
            {
               "description": "Path of output FITS file to be created.",
               "name": "out.fits",
               "readonly": false,
               "text": "out.fits",
               "type": "String",
               "value": null
            },
            {
               "description": "FITS header template to be used in generation of output image",
               "name": "hdr.template",
               "readonly": false,
               "text": "hdr.template",
               "type": "String",
               "value": null
            },
            {
               "description": "Processing is done utilizing the drizzle algorithm. factor is a floating point number; recommended drizzle factors are from 0.5 to 1.",
               "name": "factor",
               "readonly": false,
               "text": "factor",
               "type": "Float",
               "value": null
            },
            {
               "description": "Causes additional debugging information to be printed to stdout. Valid levels are 1-5 (for higher debugging levels, it is recommended to redirect the output to a file).",
               "name": "level",
               "readonly": false,
               "text": "level",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Use the specified FITS extension (default is to use the first HDU with image data)",
               "name": "hdu",
               "readonly": false,
               "text": "hdu",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply a correction factor of scale to each pixel.",
               "name": "scale",
               "readonly": false,
               "text": "scale",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Path to a weight map to be used when reading values from the input image.",
               "name": "weight",
               "readonly": false,
               "text": "weight",
               "type": "String",
               "value": null
            },
            {
               "description": "Use constant weight value for the whole image",
               "name": "fixed-weight",
               "readonly": false,
               "text": "fixed-weight",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Pixels with weights below threshold will be treated as blank.",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "Float",
               "value": null
            },
            {
               "description": "Makes the output region (originally defined in the header template) big enough to include all of the input images.",
               "name": "X",
               "readonly": false,
               "text": "X",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Process the data as total energy rather than the default energy density (scale values by relative pixel areas).",
               "name": "e",
               "readonly": false,
               "text": "e",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Output the full region requested even if there is a border of NULL values (default is to shrinkwrap to just the pixels with values).",
               "name": "f",
               "readonly": false,
               "text": "f",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "mProjectCube",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Combine FITS files into a mosaic",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Combine FITS files into a mosaic",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/montage:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " montage.mosiac"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "The directory containing the input FITS files",
               "name": "input_dir",
               "readonly": false,
               "text": "input_dir",
               "type": "String",
               "value": null
            },
            {
               "description": "The header to project to. If this is not specified, then an optimal header is chosen.",
               "name": "header",
               "readonly": false,
               "text": "header",
               "type": "String",
               "value": null
            },
            {
               "description": "The table file containing the list of input images. This can be specified to avoid recomputing it every time a mosaic is made from the same set of input files.",
               "name": "image_table",
               "readonly": false,
               "text": "image_table",
               "type": "String",
               "value": null
            },
            {
               "description": "Montage output directory",
               "name": "output_dir",
               "readonly": false,
               "text": "output_dir",
               "type": "String",
               "value": null
            },
            {
               "description": "Whether to use MPI whenever possible (requires the MPI-enabled Montage binaries to be installed).",
               "name": "mpi",
               "readonly": false,
               "text": "mpi",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "The number of processes to use if `mpi` is set to `True`",
               "name": "n_proc",
               "readonly": false,
               "text": "n_proc",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Whether to include a background-matching step",
               "name": "background_match",
               "readonly": false,
               "text": "background_match",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "A list of images to use (useful if not all the files inside `input_dir` should be combined).",
               "name": "imglist",
               "readonly": false,
               "text": "imglist",
               "type": "String",
               "value": null
            },
            {
               "description": "How to combine the images",
               "name": "combine",
               "readonly": false,
               "text": "combine",
               "type": "String",
               "value": null
            },
            {
               "description": "Whether the output mosaic should match the input header exactly, or whether the mosaic should be trimmed if possible.",
               "name": "exact_size",
               "readonly": false,
               "text": "exact_size",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Whether to remove any temporary directories used for mosaicking",
               "name": "cleanup",
               "readonly": false,
               "text": "cleanup",
               "type": "Boolean",
               "value": "true"
            },
            {
               "description": "BITPIX value for the ouput FITS file (default is -32). Possible values are: 8 (character or unsigned binary integer), 16 (16-bit integer), 32 (32-bit integer), -32 (single precision floating point), -64 (double precision floating point).",
               "name": "bitpix",
               "readonly": false,
               "text": "bitpix",
               "type": "Integer",
               "value": null
            },
            {
               "description": "When doing background matching, whether to only allow changes in the level of frames, not the slope.",
               "name": "level_only",
               "readonly": false,
               "text": "level_only",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "montage",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "A package that allows continuum (2D) images and spectral (3D) images to be mosaicked together, using montage commands.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "A package that allows continuum (2D) images and spectral (3D) images to be mosaicked together, using montage commands.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/montage:1.2.4"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " MosaicSteward"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "State 'continuum' or 'spectral' as the type of mosaic to be made.",
               "name": "mosaic-type",
               "readonly": false,
               "text": "mosaic-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Include this argument if you wish to use montage for regridding the images and beams (if they have not already been created).",
               "name": "domontage",
               "readonly": false,
               "text": "domontage",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "The cutoff in the primary beam to use (assuming a Gaussian at the moment). E.g. The default of 0.1 means going down to the 10 percent level for each pointing.",
               "name": "cutoff",
               "readonly": false,
               "text": "cutoff",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "The prefix to be used for output files.",
               "name": "name",
               "readonly": false,
               "text": "name",
               "type": "String",
               "value": "mymosaic"
            },
            {
               "description": "The filenames of each target/pointing image to be mosaicked. A suffix of 'image.fits' is expected, and this is replaced by 'pb.fits' in order to locate the corresponding beams (which are also required as input).",
               "name": "target-images",
               "readonly": false,
               "text": "target-images",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "mosaicsteward",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Tools for manipulating measurement sets (MSs)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Tools for manipulating measurement sets (MSs)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/msutils:1.4.6"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " msutils"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MSUtils command to execute",
               "name": "command",
               "readonly": false,
               "text": "command",
               "type": "String",
               "value": null
            },
            {
               "description": "MS name",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Column name",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": null
            },
            {
               "description": "Output file for MS summary (json format)",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            },
            {
               "description": "Display MS summary to stdout",
               "name": "display",
               "readonly": false,
               "text": "display",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Shape of column to add to MS",
               "name": "shape",
               "readonly": false,
               "text": "shape",
               "type": "String",
               "value": null
            },
            {
               "description": "Column data type",
               "name": "valuetype",
               "readonly": false,
               "text": "valuetype",
               "type": "String",
               "value": null
            },
            {
               "description": "Data description type for data in column to be added",
               "name": "data_desc_type",
               "readonly": false,
               "text": "data_desc_type",
               "type": "String",
               "value": "array"
            },
            {
               "description": "Value to initialize new data column with",
               "name": "init_with",
               "readonly": false,
               "text": "init_with",
               "type": "Float",
               "value": true
            },
            {
               "description": "First column to add/subtract",
               "name": "col1",
               "readonly": false,
               "text": "col1",
               "type": "String",
               "value": null
            },
            {
               "description": "Second column to add/subtract",
               "name": "col2",
               "readonly": false,
               "text": "col2",
               "type": "String",
               "value": null
            },
            {
               "description": "Columns to sum",
               "name": "cols",
               "readonly": false,
               "text": "cols",
               "type": "String",
               "value": null
            },
            {
               "description": "Subtract 'col2' from 'col1' ",
               "name": "subtract",
               "readonly": false,
               "text": "subtract",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Column to copy data from",
               "name": "fromcol",
               "readonly": false,
               "text": "fromcol",
               "type": "String",
               "value": null
            },
            {
               "description": "Column to copy data to",
               "name": "tocol",
               "readonly": false,
               "text": "tocol",
               "type": "String",
               "value": null
            },
            {
               "description": "Add noise to MS. Will add to 'column/colname'",
               "name": "addnoise",
               "readonly": false,
               "text": "addnoise",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "System Equivalent Flux Density, in Jy. The noise will be calculated using this value",
               "name": "sefd",
               "readonly": false,
               "text": "sefd",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Add noise to data in this column",
               "name": "addToCol",
               "readonly": false,
               "text": "addToCol",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise in Jy to 'column/colname' data in Jy",
               "name": "noise",
               "readonly": false,
               "text": "noise",
               "type": "Float",
               "value": 0
            },
            {
               "description": "SPW ID",
               "name": "spw-id",
               "readonly": false,
               "text": "spw-id",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Verifies antenna Y positions in MS. If Y coordinate convention is wrong, either fixes the positions (fix=True) or raises an error. hemisphere=-1 makes it assume that the observatory is in the Western hemisphere, hemisphere=1 in the Eastern, or else tries to find observatory name using MS and pyrap.measure",
               "name": "verify-antpos",
               "readonly": false,
               "text": "verify-antpos",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Mode when estimating spectral weights. If mode=specs, then the weights will be based on the instrument spec sensitivity that is provided via the stats_data option",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "specs"
            },
            {
               "description": "Fit order for function used to smooth noise/weights",
               "name": "fit_order",
               "readonly": false,
               "text": "fit_order",
               "type": "Integer",
               "value": 9
            },
            {
               "description": "Function to use for smoothing the noise/weights",
               "name": "smooth",
               "readonly": false,
               "text": "smooth",
               "type": "String",
               "value": "polyn"
            },
            {
               "description": "File or array containing information about sensitivity as a function of frequency (in Hz). For MeerKAT use the string 'use_package_meerkat_spec' unless you have your own (updated) specs",
               "name": "stats_data",
               "readonly": false,
               "text": "stats_data",
               "type": "dtype",
               "value": "use_package_meekat_spec"
            },
            {
               "description": "Plot of estimated spectral noise/weights",
               "name": "plot_stats",
               "readonly": false,
               "text": "plot_stats",
               "type": "String",
               "value": null
            },
            {
               "description": "Save estimated noise/weights in MS",
               "name": "write_to_ms",
               "readonly": false,
               "text": "write_to_ms",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "columns to save noise and corresponding noise spectrum",
               "name": "noise_columns",
               "readonly": false,
               "text": "noise_columns",
               "type": "String",
               "value": [
                  "SIGMA",
                  "SIGMA_SPECTRUM"
               ]
            },
            {
               "description": "columns to save noise and corresponding noise spectrum",
               "name": "weight_columns",
               "readonly": false,
               "text": "weight_columns",
               "type": "String",
               "value": [
                  "WEIGHT",
                  "WEIGHT_SPECTRUM"
               ]
            },
            {
               "description": "Calibration table to plot",
               "name": "ctable",
               "readonly": false,
               "text": "ctable",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of the calibration table",
               "name": "tabtype",
               "readonly": false,
               "text": "tabtype",
               "type": "String",
               "value": null
            },
            {
               "description": "DPI for the gain plot",
               "name": "plot_dpi",
               "readonly": false,
               "text": "plot_dpi",
               "type": "Integer",
               "value": 600
            },
            {
               "description": "Scale for the subplots in the gain plot",
               "name": "subplot_scale",
               "readonly": false,
               "text": "subplot_scale",
               "type": "Integer",
               "value": 6
            },
            {
               "description": "Filename for gain plot",
               "name": "plot_file",
               "readonly": false,
               "text": "plot_file",
               "type": "String",
               "value": "meerkathi-gai-plot"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "msutils",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Convert HDF5 file(s) to MeasurementSet",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Convert HDF5 file(s) to MeasurementSet",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/katdal:1.6.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " mvftoms.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MVF (.rdb) file(s)",
               "name": "mvffiles",
               "readonly": false,
               "text": "mvffiles",
               "type": "String",
               "value": null
            },
            {
               "description": "archive URLs (including access tokens)",
               "name": "archive-url",
               "readonly": false,
               "text": "archive-url",
               "type": "String",
               "value": null
            },
            {
               "description": "Output MS",
               "name": "output-ms",
               "readonly": false,
               "text": "output-ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Delete MS file(s) if they already exist",
               "name": "overwrite",
               "readonly": false,
               "text": "overwrite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Produce quad circular polarisation. (RR, RL, LR, LL) *** Currently just relabels the linear pols ****",
               "name": "circular",
               "readonly": false,
               "text": "circular",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Reference antenna (default is first one used by script)",
               "name": "ref-ant",
               "readonly": false,
               "text": "ref-ant",
               "type": "String",
               "value": null
            },
            {
               "description": "Tar-ball the MS",
               "name": "tar",
               "readonly": false,
               "text": "tar",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Produce a full polarisation MS in CASA canonical order (HH, HV, VH, VV). Default is to produce HH,VV only",
               "name": "full-pol",
               "readonly": false,
               "text": "full-pol",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "More verbose progress information",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Use W term to stop fringes for each baseline",
               "name": "stop-w",
               "readonly": false,
               "text": "stop-w",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Select polarisation products to include in MS from HH,VV,HV,VH, default is all available from HH,VV",
               "name": "pols-to-use",
               "readonly": false,
               "text": "pols-to-use",
               "type": "String",
               "value": null
            },
            {
               "description": "Keep spaces in source names, default removes spaces",
               "name": "keep-spaces",
               "readonly": false,
               "text": "keep-spaces",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Print command to convert MS to miriad uvfits in casapy",
               "name": "uvfits",
               "readonly": false,
               "text": "uvfits",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "MeasurementSet will exclude autocorrelation data",
               "name": "no-auto",
               "readonly": false,
               "text": "no-auto",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Range of frequency channels to keep (zero-based inclusive 'first_chan,last_chan', default is all channels)",
               "name": "channel-range",
               "readonly": false,
               "text": "channel-range",
               "type": "String",
               "value": null
            },
            {
               "description": "Flag elevations outside the range 'lowest_elevation,highest_elevation'",
               "name": "elevation-range",
               "readonly": false,
               "text": "elevation-range",
               "type": "String",
               "value": null
            },
            {
               "description": "Add MODEL_DATA and CORRECTED_DATA columns to the MS. MODEL_DATA initialised to unity amplitude zero phase, CORRECTED_DATA initialised to DATA.",
               "name": "model-data",
               "readonly": false,
               "text": "model-data",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "List of online flags to apply (from 'static,cam,data_lost,ingest_rfi,cal_rfi,predicted_rfi', default is all flags, '' will apply no flags)",
               "name": "flags",
               "readonly": false,
               "text": "flags",
               "type": "String",
               "value": null
            },
            {
               "description": "Output time averaging interval in seconds, default is no averaging.",
               "name": "dumptime",
               "readonly": false,
               "text": "dumptime",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Bin width for channel averaging in channels, default is no averaging",
               "name": "chanbin",
               "readonly": false,
               "text": "chanbin",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Discard the first N dumps (which are frequently incomplete)",
               "name": "quack",
               "readonly": false,
               "text": "quack",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Folder contaning loggin credintials",
               "name": "credentials_dir",
               "readonly": false,
               "text": "credentials_dir",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "mvftoms",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Plots elevation tracks from an measurement set",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Plots elevation tracks from an measurement set",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/owlcat:1.6.6"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " plot-elevation-tracks.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of Measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "lists fields found in MS, then exits",
               "name": "list",
               "readonly": false,
               "text": "list",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Output filename",
               "name": "output-name",
               "readonly": false,
               "text": "output-name",
               "type": "String",
               "value": "lst-elev.png"
            },
            {
               "description": "Display plot on screen",
               "name": "display",
               "readonly": false,
               "text": "display",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "owlcat_plotelev",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Routines for automated post-1GC error detection and mitigation",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Routines for automated post-1GC error detection and mitigation",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/politsiyakat:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " python -m politsiyakat"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Data column in MS",
               "name": "data_column",
               "readonly": false,
               "text": "data_column",
               "type": "String",
               "value": "DATA"
            },
            {
               "description": "Field(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibrator Field(s), subset of 'field'",
               "name": "cal_field",
               "readonly": false,
               "text": "cal_field",
               "type": "String",
               "value": null
            },
            {
               "description": "Output directory",
               "name": "output_dir",
               "readonly": false,
               "text": "output_dir",
               "type": "String",
               "value": "./"
            },
            {
               "description": "Number of ms rows to process on each run",
               "name": "nrows_chunk",
               "readonly": false,
               "text": "nrows_chunk",
               "type": "Integer",
               "value": 5000
            },
            {
               "description": "Scan to scan variation threshold",
               "name": "scan_to_scan_threshold",
               "readonly": false,
               "text": "scan_to_scan_threshold",
               "type": "Float",
               "value": 2.5
            },
            {
               "description": "antenna to group variation threshold",
               "name": "antenna_to_group_threshold",
               "readonly": false,
               "text": "antenna_to_group_threshold",
               "type": "Float",
               "value": 6
            },
            {
               "description": "plot dpi",
               "name": "dpi",
               "readonly": false,
               "text": "dpi",
               "type": "Float",
               "value": 300
            },
            {
               "description": "subplot size",
               "name": "plot_size",
               "readonly": false,
               "text": "plot_size",
               "type": "Float",
               "value": 6.0
            },
            {
               "description": "Maximum number of io threads to use",
               "name": "nio_threads",
               "readonly": false,
               "text": "nio_threads",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Maximum number of process threads to use",
               "name": "nproc_threads",
               "readonly": false,
               "text": "nproc_threads",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "simulate, output diagnostics don't flag",
               "name": "simulate",
               "readonly": false,
               "text": "simulate",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "politsiyakat_autocorr_amp",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Routines for automated post-1GC error detection and mitigation",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Routines for automated post-1GC error detection and mitigation",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/politsiyakat:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " python -m politsiyakat"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Measurement set",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Data column in MS",
               "name": "data_column",
               "readonly": false,
               "text": "data_column",
               "type": "String",
               "value": "DATA"
            },
            {
               "description": "Field(s)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": null
            },
            {
               "description": "Calibrator Field(s), subset of 'field'",
               "name": "cal_field",
               "readonly": false,
               "text": "cal_field",
               "type": "String",
               "value": null
            },
            {
               "description": "Output directory",
               "name": "output_dir",
               "readonly": false,
               "text": "output_dir",
               "type": "String",
               "value": "./"
            },
            {
               "description": "Number of ms rows to process on each run",
               "name": "nrows_chunk",
               "readonly": false,
               "text": "nrows_chunk",
               "type": "Integer",
               "value": 5000
            },
            {
               "description": "Scan to scan variation threshold",
               "name": "scan_to_scan_threshold",
               "readonly": false,
               "text": "scan_to_scan_threshold",
               "type": "Float",
               "value": 2.5
            },
            {
               "description": "baseline to group variation threshold",
               "name": "baseline_to_group_threshold",
               "readonly": false,
               "text": "baseline_to_group_threshold",
               "type": "Float",
               "value": 3
            },
            {
               "description": "plot dpi",
               "name": "dpi",
               "readonly": false,
               "text": "dpi",
               "type": "Float",
               "value": 300
            },
            {
               "description": "subplot size",
               "name": "plot_size",
               "readonly": false,
               "text": "plot_size",
               "type": "Float",
               "value": 6.0
            },
            {
               "description": "Maximum number of io threads to use",
               "name": "nio_threads",
               "readonly": false,
               "text": "nio_threads",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Maximum number of process threads to use",
               "name": "nproc_threads",
               "readonly": false,
               "text": "nproc_threads",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "simulate, output diagnostics don't flag",
               "name": "simulate",
               "readonly": false,
               "text": "simulate",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "politsiyakat_cal_phase",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Source finding in radio images",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Source finding in radio images",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/pybdsf:1.6.9"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " python"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input image file name",
               "name": "image",
               "readonly": false,
               "text": "image",
               "type": "String",
               "value": null
            },
            {
               "description": "Use adaptive rms_box when determining rms and mean maps",
               "name": "adaptive_rms_box",
               "readonly": false,
               "text": "adaptive_rms_box",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Sources with pixels above adaptive_thresh*clipped_rms will be considered as bright sources. Minimum is 10.0.",
               "name": "adaptive_thresh",
               "readonly": false,
               "text": "adaptive_thresh",
               "type": "Float",
               "value": null
            },
            {
               "description": "Box size, step size for rms/mean map calculation near bright sources. Specify as (box, step) in pixels.",
               "name": "rms_box_bright",
               "readonly": false,
               "text": "rms_box_bright",
               "type": "String",
               "value": null
            },
            {
               "description": "Decompose Gaussian residual image into multiple scales",
               "name": "atrous_do",
               "readonly": false,
               "text": "atrous_do",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Perform source extraction on each wavelet scale",
               "name": "atrous_bdsm_do",
               "readonly": false,
               "text": "atrous_bdsm_do",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Max allowed wavelength order, 0 => calculate inside program",
               "name": "atrous_jmax",
               "readonly": false,
               "text": "atrous_jmax",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Low pass filter, either 'b3' or 'tr', for B3 spline or Triangle",
               "name": "atrous_lpf",
               "readonly": false,
               "text": "atrous_lpf",
               "type": "String",
               "value": "b3"
            },
            {
               "description": "Restrict wavelet Gaussians to islands found in original image",
               "name": "atrous_orig_isl",
               "readonly": false,
               "text": "atrous_orig_isl",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Fit to the sum of remaining wavelet scales",
               "name": "atrous_sum",
               "readonly": false,
               "text": "atrous_sum",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Use fast SciPy FFT for convolution",
               "name": "use_scipy_fft",
               "readonly": false,
               "text": "use_scipy_fft",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "FWHM of restoring beam. Specify as (maj, min, pos ang E of N) in degrees. E.g., beam = (0.06, 0.02, 13.3). None => get from header",
               "name": "beam",
               "readonly": false,
               "text": "beam",
               "type": "String",
               "value": null
            },
            {
               "description": "Show options for Gaussian flagging",
               "name": "flagging_opts",
               "readonly": false,
               "text": "flagging_opts",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag Gaussian if centre is outside border - flag_bordersize pixels",
               "name": "flag_bordersize",
               "readonly": false,
               "text": "flag_bordersize",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Flag Gaussian if area greater than flag_maxsize_bm times beam area",
               "name": "flag_maxsize_bm",
               "readonly": false,
               "text": "flag_maxsize_bm",
               "type": "Float",
               "value": 25
            },
            {
               "description": "Flag Gaussian if fwhm-contour times factor extends beyond island",
               "name": "flag_maxsize_fwhm",
               "readonly": false,
               "text": "flag_maxsize_fwhm",
               "type": "Float",
               "value": 0.5
            },
            {
               "description": "Flag Gaussian if x, y bounding box around sigma-contour is factor times island bbox",
               "name": "flag_maxsize_isl",
               "readonly": false,
               "text": "flag_maxsize_isl",
               "type": "Float",
               "value": 2.0
            },
            {
               "description": "Flag Gaussian if peak is greater than flag_maxsnr times image value at the peak",
               "name": "flag_maxsnr",
               "readonly": false,
               "text": "flag_maxsnr",
               "type": "Float",
               "value": 1.5
            },
            {
               "description": "Flag Gaussian if peak is greater than flag_maxsnr times image value at the peak",
               "name": "flag_minsize_bm",
               "readonly": false,
               "text": "flag_minsize_bm",
               "type": "Float",
               "value": 0.7
            },
            {
               "description": "Flag Gaussian if peak is less than flag_minsnr times thresh_pix times local rms",
               "name": "flag_minsnr",
               "readonly": false,
               "text": "flag_minsnr",
               "type": "Float",
               "value": 0.6
            },
            {
               "description": "Flag sources smaller than flag_minsize_bm times beam area",
               "name": "flag_smallsrc",
               "readonly": false,
               "text": "flag_smallsrc",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Frequency in Hz of input image. E.g., frequency = 74e6. None => get from header.",
               "name": "frequency",
               "readonly": false,
               "text": "frequency",
               "type": "Float",
               "value": null
            },
            {
               "description": "Background mean map: 'default' => calc whether to use or not, 'zero' => 0, 'const' => clipped mean, 'map' => use 2-D map",
               "name": "mean_map",
               "readonly": false,
               "text": "mean_map",
               "type": "String",
               "value": "default"
            },
            {
               "description": "If True and beam_spectrum is None, then assume header beam is for median frequency and scales with frequency for channels",
               "name": "beam_sp_derive",
               "readonly": false,
               "text": "beam_sp_derive",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Get beams for each channel in FITS header. Eg. BMAJ1, BMAJ1, BPA1; BMAJ2, BMIN2, BPA2",
               "name": "multi_chan_beam",
               "readonly": false,
               "text": "multi_chan_beam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "FWHM of synthesized beam per channel. Specify as [(bmaj_ch1, bmin_ch1, bpa_ch1), (bmaj_ch2, bmin_ch2, bpa_ch2), etc.] in degrees. E.g., beam_spectrum = [(0.01, 0.01, 45.0), (0.02,0.01, 34.0)] for two channels. None => all equal to beam",
               "name": "beam_spectrum",
               "readonly": false,
               "text": "beam_spectrum",
               "type": "String",
               "value": null
            },
            {
               "description": "List of channels to average if collapse_mode = 'average', starting from 0. E.g., collapse_av = [0, 1, 5]. [] => all",
               "name": "collapse_av",
               "readonly": false,
               "text": "collapse_av",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of the channel for source extraction, if collapse_mode = 'single', starting from 0",
               "name": "collapse_ch0",
               "readonly": false,
               "text": "collapse_ch0",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Collapse method: 'average' or 'single'. Average channels or take single channel to perform source detection on",
               "name": "collapse_mode",
               "readonly": false,
               "text": "collapse_mode",
               "type": "String",
               "value": "average"
            },
            {
               "description": "Weighting: 'unity' or 'rms'. Average channels with weights = 1 or 1/rms_clip^2 if collapse_mode = 'average'",
               "name": "collapse_wt",
               "readonly": false,
               "text": "collapse_wt",
               "type": "String",
               "value": "unity"
            },
            {
               "description": "Frequency in Hz of channels in input image when more than one channel is present. E.g., frequency_sp = [74e6, 153e6]. None => get from header",
               "name": "frequency_sp",
               "readonly": false,
               "text": "frequency_sp",
               "type": "String",
               "value": null
            },
            {
               "description": "Box size, step size for rms/mean map calculation. Specify as (box, step) in pixels. E.g., rms_box = (40, 10) => box of 40x40 pixels, step of 10 pixels. None => calculate inside program",
               "name": "rms_box",
               "readonly": false,
               "text": "rms_box",
               "type": "String",
               "value": null
            },
            {
               "description": "Show output options",
               "name": "output_opts",
               "readonly": false,
               "text": "output_opts",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Directory of input FITS files. If not set, get from filename",
               "name": "indir",
               "readonly": false,
               "text": "indir",
               "type": "String",
               "value": null
            },
            {
               "description": "'overwrite'/'append': If output_all=True, delete existing files or append a new directory",
               "name": "opdir_overwrite",
               "readonly": false,
               "text": "opdir_overwrite",
               "type": "String",
               "value": "overwrite"
            },
            {
               "description": "Write out all files automatically to directory 'filename_pybdsm'",
               "name": "output_all",
               "readonly": false,
               "text": "output_all",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Print basic timing information",
               "name": "print_timing",
               "readonly": false,
               "text": "print_timing",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Suppress text output to screen. Output is still sent to the log file as usual",
               "name": "quiet",
               "readonly": false,
               "text": "quiet",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save background mean image as fits file",
               "name": "savefits_meanim",
               "readonly": false,
               "text": "savefits_meanim",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save norm image as fits file",
               "name": "savefits_normim",
               "readonly": false,
               "text": "savefits_normim",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save island rank image as fits file",
               "name": "savefits_rankim",
               "readonly": false,
               "text": "savefits_rankim",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save residual image as fits file",
               "name": "savefits_residim",
               "readonly": false,
               "text": "savefits_residim",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save background rms image as fits file",
               "name": "savefits_rmsim",
               "readonly": false,
               "text": "savefits_rmsim",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Name of the run, to be prepended to the name of the output directory. E.g., solname='Run_1'",
               "name": "solnname",
               "readonly": false,
               "text": "solnname",
               "type": "String",
               "value": null
            },
            {
               "description": "Print out extra information during fitting",
               "name": "verbose_fitting",
               "readonly": false,
               "text": "verbose_fitting",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Find polarisation properties",
               "name": "polarisation_do",
               "readonly": false,
               "text": "polarisation_do",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Check the polarized intesity (PI) image for sources not found in Stokes I",
               "name": "pi_fit",
               "readonly": false,
               "text": "pi_fit",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Threshold for PI island boundary in number of sigma above the mean. Uses thresh_isl if not set.",
               "name": "pi_thresh_isl",
               "readonly": false,
               "text": "pi_thresh_isl",
               "type": "Float",
               "value": null
            },
            {
               "description": "Source detection threshold for PI image: threshold for the island peak in number of sigma above the mean. Uses thresh_pix if not set.",
               "name": "pi_thresh_pix",
               "readonly": false,
               "text": "pi_thresh_pix",
               "type": "Float",
               "value": null
            },
            {
               "description": "Calculate PSF variation across image",
               "name": "psf_vary_do",
               "readonly": false,
               "text": "psf_vary_do",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "FWHM of the PSF. Specify as (maj, min, pos ang E of N) in degrees. E.g., psf_fwhm = (0.06, 0.02, 13.3). Estimates from the image if not set",
               "name": "psf_fwhm",
               "readonly": false,
               "text": "psf_fwhm",
               "type": "String",
               "value": null
            },
            {
               "description": "SNR above which all sources are taken to be unresolved. E.g., psf_high_snr = 20.0. If unset, no such selection is made",
               "name": "psf_high_snr",
               "readonly": false,
               "text": "psf_high_snr",
               "type": "Float",
               "value": null
            },
            {
               "description": "0 = normal, 1 = 0 + round, 2 = LogSNR, 3 =SqrtLogSNR",
               "name": "psf_itess_method",
               "readonly": false,
               "text": "psf_itess_method",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Kappa for clipping for analytic fit",
               "name": "psf_kappa2",
               "readonly": false,
               "text": "psf_kappa2",
               "type": "Float",
               "value": 2.0
            },
            {
               "description": "Kappa for clipping within each bin",
               "name": "psf_nsig",
               "readonly": false,
               "text": "psf_nsig",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Factor of nyquist sample for binning bmaj, etc. vs SNR",
               "name": "psf_over",
               "readonly": false,
               "text": "psf_over",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Size of Gaussian to use for smoothing of interpolated images in arcsec. If not set, no smoothing.",
               "name": "psf_smooth",
               "readonly": false,
               "text": "psf_smooth",
               "type": "Float",
               "value": null
            },
            {
               "description": "Minimum SNR for statistics",
               "name": "psf_snrcut",
               "readonly": false,
               "text": "psf_snrcut",
               "type": "Float",
               "value": 10.0
            },
            {
               "description": "Unresolved sources with higher SNR taken for stacked psfs",
               "name": "psf_snrcutstack",
               "readonly": false,
               "text": "psf_snrcutstack",
               "type": "Float",
               "value": 15.0
            },
            {
               "description": "Fraction of SNR > snrcut as primary generators",
               "name": "psf_snrtop",
               "readonly": false,
               "text": "psf_snrtop",
               "type": "Float",
               "value": 0.15
            },
            {
               "description": "Restrict sources to be only of type 'S' ",
               "name": "psf_stype_only",
               "readonly": false,
               "text": "psf_stype_only",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Background rms map: True => use 2-D rms map; False => use constant rms; None => calculate inside program",
               "name": "rms_map",
               "readonly": false,
               "text": "rms_map",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Decompose islands into shapelets",
               "name": "shapelet_do",
               "readonly": false,
               "text": "shapelet_do",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Basis set for shapelet decomposition: 'cartesian' or 'polar'. Fair warning - polar mode was not implemented at the time of writing this info, use at your own risk.",
               "name": "shapelet_basis",
               "readonly": false,
               "text": "shapelet_basis",
               "type": "String",
               "value": "cartesian"
            },
            {
               "description": "Calculate shapelet coeff's by fitting ('fit') or integrating (None). WARNING: the default is 'fit', not none, so to run in default mode, explicitely set this to 'fit', else leave as is.",
               "name": "shapelet_fitmode",
               "readonly": false,
               "text": "shapelet_fitmode",
               "type": "String",
               "value": null
            },
            {
               "description": "Use Gaussian residual image for shapelet decomposition?",
               "name": "shapelet_gresid",
               "readonly": false,
               "text": "shapelet_gresid",
               "type": "Boolean",
               "value": "false"
            },
            {
               "description": "Type of thresholding: None => calculate inside program, 'fdr' => use false detection rate algorithm, 'hard' => use sigma clipping",
               "name": "thresh",
               "readonly": false,
               "text": "thresh",
               "type": "String",
               "value": null
            },
            {
               "description": "Threshold for the island boundary in number of sigma above the mean. Determines extent of island used for fitting",
               "name": "thresh_isl",
               "readonly": false,
               "text": "thresh_isl",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Source detection threshold: threshold for the island peak in number of sigma above the mean. If false detection rate thresholding is used, this value is ignored and thresh_pix is calculated inside the program",
               "name": "thresh_pix",
               "readonly": false,
               "text": "thresh_pix",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Radius of aperture in pixels inside which aperture fluxes are measured for each source. None => no aperture fluxes measured",
               "name": "aperture",
               "readonly": false,
               "text": "aperture",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Position the aperture (if aperture is not None) on: 'centroid' or 'peak' of the source.",
               "name": "aperture_posn",
               "readonly": false,
               "text": "aperture_posn",
               "type": "String",
               "value": "centroid"
            },
            {
               "description": "Limit in Jy/beam below which pixels are blanked. None => no such blanking is done",
               "name": "blank_limit",
               "readonly": false,
               "text": "blank_limit",
               "type": "Float",
               "value": null
            },
            {
               "description": "Theoretical estimate of number of beams per source. None => calculate inside program",
               "name": "bmpersrc_th",
               "readonly": false,
               "text": "bmpersrc_th",
               "type": "Float",
               "value": null
            },
            {
               "description": "Check for pixels outside the universe",
               "name": "check_outsideuniv",
               "readonly": false,
               "text": "check_outsideuniv",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Detection image file name used only for detecting islands of emission. Source measurement is still done on the main image",
               "name": "detection_image",
               "readonly": false,
               "text": "detection_image",
               "type": "String",
               "value": null
            },
            {
               "description": "Cache internally derived images to disk",
               "name": "do_cache",
               "readonly": false,
               "text": "do_cache",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "stimate uncertainties for 'M'-type sources using Monte Carlo method",
               "name": "do_mc_errors",
               "readonly": false,
               "text": "do_mc_errors",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Alpha for FDR algorithm for thresholds",
               "name": "fdr_alpha",
               "readonly": false,
               "text": "fdr_alpha",
               "type": "Float",
               "value": 0.05
            },
            {
               "description": "For thresh = None; if #false_pix / #source_pix < fdr_ratio, thresh = 'hard' else thresh = 'fdr'",
               "name": "fdr_ratio",
               "readonly": false,
               "text": "fdr_ratio",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "Sigma for clipping Gaussians while creating fitted image",
               "name": "fittedimage_clip",
               "readonly": false,
               "text": "fittedimage_clip",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "Fix major and minor axes and PA of Gaussians to beam?",
               "name": "fix_to_beam",
               "readonly": false,
               "text": "fix_to_beam",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Group all Gaussians in each island into a single source",
               "name": "group_by_isl",
               "readonly": false,
               "text": "group_by_isl",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Group Gaussians into sources using 'intensity' map or 'curvature' map",
               "name": "group_method",
               "readonly": false,
               "text": "group_method",
               "type": "String",
               "value": "intensity"
            },
            {
               "description": "Tolerance for grouping of Gaussians into sources: larger values will result in larger sources",
               "name": "group_tol",
               "readonly": false,
               "text": "group_tol",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "Initial guess for Gaussian parameters: 'default', 'simple', or 'nobeam'",
               "name": "ini_gausfit",
               "readonly": false,
               "text": "ini_gausfit",
               "type": "String",
               "value": "default"
            },
            {
               "description": "Method by which inital guess for fitting of Gaussians is chosen: 'intensity' or 'curvature'",
               "name": "ini_method",
               "readonly": false,
               "text": "ini_method",
               "type": "String",
               "value": "intensity"
            },
            {
               "description": "Kappa for clipped mean and rms. None => calculate inside program",
               "name": "kappa_clip",
               "readonly": false,
               "text": "kappa_clip",
               "type": "Float",
               "value": null
            },
            {
               "description": "Minimum number of pixels with emission per island (minimum is 6 pixels). None -> calculate inside program",
               "name": "minpix_isl",
               "readonly": false,
               "text": "minpix_isl",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Number of cores to use during fitting, None => use all",
               "name": "ncores",
               "readonly": false,
               "text": "ncores",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Find and fit peaks of large islands iteratively",
               "name": "peak_fit",
               "readonly": false,
               "text": "peak_fit",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If island size in beam area is more than this, attempt to fit peaks iteratively (if peak_fit = True). Min value is 30",
               "name": "peak_maxsize",
               "readonly": false,
               "text": "peak_maxsize",
               "type": "Float",
               "value": 30.0
            },
            {
               "description": "Value of constant rms in Jy/beam to use if rms_map = False. None => calculate inside program",
               "name": "rms_value",
               "readonly": false,
               "text": "rms_value",
               "type": "Float",
               "value": null
            },
            {
               "description": "Rank of the interpolating function for rms/mean map",
               "name": "spline_rank",
               "readonly": false,
               "text": "spline_rank",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Split island if it is too large, has a large convex deficiency and it opens well.",
               "name": "split_isl",
               "readonly": false,
               "text": "split_isl",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If island size in beam area is more than this, consider splitting island. Min value is 50",
               "name": "splitisl_maxsize",
               "readonly": false,
               "text": "splitisl_maxsize",
               "type": "Float",
               "value": 50.0
            },
            {
               "description": "List of source positions at which fitting is done.  E.g., src_ra_dec = [(197.1932, 47.9188), (196.5573, 42.4852)]",
               "name": "src_ra_dec",
               "readonly": false,
               "text": "src_ra_dec",
               "type": "String",
               "value": null
            },
            {
               "description": "Radius of the island (if src_ra_dec is not None) in pixels. None => radius is set to the FWHM of the beam major axis.",
               "name": "src_radius_pix",
               "readonly": false,
               "text": "src_radius_pix",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Stops after: 'isl' = island finding step or 'read' = image reading step",
               "name": "stop_at",
               "readonly": false,
               "text": "stop_at",
               "type": "String",
               "value": null
            },
            {
               "description": "Do source detection on only a part of the image. Specify as (xmin, xmax, ymin, ymax) in pixels. E.g., trim_box = (120, 840, 15, 895). None => use entire image",
               "name": "trim_box",
               "readonly": false,
               "text": "trim_box",
               "type": "String",
               "value": null
            },
            {
               "description": "Output file name. None => file is named automatically; 'SAMP' => send to SAMP hub (e.g., to TOPCAT, ds9, or Aladin)",
               "name": "outfile",
               "readonly": false,
               "text": "outfile",
               "type": "String",
               "value": null
            },
            {
               "description": "BBS format, type of patch to use: None => no patches. 'single' => all Gaussians in one patch. 'gaussian' => each Gaussian gets its own patch. 'source' => all Gaussians belonging to a single source are grouped into one patch. 'mask' => use mask file specified by bbs_patches_mask",
               "name": "bbs_patches",
               "readonly": false,
               "text": "bbs_patches",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of the mask file (of same size as input image) that defines the patches if bbs_patches = 'mask'",
               "name": "bbs_patches_mask",
               "readonly": false,
               "text": "bbs_patches_mask",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of catalog to write:  'gaul' - Gaussian list, 'srl' - source list (formed by grouping Gaussians), 'shap' - shapelet list (FITS format only)",
               "name": "catalog_type",
               "readonly": false,
               "text": "catalog_type",
               "type": "String",
               "value": "gaul"
            },
            {
               "description": "Overwrite existing file?",
               "name": "clobber",
               "readonly": false,
               "text": "clobber",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Correct source parameters for image projection (BBS format only)?",
               "name": "correct_proj",
               "readonly": false,
               "text": "correct_proj",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Format of output catalog",
               "name": "format",
               "readonly": false,
               "text": "format",
               "type": "String",
               "value": "fits"
            },
            {
               "description": "Include flux densities from each channel (if any)?",
               "name": "incl_chan",
               "readonly": false,
               "text": "incl_chan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Include islands without any valid Gaussians (source list only)?",
               "name": "incl_empty",
               "readonly": false,
               "text": "incl_empty",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Name for entries in the output catalog (BBS format only). None => use image file name",
               "name": "srcroot",
               "readonly": false,
               "text": "srcroot",
               "type": "String",
               "value": null
            },
            {
               "description": "Convert output model to tigger format",
               "name": "port2tigger",
               "readonly": false,
               "text": "port2tigger",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Calculate spectral indices (for multi-channel image)",
               "name": "spectralindex_do",
               "readonly": false,
               "text": "spectralindex_do",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag channels before (averaging and) extracting spectral index, if their rms is more than 5 (clipped) sigma outside the median rms over all channels, but only if <= 10% of channels",
               "name": "flagchan_rms",
               "readonly": false,
               "text": "flagchan_rms",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Flag channels that do not meet SNR criterion set by specind_snr",
               "name": "flagchan_snr",
               "readonly": false,
               "text": "flagchan_snr",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Maximum number of channels to average for a given source when when attempting to meet target SNR. 1 => no averaging; 0 => no maximum",
               "name": "specind_maxchan",
               "readonly": false,
               "text": "specind_maxchan",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Target SNR to use when fitting power law. If there is insufficient SNR, neighboring channels are averaged to attempt to obtain the target SNR. Channels with SNRs below this will be flagged if flagchan_snr = True",
               "name": "specind_snr",
               "readonly": false,
               "text": "specind_snr",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Start frequency (unit => Hz)",
               "name": "freq0",
               "readonly": false,
               "text": "freq0",
               "type": "Float",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "pybdsm",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Runs a user defined script in a python environment with python-casaore",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Runs a user defined script in a python environment with python-casaore",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/meqtrees:1.2.4"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " python"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS to process",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Custom script (string) to run within CASA",
               "name": "script",
               "readonly": false,
               "text": "script",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "pycasacore",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "A tool designed to identify regions in an image that require direction-dependent calibration",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "A tool designed to identify regions in an image that require direction-dependent calibration",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/pyddi:1.1.3"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " pyddi"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Image of interest.",
               "name": "image",
               "readonly": false,
               "text": "image",
               "type": "String",
               "value": null
            },
            {
               "description": "The psf image.",
               "name": "psf-image",
               "readonly": false,
               "text": "psf-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Sky model as LSM/txt. Must be in Tigger format: #format:name, ra_d, dec_d, i",
               "name": "catalog",
               "readonly": false,
               "text": "catalog",
               "type": "String",
               "value": null
            },
            {
               "description": "Flux threshold. Regions in an image with flux > fth * noise are considered.",
               "name": "flux-thresh",
               "readonly": false,
               "text": "flux-thresh",
               "type": "Float",
               "value": 10.0
            },
            {
               "description": "Local variance threshold. Sources with varinace > vth * noise are considered.",
               "name": "variance-thresh",
               "readonly": false,
               "text": "variance-thresh",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "The size of the region to compute the local variance. E.g vsize=10, gives a region of size = 10 * resolution. The resolution is in pixels.",
               "name": "variance-size",
               "readonly": false,
               "text": "variance-size",
               "type": "Integer",
               "value": 10
            },
            {
               "description": "Correlation threshold. Sources with correlation factor > cth are considered.",
               "name": "correlation-thresh",
               "readonly": false,
               "text": "correlation-thresh",
               "type": "Float",
               "value": 0.5
            },
            {
               "description": "The size of the region to compute correlation. see vsize.",
               "name": "correlation-size",
               "readonly": false,
               "text": "correlation-size",
               "type": "Integer",
               "value": 10
            },
            {
               "description": "The size of the region to group the pixels, in terms of psf-size. The psf is in degrees. e.g gpix=20, gives 20xpsf.",
               "name": "group-pixels",
               "readonly": false,
               "text": "group-pixels",
               "type": "Float",
               "value": 20.0
            },
            {
               "description": "Use -catalog for the identification instead of -image.",
               "name": "use-catalog",
               "readonly": false,
               "text": "use-catalog",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "The prefix for the output catalog useful when -use-catalog=False. It returns pixel RA, DEC dnd flux of the brightest pixels.",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "pyddi",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Tiny tool to apply a numpy boolean array to the spectral flags column of a measurement set to mask out known RFI sources like GSM and satelite in L-band. Typically flagging known RFI sources produces much better backgrounds and tools like the mighty AOFlagger RFI hammer needs fewer iterations to converge to good solutions.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Tiny tool to apply a numpy boolean array to the spectral flags column of a measurement set to mask out known RFI sources like GSM and satelite in L-band. Typically flagging known RFI sources produces much better backgrounds and tools like the mighty AOFlagger RFI hammer needs fewer iterations to converge to good solutions.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/rfimasker:1.7.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " mask_ms.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS(s) to flagged",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "A numpy array of chan x (boolean, channel_centre[float64])",
               "name": "mask",
               "readonly": false,
               "text": "mask",
               "type": "String",
               "value": null
            },
            {
               "description": "Specifies whether mask should override current flags or be added (or) to the current",
               "name": "accumulation_mode",
               "readonly": false,
               "text": "accumulation_mode",
               "type": "String",
               "value": "or"
            },
            {
               "description": "Computes and reports some statistics about the flagged RFI in the MS",
               "name": "statistics",
               "readonly": false,
               "text": "statistics",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Maximum memory to consume in MB for the flag buffer",
               "name": "memory",
               "readonly": false,
               "text": "memory",
               "type": "Integer",
               "value": 50
            },
            {
               "description": "SPW id (or ids if multiple MSs have been specified)",
               "name": "spwid",
               "readonly": false,
               "text": "spwid",
               "type": "String",
               "value": 0
            },
            {
               "description": "UV range to select (CASA style range: lower~upper) for flagging. Leave blank for entire array",
               "name": "uvrange",
               "readonly": false,
               "text": "uvrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Simulate only. Do not apply flags - useful for statistics",
               "name": "simulate",
               "readonly": false,
               "text": "simulate",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "rfimasker",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "A tool to investigate the presence of RFI",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "A tool to investigate the presence of RFI",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/rfinder:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " rfinder"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of telescope",
               "name": "telescope",
               "readonly": false,
               "text": "telescope",
               "type": "String",
               "value": "meerkat"
            },
            {
               "description": "Name of input ms file",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Field ID of target of file",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Path to ms file directory",
               "name": "msdir",
               "readonly": false,
               "text": "msdir",
               "type": "String",
               "value": null
            },
            {
               "description": "Path to output directory",
               "name": "output",
               "readonly": false,
               "text": "output",
               "type": "String",
               "value": null
            },
            {
               "description": "Ouput folder is called: rfi_polarization_outlabel",
               "name": "outlabel",
               "readonly": false,
               "text": "outlabel",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable to find RFI in msfile over threshold",
               "name": "rfi_enable",
               "readonly": false,
               "text": "rfi_enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "uses RFI clip method or simply reads the FLAG column 'use_flags' / 'rms_clip'",
               "name": "RFInder_mode",
               "readonly": false,
               "text": "RFInder_mode",
               "type": "String",
               "value": null
            },
            {
               "description": "List of bad antennas. default `[]` e.g. '[1,2]' ",
               "name": "bad_antenna",
               "readonly": false,
               "text": "bad_antenna",
               "type": "String",
               "value": null
            },
            {
               "description": "Polarization to examine. xx, yy, xy, yx, q (also in CAPS)",
               "name": "polarization",
               "readonly": false,
               "text": "polarization",
               "type": "String",
               "value": "XX"
            },
            {
               "description": "Threshold for RFI identification",
               "name": "rms_clip",
               "readonly": false,
               "text": "rms_clip",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Min and Max frequency where to measure average std of visibilities",
               "name": "noise_measure_edges",
               "readonly": false,
               "text": "noise_measure_edges",
               "type": "String",
               "value": null
            },
            {
               "description": "Cutoff baseline lenght: <  = Short, > = Long",
               "name": "baseline_cut",
               "readonly": false,
               "text": "baseline_cut",
               "type": "Integer",
               "value": 200
            },
            {
               "description": "Enable time chunking",
               "name": "time_enable",
               "readonly": false,
               "text": "time_enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Time chunks in minutes",
               "name": "time_step",
               "readonly": false,
               "text": "time_step",
               "type": "Integer",
               "value": 10
            },
            {
               "description": "Enable spw for rebinning",
               "name": "spw_enable",
               "readonly": false,
               "text": "spw_enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Channel width of rebinned output table [MHz]",
               "name": "spw_width",
               "readonly": false,
               "text": "spw_width",
               "type": "Integer",
               "value": 20
            },
            {
               "description": "Enable estimation of the beam shape aster RFI flagging",
               "name": "beam_shape_enable",
               "readonly": false,
               "text": "beam_shape_enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enable output plotting",
               "name": "plot_enable",
               "readonly": false,
               "text": "plot_enable",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Choose to plot % of RFI, 'rfi', or noise, 'noise', or factor of noise increase, 'noise_factor' in 1D plots",
               "name": "plot_noise",
               "readonly": false,
               "text": "plot_noise",
               "type": "String",
               "value": null
            },
            {
               "description": "Plot all baselines, or only the short and the long movies:",
               "name": "plot_long_short",
               "readonly": false,
               "text": "plot_long_short",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Make 1-D movie plots (gif)",
               "name": "1d_gif",
               "readonly": false,
               "text": "1d_gif",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Make 2-D movie plots (gif)",
               "name": "2d_gif",
               "readonly": false,
               "text": "2d_gif",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Make Alt-AZ plots",
               "name": "altaz_gif",
               "readonly": false,
               "text": "altaz_gif",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Generate movies in a report",
               "name": "movies_in_report",
               "readonly": false,
               "text": "movies_in_report",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "rfinder",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Run RM-CLEAN on a cube of Faraday dispersion functions (FDFs), applying \n a cube of rotation measure spread functions created by the script \n 'do_RMsynth_3D.py'. Saves cubes of deconvolved FDFs & clean-component\n spectra, and a pixel map showing the number of iterations performed.\n Set any of the multiprocessing options to enable parallelization\n (otherwise, pixels will be processed serially).\n  Expects that the input is in the form of the Stokes-separated\n (single extension) FITS cubes produced by do_RMsynth_3D.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Run RM-CLEAN on a cube of Faraday dispersion functions (FDFs), applying \n a cube of rotation measure spread functions created by the script \n 'do_RMsynth_3D.py'. Saves cubes of deconvolved FDFs & clean-component\n spectra, and a pixel map showing the number of iterations performed.\n Set any of the multiprocessing options to enable parallelization\n (otherwise, pixels will be processed serially).\n  Expects that the input is in the form of the Stokes-separated\n (single extension) FITS cubes produced by do_RMsynth_3D.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/rm-tools:1.6.9-1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " rmclean3d"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "FITS cube containing the dirty FDF. (Can be any of the FDF output cubes from do_RMsynth_3D.py)",
               "name": "dirty-pdf",
               "readonly": false,
               "text": "dirty-pdf",
               "type": "String",
               "value": null
            },
            {
               "description": "FITS cube containing the RMSF and FWHM image. (Can be any of the RMSF output cubes from do_RMsynth_3D.py)",
               "name": "rmsf-fwhm",
               "readonly": false,
               "text": "rmsf-fwhm",
               "type": "String",
               "value": null
            },
            {
               "description": "CLEAN cutoff in flux units",
               "name": "cutoff",
               "readonly": false,
               "text": "cutoff",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of CLEAN iterations per pixel [1000].",
               "name": "maxiter",
               "readonly": false,
               "text": "maxiter",
               "type": "String",
               "value": 1000
            },
            {
               "description": "Clean loop gain",
               "name": "gain",
               "readonly": false,
               "text": "gain",
               "type": "Float",
               "value": 0.1
            },
            {
               "description": "prefix to prepend to output files",
               "name": "prefixout",
               "readonly": false,
               "text": "prefixout",
               "type": "String",
               "value": null
            },
            {
               "description": "Store different Stokes as FITS extensions [False, store as separate files]",
               "name": "f",
               "readonly": false,
               "text": "f",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Verbose output",
               "name": "v",
               "readonly": false,
               "text": "v",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of processes (uses multiprocessing)",
               "name": "ncores",
               "readonly": false,
               "text": "ncores",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Chunk size (uses multiprocessing -- not available in MPI!)",
               "name": "chunk",
               "readonly": false,
               "text": "chunk",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Show the plots",
               "name": "p",
               "readonly": false,
               "text": "p",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Run with MPI",
               "name": "mpi",
               "readonly": false,
               "text": "mpi",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "rmclean3d",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Run RM-synthesis on Stokes I, Q and U spectra (1D) stored in an ASCII file. The Stokes I spectrum is first fit with a polynomial and the resulting model used to create fractional q = Q/I and u = U/I spectra. The ASCII file should the following columns, in a space separated format: \n [freq_Hz, I, Q, U, I_err, Q_err, U_err] \n OR \n [freq_Hz, Q, U, Q_err, U_err] \n To get outputs, one or more of the following flags must be set: -S, -p, -v.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Run RM-synthesis on Stokes I, Q and U spectra (1D) stored in an ASCII file. The Stokes I spectrum is first fit with a polynomial and the resulting model used to create fractional q = Q/I and u = U/I spectra. The ASCII file should the following columns, in a space separated format: \n [freq_Hz, I, Q, U, I_err, Q_err, U_err] \n OR \n [freq_Hz, Q, U, Q_err, U_err] \n To get outputs, one or more of the following flags must be set: -S, -p, -v.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/rm-tools:1.6.9-1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " rmsynth1d"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "ASCII file containing Stokes spectra & errors.",
               "name": "dataFile",
               "readonly": false,
               "text": "dataFile",
               "type": "String",
               "value": null
            },
            {
               "description": "fit a Gaussian to the RMSF",
               "name": "t",
               "readonly": false,
               "text": "t",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "absolute max Faraday depth sampled",
               "name": "f",
               "readonly": false,
               "text": "f",
               "type": "String",
               "value": "Auto"
            },
            {
               "description": "Width of Faraday depth channel. (overrides -s NSAMPLES flag)",
               "name": "l",
               "readonly": false,
               "text": "l",
               "type": "String",
               "value": "Auto"
            },
            {
               "description": "number of samples across the RMSF lobe",
               "name": "s",
               "readonly": false,
               "text": "s",
               "type": "Integer",
               "value": 10
            },
            {
               "description": "weighting [inverse 'variance'] or 'uniform' (all 1s).",
               "name": "w",
               "readonly": false,
               "text": "w",
               "type": "String",
               "value": null
            },
            {
               "description": "Polynomial order to fit to I spectrum",
               "name": "o",
               "readonly": false,
               "text": "o",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Ignore the Stokes I spectrum",
               "name": "i",
               "readonly": false,
               "text": "i",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use 64-bit floating point precision [False (uses 32-bit)]",
               "name": "b",
               "readonly": false,
               "text": "b",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Show the plots",
               "name": "p",
               "readonly": false,
               "text": "p",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Verbose output",
               "name": "v",
               "readonly": false,
               "text": "v",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save the arrays and plots",
               "name": "S",
               "readonly": false,
               "text": "S",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Turn on debugging messages & plots",
               "name": "D",
               "readonly": false,
               "text": "D",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Intensity units of the data.",
               "name": "U",
               "readonly": false,
               "text": "U",
               "type": "String",
               "value": "Jy/beam"
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "rmsynth1d",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Run RM-synthesis on Stokes I, Q and U spectra (1D) stored in an ASCII file. The Stokes I spectrum is first fit with a polynomial and the resulting model used to create fractional q = Q/I and u = U/I spectra. The ASCII file should the following columns, in a space separated format: \n [freq_Hz, I, Q, U, I_err, Q_err, U_err] \n OR \n [freq_Hz, Q, U, Q_err, U_err] \n To get outputs, one or more of the following flags must be set: -S, -p, -v.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Run RM-synthesis on Stokes I, Q and U spectra (1D) stored in an ASCII file. The Stokes I spectrum is first fit with a polynomial and the resulting model used to create fractional q = Q/I and u = U/I spectra. The ASCII file should the following columns, in a space separated format: \n [freq_Hz, I, Q, U, I_err, Q_err, U_err] \n OR \n [freq_Hz, Q, U, Q_err, U_err] \n To get outputs, one or more of the following flags must be set: -S, -p, -v.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/rm-tools:1.6.9-1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " rmsynth3d"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "FITS cube containing Stokes Q data",
               "name": "fitsq",
               "readonly": false,
               "text": "fitsq",
               "type": "String",
               "value": null
            },
            {
               "description": "FITS cube containing Stokes U data",
               "name": "fitsu",
               "readonly": false,
               "text": "fitsu",
               "type": "String",
               "value": null
            },
            {
               "description": "ASCII file containing the frequency vector (Hz).",
               "name": "freqs",
               "readonly": false,
               "text": "freqs",
               "type": "String",
               "value": null
            },
            {
               "description": "FITS cube containing Stokes I model",
               "name": "fitsi",
               "readonly": false,
               "text": "fitsi",
               "type": "String",
               "value": null
            },
            {
               "description": "number of samples across the RMSF lobe",
               "name": "s",
               "readonly": false,
               "text": "s",
               "type": "Integer",
               "value": 10
            },
            {
               "description": "weighting ['variance'] or 'uniform' (all 1s).",
               "name": "w",
               "readonly": false,
               "text": "w",
               "type": "String",
               "value": null
            },
            {
               "description": "Fit a Gaussian to the RMSF",
               "name": "fit-gauss",
               "readonly": false,
               "text": "fit-gauss",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Absolute max Faraday depth sampled (overrides NSAMPLES)",
               "name": "phimax-radm2",
               "readonly": false,
               "text": "phimax-radm2",
               "type": "Float",
               "value": false
            },
            {
               "description": "Width of Faraday depth channel",
               "name": "phi-depth",
               "readonly": false,
               "text": "phi-depth",
               "type": "Float",
               "value": null
            },
            {
               "description": "Prefix to prepend to output files",
               "name": "prefixout",
               "readonly": false,
               "text": "prefixout",
               "type": "String",
               "value": null
            },
            {
               "description": "Verbose output",
               "name": "v",
               "readonly": false,
               "text": "v",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of samples across the FWHM RMSF.",
               "name": "nsamples",
               "readonly": false,
               "text": "nsamples",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Store different Stokes as FITS extensions [False, store as separate files]",
               "name": "f",
               "readonly": false,
               "text": "f",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Skip calculation of RMSF?",
               "name": "R",
               "readonly": false,
               "text": "R",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "rmsynth3d",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Rapid Measurement Set plotting with xarray-ms and datashader.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Rapid Measurement Set plotting with xarray-ms and datashader.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/shadems:1.7.1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " shadems"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Measurement set to plot",
               "name": "ms",
               "readonly": false,
               "text": "ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Xaxis to plot. Can be any MS column name, also: CHAN, FREQ, CORR, ROW, WAVEL, U, V, W, UV, and, for complex columns, keywords such as: 'amp', 'phase', 'real', 'imag'. You can also specify correlations, e.g. 'DATA:phase:XX'. The order of specifiers does not matter.",
               "name": "xaxis",
               "readonly": false,
               "text": "xaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "Y axis to plot. Must be given the same number of times as --xaxis.",
               "name": "yaxis",
               "readonly": false,
               "text": "yaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "Intensity axis. If none, plot intensity (a.k.a. alpha channel) is proportional to density of points.Otherwise, a reduction function (--ared) is applied to the given values, and the result is used to determine intensity.",
               "name": "aaxis",
               "readonly": false,
               "text": "aaxis",
               "type": "String",
               "value": null
            },
            {
               "description": "Alpha axis reduction function.",
               "name": "ared",
               "readonly": false,
               "text": "ared",
               "type": "String",
               "value": null
            },
            {
               "description": "Colour axis. All columns and variations listed under --xaxis are available for colouring by.",
               "name": "colour-by",
               "readonly": false,
               "text": "colour-by",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of visibility column. Default is DATA. Two-column arithmetic is recognized.",
               "name": "col",
               "readonly": false,
               "text": "col",
               "type": "String",
               "value": null
            },
            {
               "description": "Ignore flagged data. Default is true.",
               "name": "noflags",
               "readonly": false,
               "text": "noflags",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Do not show conjugate points in u,v plots. Default is true.",
               "name": "noconj",
               "readonly": false,
               "text": "noconj",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum x-axis value. Default is data min.",
               "name": "xmin",
               "readonly": false,
               "text": "xmin",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum x-axis value to plot. Default is data max.",
               "name": "xmax",
               "readonly": false,
               "text": "xmax",
               "type": "Float",
               "value": null
            },
            {
               "description": "Minimum y-axis value. Default is data min.",
               "name": "ymin",
               "readonly": false,
               "text": "ymin",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum y-axis value to plot. Default is data max.",
               "name": "ymax",
               "readonly": false,
               "text": "ymax",
               "type": "Float",
               "value": null
            },
            {
               "description": "Minimum colouring value. Default is data-min.",
               "name": "cmin",
               "readonly": false,
               "text": "cmin",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum colouring value.  Default is data-max.",
               "name": "cmax",
               "readonly": false,
               "text": "cmax",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of colours to use.",
               "name": "cnum",
               "readonly": false,
               "text": "cnum",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Separate plots per field. Default is combine all.",
               "name": "iter-field",
               "readonly": false,
               "text": "iter-field",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Separate plots per antenna. Default is combine all.",
               "name": "iter-antenna",
               "readonly": false,
               "text": "iter-antenna",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Separate plots per spw. Default is combine all.",
               "name": "iter-spw",
               "readonly": false,
               "text": "iter-spw",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Separate plots per scan. Default is combine all.",
               "name": "iter-scan",
               "readonly": false,
               "text": "iter-scan",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Separate plots per correlation / Stokes. Default is combine all.",
               "name": "iter-corr",
               "readonly": false,
               "text": "iter-corr",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Antennas to plot (comma-separated list of names). Default is all.",
               "name": "ant",
               "readonly": false,
               "text": "ant",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Antennas to plot (comma-separated list of numbers, or a [start]:[stop][:step] slice, overrides --ant).",
               "name": "ant-num",
               "readonly": false,
               "text": "ant-num",
               "type": "String",
               "value": null
            },
            {
               "description": "Baselines to plot, as 'ant1-ant2' (comma-separated list). Default is all.",
               "name": "baseline",
               "readonly": false,
               "text": "baseline",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Spectral windows (DDIDs) to plot (comma-separated list) Default is all.",
               "name": "spw",
               "readonly": false,
               "text": "spw",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Field ID(s) to plot (comma-separated list). Default is all.",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Scans to plot (comma-separated list). Default is all.",
               "name": "scan",
               "readonly": false,
               "text": "scan",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Correlations or Stokes to plot, use indices or labels (comma-separated list). Default is all.",
               "name": "corr",
               "readonly": false,
               "text": "corr",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Channel slice, as [start]:[stop][:step].  Default is to plot all.",
               "name": "chan",
               "readonly": false,
               "text": "chan",
               "type": "String",
               "value": null
            },
            {
               "description": "Canvas x-size in pixels.",
               "name": "xcanvas",
               "readonly": false,
               "text": "xcanvas",
               "type": "Integer",
               "value": 1280
            },
            {
               "description": "Canvas y-size in pixels.",
               "name": "ycanvas",
               "readonly": false,
               "text": "ycanvas",
               "type": "Integer",
               "value": 900
            },
            {
               "description": "Pixel scale normalization. Default is 'log' when colouring, and 'eq_hist' when not.",
               "name": "norm",
               "readonly": false,
               "text": "norm",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Colorcet map used without --colour-by.",
               "name": "cmap",
               "readonly": false,
               "text": "cmap",
               "type": "String",
               "value": "bkr"
            },
            {
               "description": "Colorcet map used when colouring by a continuous axis.",
               "name": "bmap",
               "readonly": false,
               "text": "bmap",
               "type": "String",
               "value": "bkr"
            },
            {
               "description": "Colorcet map used when colouring by a discrete axis.",
               "name": "dmap",
               "readonly": false,
               "text": "dmap",
               "type": "String",
               "value": "glasbey_dark"
            },
            {
               "description": "Dynamically spread rendered pixels to this size.",
               "name": "spread-pix",
               "readonly": false,
               "text": "spread-pix",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Threshold parameter for spreading (0 to 1).",
               "name": "spread-thr",
               "readonly": false,
               "text": "spread-thr",
               "type": "Float",
               "value": 0.5
            },
            {
               "description": "RGB hex code for background colour. Default FFFFFF (white).",
               "name": "bgcol",
               "readonly": false,
               "text": "bgcol",
               "type": "String",
               "value": "FFFFFF"
            },
            {
               "description": "Font size for all text elements.",
               "name": "fontsize",
               "readonly": false,
               "text": "fontsize",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Suffix to be included in filenames.",
               "name": "suffix",
               "readonly": false,
               "text": "suffix",
               "type": "String",
               "value": null
            },
            {
               "description": "Output PNG name. Default is",
               "name": "png",
               "readonly": false,
               "text": "png",
               "type": "String",
               "value": "plot-{ms}{_field}{_Spw}{_Scan}{_Ant}-{label}{_alphalabel}{_colorlabel}{_suffix}.png"
            },
            {
               "description": "Template for plot titles. Default title includes ms name, field, spw, scan, antenna, plot title, alpha title and colour title.",
               "name": "title",
               "readonly": false,
               "text": "title",
               "type": "String",
               "value": "{ms}{_field}{_Spw}{_Scan}{_Ant}{_title}{_Alphatitle}{_Colortitle}"
            },
            {
               "description": "Template for X axis labels. Default is x-axis name and unit",
               "name": "xlabel",
               "readonly": false,
               "text": "xlabel",
               "type": "String",
               "value": "{xname}{_xunit}"
            },
            {
               "description": "Template for Y axis labels. Default is y-axis name and unit",
               "name": "ylabel",
               "readonly": false,
               "text": "ylabel",
               "type": "String",
               "value": "{yname}{_yunit}"
            },
            {
               "description": "Enable debugging output.",
               "name": "debug",
               "readonly": false,
               "text": "debug",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Row chunk size for dask-ms. Larger chunks may or may not be faster, but will certainly use more RAM.",
               "name": "row-chunk-size",
               "readonly": false,
               "text": "row-chunk-size",
               "type": "Integer",
               "value": 100000
            },
            {
               "description": "Run up to N renderers in parallel. Default is serial. Use -j0 to auto-set this to half the available cores.",
               "name": "num-parallel",
               "readonly": false,
               "text": "num-parallel",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Enable dask profiling output.",
               "name": "profile",
               "readonly": false,
               "text": "profile",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "shadems",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Rapid Measurement Set plotting with xarray-ms and datashader.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Rapid Measurement Set plotting with xarray-ms and datashader.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/shadems:1.7.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " shadems"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Measurement set to plot",
               "name": "ms",
               "readonly": false,
               "text": "ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Plot specification(s)",
               "name": "args",
               "readonly": false,
               "text": "args",
               "type": "String",
               "value": null
            },
            {
               "description": "If true, do not return error code if plot(s) fail",
               "name": "ignore_errors",
               "readonly": false,
               "text": "ignore_errors",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "shadems_direct",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "A tool to extract a spectrum from continuum sources in a cube.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "A tool to extract a spectrum from continuum sources in a cube.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/sharpener:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " run_sharpener"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of continuum image to extract sources",
               "name": "contname",
               "readonly": false,
               "text": "contname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of cube image to extract spectrum of sources",
               "name": "cubename",
               "readonly": false,
               "text": "cubename",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix in the plots title",
               "name": "label",
               "readonly": false,
               "text": "label",
               "type": "String",
               "value": "SHARP"
            },
            {
               "description": "Name of catalog file used to locate sources in a cube",
               "name": "catalog_file",
               "readonly": false,
               "text": "catalog_file",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of working directory",
               "name": "workdir",
               "readonly": false,
               "text": "workdir",
               "type": "String",
               "value": null
            },
            {
               "description": "Format of plots produced",
               "name": "plot_format",
               "readonly": false,
               "text": "plot_format",
               "type": "String",
               "value": "pdf"
            },
            {
               "description": "Merge all the plots",
               "name": "merge_plots",
               "readonly": false,
               "text": "merge_plots",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "plot spectra from folder plot in workdir/sharpOut/plot/",
               "name": "enable_abs_plot",
               "readonly": false,
               "text": "enable_abs_plot",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Detail plot showing specified number of channels per plot",
               "name": "detailed_plot",
               "readonly": false,
               "text": "detailed_plot",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Number of channels per plot",
               "name": "channels_per_plot",
               "readonly": false,
               "text": "channels_per_plot",
               "type": "Integer",
               "value": 50
            },
            {
               "description": "Enable hanning for smoothing spectrum",
               "name": "enable_hanning",
               "readonly": false,
               "text": "enable_hanning",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Hanning window",
               "name": "window",
               "readonly": false,
               "text": "window",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Subtract polynomial from spectrum to improve continuum subtraction",
               "name": "enable_polynomial_subtraction",
               "readonly": false,
               "text": "enable_polynomial_subtraction",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Degree of polynomial",
               "name": "degree_pol",
               "readonly": false,
               "text": "degree_pol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enable sdss source matching",
               "name": "enable_sdss_match",
               "readonly": false,
               "text": "enable_sdss_match",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimum frequency",
               "name": "freq_min",
               "readonly": false,
               "text": "freq_min",
               "type": "Float",
               "value": 1130.0
            },
            {
               "description": "Maximum frequency",
               "name": "freq_max",
               "readonly": false,
               "text": "freq_max",
               "type": "Float",
               "value": 1430.0
            },
            {
               "description": "Plot image",
               "name": "plot_image",
               "readonly": false,
               "text": "plot_image",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Match catalog",
               "name": "match_cat",
               "readonly": false,
               "text": "match_cat",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Maximum separation",
               "name": "max_sep",
               "readonly": false,
               "text": "max_sep",
               "type": "Float",
               "value": 30.0
            },
            {
               "description": "Minimum radio flux",
               "name": "min_radio_flux",
               "readonly": false,
               "text": "min_radio_flux",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "SDSS query timeout",
               "name": "sdss_query_timeout",
               "readonly": false,
               "text": "sdss_query_timeout",
               "type": "Integer",
               "value": 300
            },
            {
               "description": "Simulate continuum from source catalog output",
               "name": "enable_simulate_continuum",
               "readonly": false,
               "text": "enable_simulate_continuum",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Find sources in a f.o.v. from source_catalog",
               "name": "enable_source_catalog",
               "readonly": false,
               "text": "enable_source_catalog",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Type of catalog",
               "name": "catalog",
               "readonly": false,
               "text": "catalog",
               "type": "String",
               "value": null
            },
            {
               "description": "Threshold to select sources (mJy)",
               "name": "thresh",
               "readonly": false,
               "text": "thresh",
               "type": "Float",
               "value": 50.0
            },
            {
               "description": "Field of view width (e.g. 5.5d)",
               "name": "width",
               "readonly": false,
               "text": "width",
               "type": "String",
               "value": null
            },
            {
               "description": "Find sources in continuum image using miriad imsad",
               "name": "enable_source_finder",
               "readonly": false,
               "text": "enable_source_finder",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Source finding clip",
               "name": "clip",
               "readonly": false,
               "text": "clip",
               "type": "Float",
               "value": null
            },
            {
               "description": "Plot image",
               "name": "plot_image",
               "readonly": false,
               "text": "plot_image",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Extract spectra from datacube",
               "name": "enable_spec_ex",
               "readonly": false,
               "text": "enable_spec_ex",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Chromatic aberration",
               "name": "chrom_aberration",
               "readonly": false,
               "text": "chrom_aberration",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Number of channels to flag",
               "name": "flag_chans",
               "readonly": false,
               "text": "flag_chans",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Red shift units",
               "name": "zunit",
               "readonly": false,
               "text": "zunit",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "sharpener",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Uses the CASA simulator tool to create a simulated measurement set (MS)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Uses the CASA simulator tool to create a simulated measurement set (MS)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/casa:1.7.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": "casa --nologger --log2term --nologfile -c simms"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Name of MS file to be created",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of telescope that being simulated",
               "name": "telescope",
               "readonly": false,
               "text": "telescope",
               "type": "String",
               "value": null
            },
            {
               "description": "File that contains antenna coordinates",
               "name": "antenna-file",
               "readonly": false,
               "text": "antenna-file",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of antenna file",
               "name": "type",
               "readonly": false,
               "text": "type",
               "type": "String",
               "value": "casa"
            },
            {
               "description": "Coordinate system of antenna coordinates in 'antenna-file'. Only needed if 'type' is 'ascii'; CASA tables are assumed to be in ITRF coords",
               "name": "coord-sys",
               "readonly": false,
               "text": "coord-sys",
               "type": "String",
               "value": "itrf"
            },
            {
               "description": "Reference position of telescope. Comma seperated longitude,lattitude and elevation 'deg,deg,m'. Elevation is not crucial, lon,lat should be enough. If not specified, we'll try to get this info from the CASA database (assuming that your telescope is known to CASA)",
               "name": "lon-lat-elv",
               "readonly": false,
               "text": "lon-lat-elv",
               "type": "String",
               "value": null
            },
            {
               "description": "Enable this to indicate that your ENU file does not have an 'up' dimension",
               "name": "noup",
               "readonly": false,
               "text": "noup",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Pointing direction. Example J2000,0h0m0s,-30d0m0d. Option --direction may be specified multiple times for multiple pointings. Provide a list of directions for multiple pointings; each pointing will have a unique field ID",
               "name": "direction",
               "readonly": false,
               "text": "direction",
               "type": "dtype",
               "value": "J2000,0deg,-30deg"
            },
            {
               "description": "Synthesis time in hours",
               "name": "synthesis",
               "readonly": false,
               "text": "synthesis",
               "type": "Float",
               "value": 4
            },
            {
               "description": "Duration of a single scan in hours. Default is the entire observation (synthesis)",
               "name": "scan-length",
               "readonly": false,
               "text": "scan-length",
               "type": "Float",
               "value": null
            },
            {
               "description": "Integration time in seconds",
               "name": "dtime",
               "readonly": false,
               "text": "dtime",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Start frequency. This is the middle of the first channel. Specify as val[unit]. E.g 700MHz, no unit => Hz . Use a comma seperated list for multiple start frequencies (for multiple subbands)",
               "name": "freq0",
               "readonly": false,
               "text": "freq0",
               "type": "dtype",
               "value": "1.4GHz"
            },
            {
               "description": "Channel width. Specify as val[unit]. E.g 700MHz, no unit => Hz Use a comma separated list of channel widths (for multiple subbands)",
               "name": "dfreq",
               "readonly": false,
               "text": "dfreq",
               "type": "dtype",
               "value": "2MHz"
            },
            {
               "description": "Number of subands",
               "name": "nband",
               "readonly": false,
               "text": "nband",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Number of channels. Can be used in tandemn with 'freq0, dfreq, nband' to customise the partitioning of the subbands",
               "name": "nchan",
               "readonly": false,
               "text": "nchan",
               "type": "String",
               "value": 1
            },
            {
               "description": "Initial hour angle. 'scan-length/2' is the default",
               "name": "init-ha",
               "readonly": false,
               "text": "init-ha",
               "type": "Float",
               "value": null
            },
            {
               "description": "polarization",
               "name": "pol",
               "readonly": false,
               "text": "pol",
               "type": "String",
               "value": "XX XY YX YY"
            },
            {
               "description": "Feed type",
               "name": "feed",
               "readonly": false,
               "text": "feed",
               "type": "String",
               "value": "perfect X Y"
            },
            {
               "description": "Lag time between scans in hours",
               "name": "scan-lag",
               "readonly": false,
               "text": "scan-lag",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Set telescope limits. Elevation and shadow limts. Works in tandem with 'shadow-limit, elevation-limit'",
               "name": "set-limits",
               "readonly": false,
               "text": "set-limits",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Dish elevation limit. Will only be taken into account if 'set-limits' is enabled.",
               "name": "elevation-limit",
               "readonly": false,
               "text": "elevation-limit",
               "type": "Float",
               "value": null
            },
            {
               "description": "Shadow limit. Will only be taken into account if 'set-limits' is enabled.",
               "name": "shadow-limit",
               "readonly": false,
               "text": "shadow-limit",
               "type": "Float",
               "value": null
            },
            {
               "description": "Don't flag autocorrelations",
               "name": "auto-correlations",
               "readonly": false,
               "text": "auto-correlations",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Date of observation. Example UTC,2014/05/26 or UTC,2014/05/26/12:12:12 : default is today (format: EPOCH,yyyy/mm/dd/[h:m:s]",
               "name": "date",
               "readonly": false,
               "text": "date",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "simms",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Uses MeqTrees to simulate a sky model (Gaussians and point sources) into measurement set (MS)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Uses MeqTrees to simulate a sky model (Gaussians and point sources) into measurement set (MS)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/meqtrees:1.6.3"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " meqtree-pipeliner.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS to simulate sky model into",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "TDL configuration file. If not specified, will use a default template",
               "name": "tdlconf",
               "readonly": false,
               "text": "tdlconf",
               "type": "String",
               "value": null
            },
            {
               "description": "save final configuration (after all command-line arguments have been applied)",
               "name": "save-config",
               "readonly": false,
               "text": "save-config",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of CPUs to use for  multithreading",
               "name": "threads",
               "readonly": false,
               "text": "threads",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Section to execute in TDL config file. Only needed if using custom TDL config",
               "name": "section",
               "readonly": false,
               "text": "section",
               "type": "String",
               "value": null
            },
            {
               "description": "Simulation mode. You can; i) 'simulate' - replace; ii) 'add' to; iii) or 'subtract' from the data in the specified column",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": "simulate"
            },
            {
               "description": "Size of tile (time bins) to process. Can be used to reduce memory footprint",
               "name": "tile-size",
               "readonly": false,
               "text": "tile-size",
               "type": "Integer",
               "value": 16
            },
            {
               "description": "Sky model to be simulated",
               "name": "skymodel",
               "readonly": false,
               "text": "skymodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Recenter the sky model to this direction",
               "name": "field-center",
               "readonly": false,
               "text": "field-center",
               "type": "String",
               "value": null
            },
            {
               "description": "Recenter skymodel to phase center of MS",
               "name": "recenter",
               "readonly": false,
               "text": "recenter",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enable time and bandwidth smearing in simulation",
               "name": "smearing",
               "readonly": false,
               "text": "smearing",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Add noise to simulated data",
               "name": "addnoise",
               "readonly": false,
               "text": "addnoise",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Noise to be added to the simulated data will be derived from this value (~sefd/sqrt(dt*dv))",
               "name": "sefd",
               "readonly": false,
               "text": "sefd",
               "type": "Float",
               "value": null
            },
            {
               "description": "Enable direction independent corruptions to simulated data",
               "name": "Gjones",
               "readonly": false,
               "text": "Gjones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Field ID",
               "name": "field-id",
               "readonly": false,
               "text": "field-id",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "SPW ID",
               "name": "spw-id",
               "readonly": false,
               "text": "spw-id",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Noise to add to visibility data. In Jy",
               "name": "noise",
               "readonly": false,
               "text": "noise",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Column name",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": "CORRECTED_DATA"
            },
            {
               "description": "Input column. Needed for 'mode' = 'add, subtract'.",
               "name": "input-column",
               "readonly": false,
               "text": "input-column",
               "type": "String",
               "value": "DATA"
            },
            {
               "description": "Maximum period for direction independent gain corruption. In hours",
               "name": "gain-max-period",
               "readonly": false,
               "text": "gain-max-period",
               "type": "Integer",
               "value": 30
            },
            {
               "description": "Minimum period for direction independent gain corruption. In hours",
               "name": "gain-min-period",
               "readonly": false,
               "text": "gain-min-period",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Maximum period for direction independent gain corruption. In deg",
               "name": "gain-max-error",
               "readonly": false,
               "text": "gain-max-error",
               "type": "Integer",
               "value": 1.2
            },
            {
               "description": "Minimum period for direction independent gain corruption. In deg",
               "name": "gain-min-error",
               "readonly": false,
               "text": "gain-min-error",
               "type": "Integer",
               "value": 0.8
            },
            {
               "description": "Maximum period for direction independent gain corruption. In hours",
               "name": "phase-max-period",
               "readonly": false,
               "text": "phase-max-period",
               "type": "Integer",
               "value": 30
            },
            {
               "description": "Minimum period for direction independent gain corruption. In hours",
               "name": "phase-min-period",
               "readonly": false,
               "text": "phase-min-period",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Maximum period for direction independent gain corruption. In deg",
               "name": "phase-max-error",
               "readonly": false,
               "text": "phase-max-error",
               "type": "Integer",
               "value": 1.2
            },
            {
               "description": "Minimum period for direction independent gain corruption. In deg",
               "name": "phase-min-error",
               "readonly": false,
               "text": "phase-min-error",
               "type": "Integer",
               "value": 0.8
            },
            {
               "description": "Add a primary beam model",
               "name": "Ejones",
               "readonly": false,
               "text": "Ejones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Beam files pattern",
               "name": "beam-files-pattern",
               "readonly": false,
               "text": "beam-files-pattern",
               "type": "String",
               "value": null
            },
            {
               "description": "Type of input beam files",
               "name": "beam-type",
               "readonly": false,
               "text": "beam-type",
               "type": "String",
               "value": "fits"
            },
            {
               "description": "Beam l axis",
               "name": "beam-l-axis",
               "readonly": false,
               "text": "beam-l-axis",
               "type": "String",
               "value": "X"
            },
            {
               "description": "Beam m axis",
               "name": "beam-m-axis",
               "readonly": false,
               "text": "beam-m-axis",
               "type": "String",
               "value": "Y"
            },
            {
               "description": "Enable parallactic angle rotation. Enable if telescope mount is ALT-AZ",
               "name": "parallactic-angle-rotation",
               "readonly": false,
               "text": "parallactic-angle-rotation",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Pointing accuracy in arcsec. If set to non-zero value, will introduce pointing errors into simulation",
               "name": "pointing-accuracy",
               "readonly": false,
               "text": "pointing-accuracy",
               "type": "Float",
               "value": 0
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "simulator",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "SoFiA, the Source Finding Application, is a new HI source finding pipeline intended to detect and parameterise galaxies in HI data cubes. While the software is still under development, several stable versions of SoFiA have already been released. This wiki contains user documentation and technical information on SoFiA and its individual modules.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "SoFiA, the Source Finding Application, is a new HI source finding pipeline intended to detect and parameterise galaxies in HI data cubes. While the software is still under development, several stable versions of SoFiA have already been released. This wiki contains user documentation and technical information on SoFiA and its individual modules.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/sofia:1.2.5-1"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " sofia_pipeline.py"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "The maximum size of test regions. The default value of -1 is a flag value that sets the maximum size to half of the size of the spectral axis.",
               "name": "CNHI.maxScale",
               "readonly": false,
               "text": "CNHI.maxScale",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "This parameter determines whether test regions need to have a median greater than that of the remaining data in order to be considered a source.",
               "name": "CNHI.medianTest",
               "readonly": false,
               "text": "CNHI.medianTest",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "The minimum size of test regions.",
               "name": "CNHI.minScale",
               "readonly": false,
               "text": "CNHI.minScale",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Minimum probability requirement for detections to be considered genuine. Sensible values are typically in the range of about 1e\u22123 to 1e\u22125.",
               "name": "CNHI.pReq",
               "readonly": false,
               "text": "CNHI.pReq",
               "type": "Float",
               "value": "1e-05"
            },
            {
               "description": "This is the Q value of the Kuiper test, which is a heuristic parameter for assessing the quality/accuracy of the probability calculated from the Kuiper test. The minimum scale that the CNHI source finder processes is increased until it is sufficiently large to ensure that the required Q value is achieved. This requirement supersedes the user-specified minimum scale (see parameter CNHI.minScale). The default value is 3.8, which is the generally accepted minimally useful value.",
               "name": "CNHI.qReq",
               "readonly": false,
               "text": "CNHI.qReq",
               "type": "Float",
               "value": 3.8
            },
            {
               "description": "An integer value that indicates the level of verbosity of the CNHI finder. Values of 0, 1 and 2 correspond to none, minimal and maximal, respectively.",
               "name": "CNHI.verbose",
               "readonly": false,
               "text": "CNHI.verbose",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Pixel values assumed by the smoothing algorithm outside the boundaries of the cube. The following options are available: 'constant' assume a constant value of 0; 'nearest' assume a constant value equal to that of the nearest edge pixel; 'reflect' mirror values at the edge, thereby duplicating the edge pixel itself; 'mirror' mirror values at the centre of the outermost pixel, thereby avoiding duplication of the edge pixel itself; 'wrap' copy values from the opposite edge of the cube.",
               "name": "SCfind.edgeMode",
               "readonly": false,
               "text": "SCfind.edgeMode",
               "type": "String",
               "value": "constant"
            },
            {
               "description": "This parameter defines whether the kernel parameters set by SCfind.kernels are specified in pixel or world coordinates.",
               "name": "SCfind.kernelUnit",
               "readonly": false,
               "text": "SCfind.kernelUnit",
               "type": "String",
               "value": "pixel"
            },
            {
               "description": "List of kernels to be used for smoothing. The format is [[dx, dy, dz, 'type'], ...] where dx, dy, and dz are the spatial and spectral kernel sizes (FWHM), and 'type' can be boxcar ('b') or Gaussian ('g'). Note that 'type' only applies to the spectral axis, and the spatial kernel is always Gaussian. Kernel sizes can be given either in pixels or in world coordinates depending of the value of SCfind.kernelUnit.",
               "name": "SCfind.kernels",
               "readonly": false,
               "text": "SCfind.kernels",
               "type": "String",
               "value": [
                  [
                     0,
                     0,
                     0,
                     "b"
                  ],
                  [
                     0,
                     0,
                     3,
                     "b"
                  ],
                  [
                     0,
                     0,
                     7,
                     "b"
                  ],
                  [
                     0,
                     0,
                     15,
                     "b"
                  ],
                  [
                     3,
                     3,
                     0,
                     "b"
                  ],
                  [
                     3,
                     3,
                     3,
                     "b"
                  ],
                  [
                     3,
                     3,
                     7,
                     "b"
                  ],
                  [
                     3,
                     3,
                     15,
                     "b"
                  ],
                  [
                     6,
                     6,
                     0,
                     "b"
                  ],
                  [
                     6,
                     6,
                     3,
                     "b"
                  ],
                  [
                     6,
                     6,
                     7,
                     "b"
                  ],
                  [
                     6,
                     6,
                     15,
                     "b"
                  ]
               ]
            },
            {
               "description": "Set already detected pixels to sigma x maskScaleXY before spatial smoothing, where sigma is the rms noise level in the original data cube. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "SCfind.maskScaleXY",
               "readonly": false,
               "text": "SCfind.maskScaleXY",
               "type": "Float",
               "value": 2.0
            },
            {
               "description": "Not currently used.",
               "name": "SCfind.maskScaleZ",
               "readonly": false,
               "text": "SCfind.maskScaleZ",
               "type": "Float",
               "value": 2.0
            },
            {
               "description": "Statistic used to determine the noise in the data cube. The following options are available: standard deviation (std), median absolute deviation (mad), fitting of a Gaussian function to the flux histogram (gauss) or fitting of a Gaussian function to the negative part of the flux histogram (negative).",
               "name": "SCfind.rmsMode",
               "readonly": false,
               "text": "SCfind.rmsMode",
               "type": "String",
               "value": "negative"
            },
            {
               "description": "Not currently used.",
               "name": "SCfind.sizeFilter",
               "readonly": false,
               "text": "SCfind.sizeFilter",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Flux threshold relative to the noise level of the cube. The default value of 6.0\u2009sigma is likely to miss a large number of faint sources in most cases, and lower values will be required to maximise completeness.",
               "name": "SCfind.threshold",
               "readonly": false,
               "text": "SCfind.threshold",
               "type": "Float",
               "value": 3.5
            },
            {
               "description": "If set to true, print additional progress information. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "SCfind.verbose",
               "readonly": false,
               "text": "SCfind.verbose",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Pixel/channel range(s) to be flagged prior to source finding. Format: [[x1, x2, y1, y2, z1, z2], ...]. A place holder, '' (two single quotes), can be used for the upper range limit (x2, y2, and z2) to flag all the way to the end, e.g. [[0, '', 0, '', 0, 19]] will flag the first 20 channels of the entire cube. The default is an empty list, [], which means to not flag anything.",
               "name": "flag.regions",
               "readonly": false,
               "text": "flag.regions",
               "type": "String",
               "value": []
            },
            {
               "description": "Full path and name of input data cube. This option is mandatory, and there is no default. Note that only FITS files are currently supported by SoFiA.",
               "name": "import.inFile",
               "readonly": false,
               "text": "import.inFile",
               "type": "String",
               "value": null
            },
            {
               "description": "Name of an optional file containing a mask of pixels identified as part of a source, e.g. from a previous run of SoFiA. This can be used to re-parametrise sources without repeating the source finding step. The default is to not read a mask cube.",
               "name": "import.maskFile",
               "readonly": false,
               "text": "import.maskFile",
               "type": "String",
               "value": null
            },
            {
               "description": "This parameter defines a subcube to be read in and processed by SoFiA. Depending on the value of import.subcubeMode, the range is either specified in pixels as [x1, x2, y1, y2, z1, z2] or in world coordinates as [x, y, z, rx, ry, rz] depending on the value of import.subcubeMode. In the latter case, x, y and z define the centre of the subcube, and rx, ry and rz specify the half-widths in the three dimensions. If world coordinates are used, all parameters must be in the native format as defined in the header of the data cube; e.g. if CUNIT3 is 'Hz' then both z and rz must be given in hertz. The default is an empty list, [], which means to read the entire cube.",
               "name": "import.subcube",
               "readonly": false,
               "text": "import.subcube",
               "type": "String",
               "value": []
            },
            {
               "description": "This parameter defines whether import.subcube is specified in pixels (pixel) or in world coordinates (world).",
               "name": "import.subcubeMode",
               "readonly": false,
               "text": "import.subcubeMode",
               "type": "String",
               "value": "pixel"
            },
            {
               "description": "Name of an optional file containing weights of pixels in the input cube. The weights will be applied before running the source finder. The default is to not apply weights.",
               "name": "import.weightsFile",
               "readonly": false,
               "text": "import.weightsFile",
               "type": "String",
               "value": null
            },
            {
               "description": "Analytic function used to describe the data weights as a function of x, y, and z. The default is to not apply weights. The following mathematical functions from Numpy are supported: sin(), cos(), tan(), arcsin(), arccos(), arctan(), arctan2(), sinh(), cosh(), tanh(), arcsinh(), arccosh(), arctanh(), exp(), log(), log10(), log2(), sqrt(), square(), power(), absolute(), fabs(), and sign(). Note that the weights function is not applied whenever a weights cube is specified (see import.weightsFile).",
               "name": "import.weightsFunction",
               "readonly": false,
               "text": "import.weightsFunction",
               "type": "String",
               "value": null
            },
            {
               "description": "Minimum required extent in first dimension of genuine sources after merging. Sources below this size will be discarded.",
               "name": "merge.minSizeX",
               "readonly": false,
               "text": "merge.minSizeX",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Minimum required extent in second dimension of genuine sources after merging. Sources below this size will be discarded.",
               "name": "merge.minSizeY",
               "readonly": false,
               "text": "merge.minSizeY",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Minimum required extent in third dimension of genuine sources after merging. Sources below this size will be discarded.",
               "name": "merge.minSizeZ",
               "readonly": false,
               "text": "merge.minSizeZ",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Merging radius in first dimension in pixels. Note that a value of 0 means that no merging takes place and each detected pixel is retained as a separate source.",
               "name": "merge.radiusX",
               "readonly": false,
               "text": "merge.radiusX",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Merging radius in second dimension in pixels. Note that a value of 0 means that no merging takes place and each detected pixel is retained as a separate source.",
               "name": "merge.radiusY",
               "readonly": false,
               "text": "merge.radiusY",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Merging radius in third dimension in pixels. Note that a value of 0 means that no merging takes place and each detected pixel is retained as a separate source.",
               "name": "merge.radiusZ",
               "readonly": false,
               "text": "merge.radiusZ",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "This parameter defines the full path to the input catalogue required for catalogue-based source finding (see parameter steps.doOptical). There is no default. Catalogues must be comma-separated and contain at least four columns containing a unique ID number, right ascension, declination and frequency/velocity of the positions to be searched. All parameters must be specified in the native WCS units of the cube. In addition, a header line must be provided, with the four parameter columns above listed as id, ra, dec and z.",
               "name": "optical.sourceCatalogue",
               "readonly": false,
               "text": "optical.sourceCatalogue",
               "type": "String",
               "value": null
            },
            {
               "description": "This parameter defines the spatial size of the sub-cube to be searched around each catalogue position. The size must be specified in the native units of the data cube, e.g. in degrees.",
               "name": "optical.spatSize",
               "readonly": false,
               "text": "optical.spatSize",
               "type": "Float",
               "value": 0.01
            },
            {
               "description": "This parameter defines the spectral size of the sub-cube to be searched around each catalogue position. The size must be specified in the native units of the data cube, e.g. in km/s or Hz.",
               "name": "optical.specSize",
               "readonly": false,
               "text": "optical.specSize",
               "type": "Float",
               "value": 100000.0
            },
            {
               "description": "If set to true, a separate output catalogue will be created for each input position, containing only the sources found in that subcube. In addition, a single, merged catalogue will also be created. By default this parameter is set to false, in which case only a single output catalogue file is generated.",
               "name": "optical.storeMultiCat",
               "readonly": false,
               "text": "optical.storeMultiCat",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Sets the maximum mask dilation along the spectral axis. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "parameters.dilateChanMax",
               "readonly": false,
               "text": "parameters.dilateChanMax",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Run the mask optimisation algorithm based on spatially dilating the initial mask to achieve more accurate flux measurements. The advantage of this algorithm is that it preserves the source shape (also see parameters.optimiseMask).",
               "name": "parameters.dilateMask",
               "readonly": false,
               "text": "parameters.dilateMask",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Sets the maximum mask dilation (in pixels) in the spatial domain. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "parameters.dilatePixMax",
               "readonly": false,
               "text": "parameters.dilatePixMax",
               "type": "Integer",
               "value": 10
            },
            {
               "description": "Defines convergence of the mask dilation. Dilation  stops when the relative flux growth is below 1+ this threshold. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "parameters.dilateThreshold",
               "readonly": false,
               "text": "parameters.dilateThreshold",
               "type": "Float",
               "value": 0.02
            },
            {
               "description": "Fit the Busy Function (Westmeier et al. 2014) to the integrated spectrum of each source for more accurate parameterisation.",
               "name": "parameters.fitBusyFunction",
               "readonly": false,
               "text": "parameters.fitBusyFunction",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Run the mask optimisation algorithm based on fitting and growing ellipses to achieve more accurate flux measurements. Note that the improved integrated fluxes obtained by this algorithm will come at the cost of increased statistical uncertainties in most source parameters (also see parameters.dilateMask).",
               "name": "parameters.optimiseMask",
               "readonly": false,
               "text": "parameters.optimiseMask",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "This parameter controls whether the kernel size to be used for reliability calculation should be determined automatically (true) or manually (false). Default is true. If set to false, the reliability.kernel parameter must be used to specify the kernel size. Note that this is a hidden option not accessible through the graphical user interface. Also see the reliability.negPerBin and reliability.skellamTol parameters.",
               "name": "reliability.autoKernel",
               "readonly": false,
               "text": "reliability.autoKernel",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Minimum value of the sum of the pixel values, Sum(Si), divided by the global RMS noise level, sigma, and the square root of the number of pixels, N, for a source to be considered reliable. This parameter is a proxy for integrated signal-to-noise ratio, SNRint = Sum(Si) / [sigmaxsqrt(N)xsqrt(Omega)], where Omega is the solid angle of the beam, but has not yet been divided by the square root of the beam solid angle in pixels.",
               "name": "reliability.fMin",
               "readonly": false,
               "text": "reliability.fMin",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Size of the 3D smoothing kernel in log(parameter) space (see reliability.parSpace). This parameter will be ignored if reliability.autoKernel is set to true (default behaviour). Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "reliability.kernel",
               "readonly": false,
               "text": "reliability.kernel",
               "type": "String",
               "value": [
                  0.15,
                  0.05,
                  0.1
               ]
            },
            {
               "description": "For each source parameter defined in reliability.parSpace this parameter defines whether the reliability analysis is carried out in linear space (0) or in logarithmic space (1). Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "reliability.logPars",
               "readonly": false,
               "text": "reliability.logPars",
               "type": "String",
               "value": [
                  1,
                  1,
                  1
               ]
            },
            {
               "description": "If set to true, PDF files showing the distribution of positive and negative detections in parameter space will be created for diagnostic purposes.",
               "name": "reliability.makePlot",
               "readonly": false,
               "text": "reliability.makePlot",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "This parameter defines the minimum number of negative detections per bin in parameter space required for the automatic kernel size determination. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "reliability.negPerBin",
               "readonly": false,
               "text": "reliability.negPerBin",
               "type": "Float",
               "value": 1.0
            },
            {
               "description": "Defines the 3D parameter space in which to determine reliability. It is strongly recommended to use the pre-defined default settings. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "reliability.parSpace",
               "readonly": false,
               "text": "reliability.parSpace",
               "type": "String",
               "value": [
                  "n_pix",
                  "snr_sum",
                  "snr_max"
               ]
            },
            {
               "description": "If autoKernel is set to true, then this parameter will determine whether the kernel size will be set automatically by SoFiA (0) or scaled by the given factor (> 0). If autoKernel is false, this option will be ignored.",
               "name": "reliability.scaleKernel",
               "readonly": false,
               "text": "reliability.scaleKernel",
               "type": "Float",
               "value": 0.55
            },
            {
               "description": "Tolerance parameter for reliability kernel size determination. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "reliability.skellamTol",
               "readonly": false,
               "text": "reliability.skellamTol",
               "type": "Float",
               "value": -0.5
            },
            {
               "description": "Discard all sources whose reliability is below this threshold.",
               "name": "reliability.threshold",
               "readonly": false,
               "text": "reliability.threshold",
               "type": "Float",
               "value": 0.95
            },
            {
               "description": "Controls whether to use the full covariance kernel when smoothing the distribution of detections in parameter space. The default is true. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "reliability.usecov",
               "readonly": false,
               "text": "reliability.usecov",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Size of the edge (in pixels) to be excluded in first (spatial) dimension. The setting will be ignored if scaleNoise.method = local.",
               "name": "scaleNoise.edgeX",
               "readonly": false,
               "text": "scaleNoise.edgeX",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Size of the edge (in pixels) to be excluded in second (spatial) dimension. The setting will be ignored if scaleNoise.method = local.",
               "name": "scaleNoise.edgeY",
               "readonly": false,
               "text": "scaleNoise.edgeY",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Size of the edge (in pixels) to be excluded in third (spectral) dimension. The setting will be ignored if scaleNoise.method = local.",
               "name": "scaleNoise.edgeZ",
               "readonly": false,
               "text": "scaleNoise.edgeZ",
               "type": "Integer",
               "value": null
            },
            {
               "description": "If set to true, apply noise normalisation in first (spatial) dimension. The setting will be ignored if scaleNoise.method = local.",
               "name": "scaleNoise.scaleX",
               "readonly": false,
               "text": "scaleNoise.scaleX",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, apply noise normalisation in second (spatial) dimension. The setting will be ignored if scaleNoise.method = local.",
               "name": "scaleNoise.scaleY",
               "readonly": false,
               "text": "scaleNoise.scaleY",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, apply noise normalisation in third (spectral) dimension. The setting will be ignored if scaleNoise.method = local.",
               "name": "scaleNoise.scaleZ",
               "readonly": false,
               "text": "scaleNoise.scaleZ",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Statistic used to determine the noise in the data cube. The following options are available: standard deviation (std), median absolute deviation (mad), fitting of a Gaussian to the flux histogram (gauss) or fitting of a Gaussian function to the negative part of the flux histogram (negative).",
               "name": "scaleNoise.statistic",
               "readonly": false,
               "text": "scaleNoise.statistic",
               "type": "String",
               "value": "negative"
            },
            {
               "description": "Pixel values assumed by the smoothing algorithm outside the boundaries of the cube. The following options are available: 'constant' assume a constant value of 0; 'nearest' assume a constant value equal to that of the nearest edge pixel; 'reflect' mirror values at the edge, thereby duplicating the edge pixel itself; 'mirror' mirror values at the centre of the outermost pixel, thereby avoiding duplication of the edge pixel itself; 'wrap' copy values from the opposite edge of the cube.",
               "name": "smooth.edgeMode",
               "readonly": false,
               "text": "smooth.edgeMode",
               "type": "String",
               "value": "constant"
            },
            {
               "description": "Type of smoothing kernel used in both spatial and spectral smoothing. The possible options are gaussian, boxcar or median.",
               "name": "smooth.kernel",
               "readonly": false,
               "text": "smooth.kernel",
               "type": "String",
               "value": "gaussian"
            },
            {
               "description": "Kernel size in pixels for the first (spatial) coordinate. For Gaussian kernels the value refers to the FWHM.",
               "name": "smooth.kernelX",
               "readonly": false,
               "text": "smooth.kernelX",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Kernel size in pixels for the second (spatial) coordinate. For Gaussian kernels the value refers to the FWHM.",
               "name": "smooth.kernelY",
               "readonly": false,
               "text": "smooth.kernelY",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "Kernel size in pixels for the third (spectral) coordinate. For Gaussian kernels the value refers to the FWHM.",
               "name": "smooth.kernelZ",
               "readonly": false,
               "text": "smooth.kernelZ",
               "type": "Float",
               "value": 3.0
            },
            {
               "description": "If set to true, run the Characterised Noise HI (CNHI) source finder by Jurek (2012).",
               "name": "steps.doCNHI",
               "readonly": false,
               "text": "steps.doCNHI",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, a range of data products for each individual source will be created and written to disk, including a small sub-cube, moment-0, 1 and 2 maps, a position\u2013velocity diagram along the kinematical major axis and an integrated spectrum of the source.",
               "name": "steps.doCubelets",
               "readonly": false,
               "text": "steps.doCubelets",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Creates additional debugging data products.",
               "name": "steps.doDebug",
               "readonly": false,
               "text": "steps.doDebug",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag pixel and channel ranges before proceeding. Details are specified with the flag.file and flag.regions options.",
               "name": "steps.doFlag",
               "readonly": false,
               "text": "steps.doFlag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, pixels detected by the source finder will be merged into final sources based on user-defined separation and size criteria.",
               "name": "steps.doMerge",
               "readonly": false,
               "text": "steps.doMerge",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, a moment-0 map of all detected sources will be created and saved to disk.",
               "name": "steps.doMom0",
               "readonly": false,
               "text": "steps.doMom0",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, a moment-1 map of all detected sources will be created and saved to disk.",
               "name": "steps.doMom1",
               "readonly": false,
               "text": "steps.doMom1",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, run SoFiA on multiple, smaller sub-cubes centred on positions defined in an input source catalogue. A catalogue file will need to be specified (see parameter optical.sourceCatalogue). This could, e.g., be an optical galaxy catalogue with the aim to search for HI detections at the positions of all galaxies. Note that optical_find.py must be called in this case when running SoFiA from the command line interface!",
               "name": "steps.doOptical",
               "readonly": false,
               "text": "steps.doOptical",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, run the mask optimisation and source parameterisation module.",
               "name": "steps.doParameterise",
               "readonly": false,
               "text": "steps.doParameterise",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, use negative detections to determine the reliability of each source based on the algorithm of Serra, Jurek & Fl\u00f6er (2012).",
               "name": "steps.doReliability",
               "readonly": false,
               "text": "steps.doReliability",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, run the smooth + clip finder.",
               "name": "steps.doSCfind",
               "readonly": false,
               "text": "steps.doSCfind",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If set to true, normalise noise levels across the data cube prior to source finding.",
               "name": "steps.doScaleNoise",
               "readonly": false,
               "text": "steps.doScaleNoise",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If set to true, spatially and spectrally smooth the data cube prior to source finding.",
               "name": "steps.doSmooth",
               "readonly": false,
               "text": "steps.doSmooth",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, source finding can be carried out on a subcube to be defined by the import.subcube and import.subcubeMode options.",
               "name": "steps.doSubcube",
               "readonly": false,
               "text": "steps.doSubcube",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, run the threshold finder.",
               "name": "steps.doThreshold",
               "readonly": false,
               "text": "steps.doThreshold",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, decompose the data cube into wavelet components using the 2D\u20131D wavelet decomposition algorithm of Fl\u00f6er & Winkel (2012).",
               "name": "steps.doWavelet",
               "readonly": false,
               "text": "steps.doWavelet",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, write output catalogue(s) to disk. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "steps.doWriteCat",
               "readonly": false,
               "text": "steps.doWriteCat",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, save a copy of the filtered data cube. Note that this will only make sense if at least one of the input filters was applied.",
               "name": "steps.doWriteFilteredCube",
               "readonly": false,
               "text": "steps.doWriteFilteredCube",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, save the mask cube.",
               "name": "steps.doWriteMask",
               "readonly": false,
               "text": "steps.doWriteMask",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Is the threshold specified by threshold.threshold relative to the noise level or in absolute flux units?",
               "name": "threshold.clipMethod",
               "readonly": false,
               "text": "threshold.clipMethod",
               "type": "String",
               "value": "relative"
            },
            {
               "description": "Statistic used to determine the noise in the data cube. The following options are available: standard deviation (std), median absolute deviation (mad), fitting of a Gaussian function to the flux histogram (gauss) or fitting of a Gaussian function to the negative part of the flux histogram (negative).",
               "name": "threshold.rmsMode",
               "readonly": false,
               "text": "threshold.rmsMode",
               "type": "String",
               "value": "std"
            },
            {
               "description": "Absolute or relative flux threshold (see threshold.clipMethod). The default value of 4.0\u2009sigma is likely to miss a large number of faint sources in most cases, and lower values will be required to maximise completeness.",
               "name": "threshold.threshold",
               "readonly": false,
               "text": "threshold.threshold",
               "type": "Float",
               "value": 4.0
            },
            {
               "description": "If set to true, print additional progress information. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "threshold.verbose",
               "readonly": false,
               "text": "threshold.verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Number of iterations to be used in the wavelet reconstruction process.",
               "name": "wavelet.iterations",
               "readonly": false,
               "text": "wavelet.iterations",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "If set to true, include only positive wavelet components in the decomposition. Otherwise, negative components will be included as well.",
               "name": "wavelet.positivity",
               "readonly": false,
               "text": "wavelet.positivity",
               "type": "Boolean",
               "value": false
            },
            {
               "description": null,
               "name": "wavelet.scaleXY",
               "readonly": false,
               "text": "wavelet.scaleXY",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Number of spectral scales used in the decomposition. The default value of -1 will automatically determine the appropriate number of scales based on the actual data cube.",
               "name": "wavelet.scaleZ",
               "readonly": false,
               "text": "wavelet.scaleZ",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Flux threshold used in the wavelet reconstruction processs in multiples of the rms noise. Note that this threshold only determines which wavelet components are added to the decomposed cube. Any source finder run after the reconstruction will use its own flux threshold.",
               "name": "wavelet.threshold",
               "readonly": false,
               "text": "wavelet.threshold",
               "type": "Float",
               "value": 5.0
            },
            {
               "description": "Optional base name of all output files. If not specified, the input file name will be used by default.",
               "name": "writeCat.basename",
               "readonly": false,
               "text": "writeCat.basename",
               "type": "String",
               "value": null
            },
            {
               "description": "If set to true, use gzip to compress all output files.",
               "name": "writeCat.compress",
               "readonly": false,
               "text": "writeCat.compress",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, any existing output files will automatically get overwritten. If set to false, the pipeline will print an error message for any output file that already exists and skip writing that file.",
               "name": "writeCat.overwrite",
               "readonly": false,
               "text": "writeCat.overwrite",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "List of parameters to appear in source catalogue. Format: ['par1', 'par2', ...]. An asterisk, ['*'], means that all available parameters are written to the output catalogue. Note that, depending on the actual pipeline settings, some selected parameters may not appear in the source catalogue.",
               "name": "writeCat.parameters",
               "readonly": false,
               "text": "writeCat.parameters",
               "type": "String",
               "value": [
                  "*"
               ]
            },
            {
               "description": "If set to true, write catalogue in human-readable ASCII format.",
               "name": "writeCat.writeASCII",
               "readonly": false,
               "text": "writeCat.writeASCII",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If set to true, write catalogue in SQL format for insertion into an SQL database.",
               "name": "writeCat.writeSQL",
               "readonly": false,
               "text": "writeCat.writeSQL",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, write catalogue in VO table format (XML).",
               "name": "writeCat.writeXML",
               "readonly": false,
               "text": "writeCat.writeXML",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "If set to true (default), SoFiA will exit with an error message whenever unrecognised or multiply-defined parameters are encountered in the parameter file. If set to false, SoFiA will ignore all unknown and redefined parameter settings and print a warning message for each case. This is a hidden option not available in the GUI.",
               "name": "pipeline.pedantic",
               "readonly": false,
               "text": "pipeline.pedantic",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, then a copy of the noise cube estimated by SoFiA will be written to disk as a FITS file. This will only work if noise scaling is enabled (steps.doScaleNoise = true).",
               "name": "steps.doWriteNoiseCube",
               "readonly": false,
               "text": "steps.doWriteNoiseCube",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Full path and file name of an optional flagging cube that must be of the same dimensions as the input cube. All pixels that are flagged (i.e. set to BLANK) in the flagging cube will also be flagged in the input cube prior to source finding. The default is to not apply flags.",
               "name": "flag.file",
               "readonly": false,
               "text": "flag.file",
               "type": "String",
               "value": null
            },
            {
               "description": "If set to global, the noise measurement will be carried out on the entire projected image plane perpendicular to the axis along which the noise is to be scaled (default). If set to local, the noise measurement will occur in a running window of specified size on a specified grid. Note that the latter can be slow and memory-heavy and is only recommended for small cubes or 2D images that are affected by localised noise variations. If set to 1d2d normalise the noise first channel by channel along Z, and then in XY windows.",
               "name": "scaleNoise.method",
               "readonly": false,
               "text": "scaleNoise.method",
               "type": "String",
               "value": null
            },
            {
               "description": "Range of flux values to be used in noise measurement. Can be negative, positive or all to use only negative, only positive or all pixels, respectively.",
               "name": "scaleNoise.fluxRange",
               "readonly": false,
               "text": "scaleNoise.fluxRange",
               "type": "String",
               "value": null
            },
            {
               "description": "This defines the spatial window size over which the local noise measurement is taken. The setting will only be relevant if scaleNoise.method = local. It must be an odd number of 1 or greater.",
               "name": "scaleNoise.windowSpatial",
               "readonly": false,
               "text": "scaleNoise.windowSpatial",
               "type": "Integer",
               "value": null
            },
            {
               "description": "This defines the spectral window size over which the local noise measurement is taken. The setting will only be relevant if scaleNoise.method = local. It must be an odd number of 1 or greater.",
               "name": "scaleNoise.windowSpectral",
               "readonly": false,
               "text": "scaleNoise.windowSpectral",
               "type": "Integer",
               "value": null
            },
            {
               "description": "This defines the separation of spatial grid points on which the local noise measurement takes place. The setting will only be relevant if scaleNoise.method = local. It must be an odd number of 1 or greater. Alternatively, if set to 0 (default), SoFiA will automatically determine an appropriate grid size based on the specified window size. This is a hidden option not available in the GUI.",
               "name": "scaleNoise.gridSpatial",
               "readonly": false,
               "text": "scaleNoise.gridSpatial",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Select if the local noise measurement made by SoFiA should be interpolated in between grid points or not. The default is none which will simply fill each grid cell with the noise value. linear will carry out a linear interpolation between grid points, which is slower, but results in smoother noise maps. Lastly, cubic will carry out a cubic spline interpolation between grid points, which is by far the slowest method, but results in the smoothest noise maps. Note that this setting will only be relevant if scaleNoise.method = local.",
               "name": "scaleNoise.interpolation",
               "readonly": false,
               "text": "scaleNoise.interpolation",
               "type": "String",
               "value": null
            },
            {
               "description": "Range of flux values to be used in noise measurement. Can be negative, positive or all to use only negative, only positive or all pixels, respectively.",
               "name": "SCfind.fluxRange",
               "readonly": false,
               "text": "SCfind.fluxRange",
               "type": "String",
               "value": "all"
            },
            {
               "description": "Range of flux values to be used in noise measurement. Can be negative, positive or all to use only negative, only positive or all pixels, respectively.",
               "name": "threshold.fluxRange",
               "readonly": false,
               "text": "threshold.fluxRange",
               "type": "String",
               "value": "all"
            },
            {
               "description": null,
               "name": "port2tigger",
               "readonly": false,
               "text": "port2tigger",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, SoFiA will report its own peak memory usage at certain times throughout the pipeline run. This is a hidden option not available in the GUI.",
               "name": "pipeline.trackMemory",
               "readonly": false,
               "text": "pipeline.trackMemory",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, SoFiA will attempt to automatically flag residual continuum emission in the data on a position-by-position basis by measuring the noise along the line of sight and blanking all positions where the noise is above a given threshold with respect to the global noise level of the data cube.",
               "name": "steps.doFilterArtefacts",
               "readonly": false,
               "text": "steps.doFilterArtefacts",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, SoFiA will multiply the data cube by \u22121 in order to search for negative signals.",
               "name": "import.invertData",
               "readonly": false,
               "text": "import.invertData",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "List of source IDs to be retained in the input source mask (e.g. [1, 3, 4]). An empty list ([]) means that all sources are kept (default). Otherwise, sources not in the list will be removed from the mask before proceeding. This parameter will only take effect if import.maskFile is set.",
               "name": "import.sources",
               "readonly": false,
               "text": "import.sources",
               "type": "String",
               "value": null
            },
            {
               "description": "This defines the separation of spectral grid points on which the local noise measurement takes place. The setting will only be relevant if scaleNoise.method = local. It must be an odd number of 1 or greater. Alternatively, if set to 0 (default), SoFiA will automatically determine an appropriate grid size based on the specified window size. This is a hidden option not available in the GUI.",
               "name": "scaleNoise.gridSpectral",
               "readonly": false,
               "text": "scaleNoise.gridSpectral",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Threshold for masking lines of sight with anomalously high noise. A line of sight is masked if its noise level is more than filterArtefacts.threshold * STD above the global noise level of the data cube, where STD is the standard deviation of the distribution of the noise values across all lines of sight.",
               "name": "filterArtefacts.threshold",
               "readonly": false,
               "text": "filterArtefacts.threshold",
               "type": "Float",
               "value": 4.0
            },
            {
               "description": "Size of the box structuring element used to propagate the flagging to neighbouring lines of sight. A value of 1 means no dilation.",
               "name": "filterArtefacts.dilation",
               "readonly": false,
               "text": "filterArtefacts.dilation",
               "type": "Integer",
               "value": 3
            },
            {
               "description": "Maximum allowed extent of genuine sources in first dimension after merging. Sources above this size will be discarded. Set to -1 to disable maximum size filtering.",
               "name": "merge.maxSizeX",
               "readonly": false,
               "text": "merge.maxSizeX",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Maximum allowed extent of genuine sources in second dimension after merging. Sources above this size will be discarded. Set to -1 to disable maximum size filtering.",
               "name": "merge.maxSizeY",
               "readonly": false,
               "text": "merge.maxSizeY",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Maximum allowed extent of genuine sources in third dimension after merging. Sources above this size will be discarded. Set to -1 to disable maximum size filtering.",
               "name": "merge.maxSizeZ",
               "readonly": false,
               "text": "merge.maxSizeZ",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Minimum required number of voxels of genuine sources after merging. Sources below this limit will be discarded. Note that this is a hidden option not available in the GUI.",
               "name": "merge.minVoxels",
               "readonly": false,
               "text": "merge.minVoxels",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Maximum allowed number of voxels of genuine sources after merging. Sources above this limit will be discarded. Set to -1 to disable maximum size filtering. Note that this is a hidden option not available in the GUI.",
               "name": "merge.maxVoxels",
               "readonly": false,
               "text": "merge.maxVoxels",
               "type": "Integer",
               "value": -1
            },
            {
               "description": "Minimum required number of lines-of-sight (i.e. spatial pixels) of genuine sources after merging. Sources below this limit will be discarded. Note that this is a hidden option not available in the GUI.",
               "name": "merge.minLoS",
               "readonly": false,
               "text": "merge.minLoS",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Maximum allowed number of lines-of-sight (i.e. spatial pixels) of genuine sources after merging. Sources above this limit will be discarded. Set to -1 to disable maximum size filtering. Note that this is a hidden option not available in the GUI.",
               "name": "merge.maxLoS",
               "readonly": false,
               "text": "merge.maxLoS",
               "type": "Integer",
               "value": -1
            },
            {
               "description": null,
               "name": "merge.minFill",
               "readonly": false,
               "text": "merge.minFill",
               "type": "Integer",
               "value": -1
            },
            {
               "description": null,
               "name": "merge.maxFill",
               "readonly": false,
               "text": "merge.maxFill",
               "type": "Integer",
               "value": 2
            },
            {
               "description": "Probably some minimum flux limit. Note that this is a hidden option not available in the GUI.",
               "name": "merge.minIntens",
               "readonly": false,
               "text": "merge.minIntens",
               "type": "Float",
               "value": "-9e30"
            },
            {
               "description": "Probably some maximum flux limit. Note that this is a hidden option not available in the GUI.",
               "name": "merge.maxIntens",
               "readonly": false,
               "text": "merge.maxIntens",
               "type": "Float",
               "value": "9e30"
            },
            {
               "description": "If set to true, only positive signals will be merged into detections, and all negative signals will be discarded. This is useful for data sets with significant negative artefacts, such as sidelobes. The default is false. Warning: Enabling positivity is dangerous and will render some of SoFiA\u2019s most powerful algorithms useless, including mask optimisation and reliability calculation. Only use this feature if you are fully aware of its risks and consequences!",
               "name": "merge.positivity",
               "readonly": false,
               "text": "merge.positivity",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If set to true, statistical uncertainties of several source parameters, including centroids and line widths, will be estimated. Please use this feature with great caution, as statistical uncertainties are not likely to be representative of the true uncertainties, in particular when systematic errors are present. Note that this is a hidden option not accessible through the graphical user interface.",
               "name": "parameters.getUncertainties",
               "readonly": false,
               "text": "parameters.getUncertainties",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "if True normalise noise variations within the cube after each smoothing operation within the S+C source finder and befpre applying the detection threshold.",
               "name": "scaleNoise.perSCkernel",
               "readonly": false,
               "text": "scaleNoise.perSCkernel",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "sofia",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Tools for manipulating measurement sets (MSs)",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Tools for manipulating measurement sets (MSs)",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/sunblocker:1.0.2"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " msutils"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MSUtils command to execute",
               "name": "command",
               "readonly": false,
               "text": "command",
               "type": "String",
               "value": null
            },
            {
               "description": "Input MS name",
               "name": "inset",
               "readonly": false,
               "text": "inset",
               "type": "String",
               "value": null
            },
            {
               "description": "Output MS name",
               "name": "outset",
               "readonly": false,
               "text": "outset",
               "type": "String",
               "value": null
            },
            {
               "description": "Column name",
               "name": "col",
               "readonly": false,
               "text": "col",
               "type": "String",
               "value": null
            },
            {
               "description": "bool array with True for channels to base the analysis on 'False' channels will be ignored",
               "name": "channels",
               "readonly": false,
               "text": "channels",
               "type": "String",
               "value": null
            },
            {
               "description": "nx2 array with antenna pairs for baselines to base the analysis on",
               "name": "baselines",
               "readonly": false,
               "text": "baselines",
               "type": "String",
               "value": null
            },
            {
               "description": "Fields to select or None if all fields should be used",
               "name": "fields",
               "readonly": false,
               "text": "fields",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Size of image in pixels",
               "name": "imsize",
               "readonly": false,
               "text": "imsize",
               "type": "Integer",
               "value": 512
            },
            {
               "description": "Size of cell in arcsec",
               "name": "cell",
               "readonly": false,
               "text": "cell",
               "type": "Float",
               "value": 2
            },
            {
               "description": "Flagging based on 'all' data, repeated per 'antenna', or repeated per 'baseline'",
               "name": "mode",
               "readonly": false,
               "text": "mode",
               "type": "String",
               "value": null
            },
            {
               "description": "Polarization selection, Stokes 'i', or Stokes 'q'",
               "name": "pol",
               "readonly": false,
               "text": "pol",
               "type": "String",
               "value": null
            },
            {
               "description": "Method to determine sigma, 'fit': fit Gaussian at the max to determine sigma, 'mad': use median and standard deviation as derived using MAD statistics, standard deviation otherwise",
               "name": "threshmode",
               "readonly": false,
               "text": "threshmode",
               "type": "String",
               "value": null
            },
            {
               "description": "Distance from average beyond which data are flagged in units of sigma",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "Float",
               "value": null
            },
            {
               "description": "Each selected point is expanded in a wedge with this radial range",
               "name": "radrange",
               "readonly": false,
               "text": "radrange",
               "type": "Float",
               "value": null
            },
            {
               "description": "Each selected point is expanded in a wedge with this angular",
               "name": "angle",
               "readonly": false,
               "text": "angle",
               "type": "Float",
               "value": null
            },
            {
               "description": "Analyse data in phazer only using daytime data as selected using vampirisms",
               "name": "vampirisms",
               "readonly": false,
               "text": "vampirisms",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flag only daytime data as identified by using vampirisms",
               "name": "flagonlyday",
               "readonly": false,
               "text": "flagonlyday",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Show histogram and cutoff line in a viewgraph",
               "name": "show",
               "readonly": false,
               "text": "show",
               "type": "String",
               "value": null
            },
            {
               "description": "Directory to put viewgraphs in (default: current directory)",
               "name": "showdir",
               "readonly": false,
               "text": "showdir",
               "type": "String",
               "value": null
            },
            {
               "description": "Do not apply flags, but (e.g. produce viewgraphs only)",
               "name": "dryrun",
               "readonly": false,
               "text": "dryrun",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Switch commenting on and off",
               "name": "verb",
               "readonly": false,
               "text": "verb",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Longitude of observatory in astropy units (defaults to what is found in the data set)",
               "name": "lon",
               "readonly": false,
               "text": "lon",
               "type": "String",
               "value": null
            },
            {
               "description": "Latitude of observatory in astropy units (defaults to what is found in the data set)",
               "name": "lat",
               "readonly": false,
               "text": "lat",
               "type": "String",
               "value": null
            },
            {
               "description": "Elevation of observatory in astropy units (defaults to what is found in the data set)",
               "name": "hei",
               "readonly": false,
               "text": "hei",
               "type": "String",
               "value": null
            },
            {
               "description": "Time to be flagged before sunrise in astropy units (defaults to 0)",
               "name": "avantsoleil",
               "readonly": false,
               "text": "avantsoleil",
               "type": "Float",
               "value": null
            },
            {
               "description": "Time to be flagged after sunrise in astropy units (defaults to 0)",
               "name": "apresnuit",
               "readonly": false,
               "text": "apresnuit",
               "type": "Float",
               "value": null
            },
            {
               "description": "Time to be flagged before sunset in astropy units (defaults to 0)",
               "name": "avantnuit",
               "readonly": false,
               "text": "avantnuit",
               "type": "Float",
               "value": null
            },
            {
               "description": "Time to be flagged after sunset in astropy units (defaults to 0)",
               "name": "apresoleil",
               "readonly": false,
               "text": "apresoleil",
               "type": "Float",
               "value": null
            },
            {
               "description": "Flag all day time (defaults to True)",
               "name": "nononsoleil",
               "readonly": false,
               "text": "nononsoleil",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Height above horizon of the sun to define sunset in astropy units (defaults to -34 arcmin)",
               "name": "horizon",
               "readonly": false,
               "text": "horizon",
               "type": "String",
               "value": null
            },
            {
               "description": "Restrict analysis to visibilities with a baseline b with uvmax > b > uvmin, in units of wavelengths",
               "name": "uvmax",
               "readonly": false,
               "text": "uvmax",
               "type": "Float",
               "value": null
            },
            {
               "description": "Restrict analysis to visibilities with a baseline b with uvmax > b > uvmin, in units of wavelengths",
               "name": "uvmin",
               "readonly": false,
               "text": "uvmin",
               "type": "Float",
               "value": 0
            },
            {
               "description": "Invert flags before applying/returning them (defaults to False)",
               "name": "flinvert",
               "readonly": false,
               "text": "flinvert",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "sunblocker",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Source finding in radio images",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Source finding in radio images",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/tigger:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " tigger-convert"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input skymodel",
               "name": "input-skymodel",
               "readonly": false,
               "text": "input-skymodel",
               "type": "String",
               "value": true
            },
            {
               "description": "Output skymodel",
               "name": "output-skymodel",
               "readonly": false,
               "text": "output-skymodel",
               "type": "String",
               "value": true
            },
            {
               "description": "Append this model to input-skymodel, then write to output-skymodel",
               "name": "append",
               "readonly": false,
               "text": "append",
               "type": "String",
               "value": null
            },
            {
               "description": "Forces overwrite of output model.",
               "name": "force",
               "readonly": false,
               "text": "force",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Input model type",
               "name": "type",
               "readonly": false,
               "text": "type",
               "type": "String",
               "value": null
            },
            {
               "description": "Output model type.",
               "name": "output-type",
               "readonly": false,
               "text": "output-type",
               "type": "String",
               "value": null
            },
            {
               "description": "Append another model to input model. May be given multiple times. --append-type=TYPE  Appended model type (Tigger, ASCII, BBS, NEWSTAR, AIPSCC, AIPSCCFITS, Gaul, auto). Default is none.",
               "name": "append-type",
               "readonly": false,
               "text": "append-type",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Input format, for ASCII or BBS tables. For ASCII tables, default is 'name ra_h ra_m ra_s dec_d dec_m dec_s i q u v spi rm emaj_s emin_s pa_d freq0 tags...'. For BBS tables, the default format is specified in the file header.",
               "name": "format",
               "readonly": false,
               "text": "format",
               "type": "String",
               "value": null
            },
            {
               "description": "Format of appended file, for ASCII or BBS tables. Default is to use 'format'.",
               "name": "append-format",
               "readonly": false,
               "text": "append-format",
               "type": "String",
               "value": null
            },
            {
               "description": "Output format, for ASCII or BBS tables. If the model was originally imported from an ASCII or BBS table, the default output format will be the same as the original format.",
               "name": "output-format",
               "readonly": false,
               "text": "output-format",
               "type": "String",
               "value": null
            },
            {
               "description": "Prints help on format strings.",
               "name": "help-format",
               "readonly": false,
               "text": "help-format",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Minimal source extent, when importing NEWSTAR or ASCII files. Sources with a smaller extent will be treated as point sources.",
               "name": "min-extent",
               "readonly": false,
               "text": "min-extent",
               "type": "Float",
               "value": 0.0
            },
            {
               "description": "Extract sources with the specified tags.",
               "name": "tags",
               "readonly": false,
               "text": "tags",
               "type": "String",
               "value": null
            },
            {
               "description": "Selects a subset of sources by comparing the named TAG to a float VALUE. '<>' represents the comparison operator, and can be one of == (or =),!=,<=,<,>,>=. Alternatively, you may use the FORTRAN-style operators .eq.,.ne.,.le.,.lt.,.gt.,.ge. Multiple select options may be given, in which case the effect is a logical- AND. Note that VALUE may be followed by one of the characters d, m or s, in which case it will be converted from degrees, minutes or seconds into radians. This is useful for selections such as 'r<5d'. 'remove-nans' Removes the named source(s) from the model. NAME may contain * and ? wildcards.",
               "name": "select",
               "readonly": false,
               "text": "select",
               "type": "String",
               "value": null
            },
            {
               "description": "Treat fluxes as apparent, and rescale them into intrinsic using the supplied primary beam model (see 'primary-beam' option).",
               "name": "app-to-int",
               "readonly": false,
               "text": "app-to-int",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Treat fluxes as intrinsic, and rescale them into apparent using the supplied primary beam model (see 'primary-beam' option).",
               "name": "int-to-app",
               "readonly": false,
               "text": "int-to-app",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Convert NEWSTAR apparent fluxes in input model to intrinsic. Only works for NEWSTAR or NEWSTAR-derived input models.",
               "name": "newstar-app-to-int",
               "readonly": false,
               "text": "newstar-app-to-int",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Convert NEWSTAR intrinsic fluxes in input model to apparent. Only works for NEWSTAR or NEWSTAR-derived input models.",
               "name": "newstar-int-to-app",
               "readonly": false,
               "text": "newstar-int-to-app",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Override coordinates of the nominal field center specified in the input model. Use the form 'Xdeg,Ydeg' or 'Xdeg,Yrad' to specify RA,Dec in degrees or radians, or else a a pyrap.measures direction string of the form REF,C1,C2, for example 'j2000,1h5m0.2s,+30d14m15s'. See the pyrap.measures documentation for more details.",
               "name": "center",
               "readonly": false,
               "text": "center",
               "type": "String",
               "value": null
            },
            {
               "description": "Recompute the 'r' (radial distance from center) attribute of each source based on the current field  center. 'ref-freq'=MHz Set or change the reference frequency of the model.",
               "name": "refresh-r",
               "readonly": false,
               "text": "refresh-r",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply a primary beam expression to estimate apparent fluxes. Any valid Python expression using the variables 'r' and 'fq' is accepted. Use 'refresh' to re-estimate fluxes using the current expression. Example (for the WSRT-like 25m dish PB): 'cos(min(65*fq*1e-9*r,1.0881))**6'. OR: give a set of FITS primary beam patterns of the form e.g. FILENAME_$(xy)_$(reim).fits, these are the  same FITS files used in MeqTrees pybeams_fits.",
               "name": "primary-beam",
               "readonly": false,
               "text": "primary-beam",
               "type": "String",
               "value": null
            },
            {
               "description": "Use XY basis correlations for beam filenames and Mueller matrices.",
               "name": "linear-pol",
               "readonly": false,
               "text": "linear-pol",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "CTYPE for L axis in the FITS PB file. Note that our internal L points East (increasing RA), if the FITS beam axis points the opposite way, prefix the CTYPE with a '-'' character.",
               "name": "fits-l-axis",
               "readonly": false,
               "text": "fits-l-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "CTYPE for M axis in the FITS PB file. Note that our internal M points North (increasing Dec), if the FITS beam axis points the opposite way, prefix the CTYPE with a '-'' character.",
               "name": "fits-m-axis",
               "readonly": false,
               "text": "fits-m-axis",
               "type": "String",
               "value": null
            },
            {
               "description": "Use given frequency (in MHz) for primary beam model, rather than the model reference frequency",
               "name": "beam-freq",
               "readonly": false,
               "text": "beam-freq",
               "type": "Float",
               "value": null
            },
            {
               "description": "when using a FITS beam, clip (power) beam gains at this level to keep intrinsic source fluxes from blowing up. Sources below this beamgain will be tagged 'nobeam'. Default: 0.001",
               "name": "beam-clip",
               "readonly": false,
               "text": "beam-clip",
               "type": "Float",
               "value": null
            },
            {
               "description": "perform a spectral index fit to each source based on a frequency dependent FITS beam, requires --primary-beam option to be used with a FITS file. Apply this spectral index to LSM sources. Must supply a band width (centred on --beam-freq) over which the beam spi is estimated",
               "name": "beam-spi",
               "readonly": false,
               "text": "beam-spi",
               "type": "Float",
               "value": null
            },
            {
               "description": "Apply beam-derived spectral indices even to sources without an intrinsic spectrum. Default is to only apply to sources that already have a spectrum. 'beam-nopol' apply intensity beam model only, ignoring polarization. Default is to use polarization. 'beam-diag' use diagonal Jones terms only for beam model. Default is to use all four terms if available.",
               "name": "force-beam-spi-wo-spectrum",
               "readonly": false,
               "text": "force-beam-spi-wo-spectrum",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Rotate the primary beam pattern through a parallactic angle (in degrees).",
               "name": "pa",
               "readonly": false,
               "text": "pa",
               "type": "Float",
               "value": null
            },
            {
               "description": "Rotate the primary beam pattern through a range of parallactic angles (in degrees) and use the average value over PA.",
               "name": "pa-range",
               "readonly": false,
               "text": "pa-range",
               "type": "String",
               "value": null
            },
            {
               "description": "Rotate the primary beam pattern through a range of parallactic angles as given by the MS and take the average over time. This is more accurate than --pa-range.",
               "name": "pa-from-ms",
               "readonly": false,
               "text": "pa-from-ms",
               "type": "String",
               "value": null
            },
            {
               "description": "Field ID for 'pa-from-ms' calculation",
               "name": "field-id",
               "readonly": false,
               "text": "field-id",
               "type": "String",
               "value": 0
            },
            {
               "description": "Correct approach to rotational averaging is to convert Jones(PA) to Mueller(PA), then average over PA. Tigger versions<=1.3.3 took the incorrect approach of averaging Jones over PA, then converting to Mueller. Use this option to mimic the old approach.",
               "name": "beam-average-jones",
               "readonly": false,
               "text": "beam-average-jones",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Distance parameter for source clustering, 0 to disable. Default is 60.",
               "name": "cluster-dist",
               "readonly": false,
               "text": "cluster-dist",
               "type": "Float",
               "value": null
            },
            {
               "description": "Rename sources according to the COPART (cluster ordering, P.A., radial distance, type) scheme",
               "name": "rename",
               "readonly": false,
               "text": "rename",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Size of one step in radial distance for the COPART scheme.",
               "name": "radial-step",
               "readonly": false,
               "text": "radial-step",
               "type": "Float",
               "value": null
            },
            {
               "description": "Merge source clusters bearing the specified tags, replacing them with a single point source. Multiple tags may be given separated by commas. Use 'ALL' to merge all clusters.",
               "name": "merge-clusters",
               "readonly": false,
               "text": "merge-clusters",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix all source names with the given string",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": " Removes the named source(s) from the model. NAME may contain * and ? wildcards.",
               "name": "remove-source",
               "readonly": false,
               "text": "remove-source",
               "type": "String",
               "value": null
            },
            {
               "description": "Shift the sky model from the nominal center to a different field center. COORDINATES specified as per the --center option.",
               "name": "recenter",
               "readonly": false,
               "text": "recenter",
               "type": "String",
               "value": null
            },
            {
               "description": "Increase verbosity",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "use diagonal Jones terms only for beam model. Default is to use all four terms if available.",
               "name": "beam-diag",
               "readonly": false,
               "text": "beam-diag",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enables various diagnostic plots",
               "name": "enable-plots",
               "readonly": false,
               "text": "enable-plots",
               "type": "Boolean",
               "value": false
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "tigger_convert",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Restores sources from sky model into an input image, writes result to output image. If an output image is not specified, makes a name for it automatically",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Restores sources from sky model into an input image, writes result to output image. If an output image is not specified, makes a name for it automatically",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/tigger:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " tigger-restore"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input image",
               "name": "input-image",
               "readonly": false,
               "text": "input-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Sky model to restore to 'input-image'",
               "name": "input-skymodel",
               "readonly": false,
               "text": "input-skymodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Input image",
               "name": "output-image",
               "readonly": false,
               "text": "output-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Forces overwrite of output model.",
               "name": "force",
               "readonly": false,
               "text": "force",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Input model type",
               "name": "type",
               "readonly": false,
               "text": "type",
               "type": "String",
               "value": "auto"
            },
            {
               "description": "Input format, for ASCII or BBS tables. For ASCII tables, default is 'name ra_h ra_m ra_s dec_d dec_m dec_s i q u v spi rm emaj_s emin_s pa_d freq0 tags...'. For BBS tables, the default format is specified in the file header.",
               "name": "format",
               "readonly": false,
               "text": "format",
               "type": "String",
               "value": null
            },
            {
               "description": "Extract sources with the specified tags.",
               "name": "tags",
               "readonly": false,
               "text": "tags",
               "type": "String",
               "value": null
            },
            {
               "description": "Only restore the NSRC brightest sources",
               "name": "num-sources",
               "readonly": false,
               "text": "num-sources",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Rescale model fluxes by given factor. If N is given, rescale N brightest only.",
               "name": "scale",
               "readonly": false,
               "text": "scale",
               "type": "String",
               "value": null
            },
            {
               "description": "Specify restoring beam size, overriding BMAJ/BMIN/BPA keywords in input image. Use a single value (arcsec) for circular beam, or else supply major/minor size and position angle (deg).",
               "name": "restoring-beam",
               "readonly": false,
               "text": "restoring-beam",
               "type": "String",
               "value": null
            },
            {
               "description": "Determine restoring beam size by fitting PSF file, overriding BMAJ/BMIN/BPA keywords in input image. 'clear' clear contents of FITS file before adding in sources apply model primary beam function during restoration, if it's defined, and source is not tagged 'nobeam'",
               "name": "psf-file",
               "readonly": false,
               "text": "psf-file",
               "type": "String",
               "value": null
            },
            {
               "description": "Apply beamgain atribute during restoration, if it's defined, and source is not tagged 'nobeam' 'ignore-nobeam' apply PB or beamgain even if source is tagged 'nobeam'",
               "name": "beamgain",
               "readonly": false,
               "text": "beamgain",
               "type": "Float",
               "value": null
            },
            {
               "description": "Use this frequency (in MHz) (for spectral indices and primary beams)",
               "name": "freq",
               "readonly": false,
               "text": "freq",
               "type": "Float",
               "value": null
            },
            {
               "description": "Set verbosity level (0 is silent, higher numbers mean more messages)",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enable timestamps in debug messages (useful for timing)",
               "name": "timestamps",
               "readonly": false,
               "text": "timestamps",
               "type": "Boolean",
               "value": true
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "tigger_restore",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "Sets or changes tags of selected sources in the sky model. Use NAME (with shell-style wildcards allowed) to select sources by name, or  =SELTAG to select sources having the specified (non-zero) tag, or SELTAG<>SELVAL to select sources by comparing a tag to a value, where '<>'  represents a comparison operator, and can be one of == (or =),!=,<=,<,>,>= (or the FORTRAN-  style operators .eq.,.ne.,.le.,.lt.,.gt.,.ge.). SELVAL may also be followed by one of the characters  'd', 'm' or 's', in which case it will be converted from degrees, minutes or seconds into radians. This is useful for selections such as 'r<5d'. Then, with a subset of sources selected, use TAG=TYPE:VALUE (where TYPE is one of: bool, int, float, str, complex) to set a tag on the selected sources to a value of a specific type, or TAG=VALUE to determine type automatically, or +TAG to set a bool True tag, !TAG to set a False tag, and /TAG to remove a tag.",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "Sets or changes tags of selected sources in the sky model. Use NAME (with shell-style wildcards allowed) to select sources by name, or  =SELTAG to select sources having the specified (non-zero) tag, or SELTAG<>SELVAL to select sources by comparing a tag to a value, where '<>'  represents a comparison operator, and can be one of == (or =),!=,<=,<,>,>= (or the FORTRAN-  style operators .eq.,.ne.,.le.,.lt.,.gt.,.ge.). SELVAL may also be followed by one of the characters  'd', 'm' or 's', in which case it will be converted from degrees, minutes or seconds into radians. This is useful for selections such as 'r<5d'. Then, with a subset of sources selected, use TAG=TYPE:VALUE (where TYPE is one of: bool, int, float, str, complex) to set a tag on the selected sources to a value of a specific type, or TAG=VALUE to determine type automatically, or +TAG to set a bool True tag, !TAG to set a False tag, and /TAG to remove a tag.",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/tigger:1.2.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " tigger-tag"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "Input sky model",
               "name": "skymodel",
               "readonly": false,
               "text": "skymodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Saves changes to different output model. Default is to save in place.",
               "name": "output-skymodel",
               "readonly": false,
               "text": "output-skymodel",
               "type": "String",
               "value": null
            },
            {
               "description": "Tag",
               "name": "tag",
               "readonly": false,
               "text": "tag",
               "type": "String",
               "value": null
            },
            {
               "description": "Saves changes to model without prompting. Default is to prompt.",
               "name": "force",
               "readonly": false,
               "text": "force",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Transfers tags from a reference 'input-skymodel' to the 'output-skymodel/output'. That is, for every tag in the given list, finds all sources with those tags in the reference LSM,  then applies these tags to all nearby sources in LSM  (within a radius of 'tolerance' [ARCSEC]).  Saves the result to an LSM file given by -o/--output.",
               "name": "transfer-tags",
               "readonly": false,
               "text": "transfer-tags",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Tolerance for transfer tags. In arcseconds",
               "name": "tolerance",
               "readonly": false,
               "text": "tolerance",
               "type": "Float",
               "value": null
            },
            {
               "description": "(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.",
               "name": "debug",
               "readonly": false,
               "text": "debug",
               "type": "Integer",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "tigger_tag",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "A variant of the Science Data Processing flagging code, wrapped in dask, operating on Measurement Sets",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "A variant of the Science Data Processing flagging code, wrapped in dask, operating on Measurement Sets",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/tricolour:1.5.0"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " tricolour"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS to be flagged (single MS)",
               "name": "ms",
               "readonly": false,
               "text": "ms",
               "type": "String",
               "value": false
            },
            {
               "description": "YAML config file containing parameters for the flagger in the 'sum_threshold' key.",
               "name": "config",
               "readonly": false,
               "text": "config",
               "type": "String",
               "value": null
            },
            {
               "description": " Ingnore existing flags",
               "name": "ignore-flags",
               "readonly": false,
               "text": "ignore-flags",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Flagging Strategy. If 'standard' all correlations in the visibility are flagged independently. If 'polarisation' the polarised intensity sqrt(Q^2 + U^2 + V^2) is calculated and used to flag all correlations in the visibility",
               "name": "flagging-strategy",
               "readonly": false,
               "text": "flagging-strategy",
               "type": "String",
               "value": null
            },
            {
               "description": "Hint indicating the number of Measurement Set rows to read in a single chunk. Smaller and larger numbers will tend to respectively decrease or increase both memory usage and computational efficiency",
               "name": "row-chunks",
               "readonly": false,
               "text": "row-chunks",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Number of baselines in a window chunk",
               "name": "baseline-chunks",
               "readonly": false,
               "text": "baseline-chunks",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Number of workers (threads) to use. By default, set to twice the number of logical CPUs on the system. Many workers can also affect memory usage on systems with many cores.",
               "name": "nworkers",
               "readonly": false,
               "text": "nworkers",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Number of channels to dilate as int or string with units",
               "name": "dilate-masks",
               "readonly": false,
               "text": "dilate-masks",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Name of visibility data column to flag",
               "name": "data-column",
               "readonly": false,
               "text": "data-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Scan numbers to flag",
               "name": "scan-numbers",
               "readonly": false,
               "text": "scan-numbers",
               "type": "String",
               "value": null
            },
            {
               "description": "Columns to subtract from 'data-column' to form residuals to flag on",
               "name": "subtract-model-column",
               "readonly": false,
               "text": "subtract-model-column",
               "type": "String",
               "value": null
            },
            {
               "description": "Name(s) of fields to flag. Defaults to flagging all",
               "name": "field-names",
               "readonly": false,
               "text": "field-names",
               "type": "String",
               "value": null
            },
            {
               "description": "Disable the default behaviour of starting the Interactive Python Debugger upon an unhandled exception. This may be necessary for batch pipelining",
               "name": "-dpm, --disable-post-mortem",
               "readonly": false,
               "text": "-dpm, --disable-post-mortem",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Visibility and flag data is re-ordered from a MS row ordering into time-frequency windows ordered by baseline. For smaller problems, it may be possible to pack a couple of scans worth of visibility data  into memory, but for larger problem sizes, it is necessary to reorder the data on disk",
               "name": "window-backend",
               "readonly": false,
               "text": "window-backend",
               "type": "String",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "tricolour",
         "width": 200,
         "x": 0,
         "y": 0
      },
      {
         "canHaveInputs": true,
         "canHaveOutputs": true,
         "category": "Docker",
         "categoryType": "Application",
         "collapsed": false,
         "color": "#331C54",
         "description": "WSClean imaging software",
         "drawOrderHint": 0,
         "embedKey": null,
         "expanded": false,
         "fields": [
            {
               "description": "WSClean imaging software",
               "name": "image",
               "readonly": false,
               "text": "Image",
               "type": "String",
               "value": "quay.io/stimela/wsclean:1.6.3"
            },
            {
               "description": "Command to execute inside container",
               "name": "command",
               "readonly": false,
               "text": "Command",
               "type": "String",
               "value": " wsclean"
            },
            {
               "description": "User to execute the command with (can be empty)",
               "name": "user",
               "readonly": false,
               "text": "User",
               "type": "string",
               "value": ""
            },
            {
               "description": "Switch to user inside container",
               "name": "ensureUserAndSwitch",
               "readonly": false,
               "text": "Ensure User And Switch",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Remove container after termination",
               "name": "removeContainer",
               "readonly": false,
               "text": "Remove Container",
               "type": "Boolean",
               "value": true
            },
            {
               "description": "Additional volume bindings",
               "name": "additionalBindings",
               "readonly": false,
               "text": "Additional Bindings",
               "type": "String",
               "value": ""
            },
            {
               "description": "Expected execution time",
               "name": "execution_time",
               "readonly": false,
               "text": "Execution time",
               "type": "Integer",
               "value": 5
            },
            {
               "description": "Number of cores used by application",
               "name": "num_cpus",
               "readonly": false,
               "text": "Num CPUs",
               "type": "Integer",
               "value": 1
            },
            {
               "description": "Is this component start of a loop construct",
               "name": "group_start",
               "readonly": false,
               "text": "Group start",
               "type": "Boolean",
               "value": false
            }
         ],
         "applicationParams": [
            {
               "description": "MS(s) to be imaged. If multiple mses are specified, they need to be phase-rotated to the same point on the sky",
               "name": "msname",
               "readonly": false,
               "text": "msname",
               "type": "String",
               "value": null
            },
            {
               "description": "Prefix for output products. Default is prefix of MS",
               "name": "prefix",
               "readonly": false,
               "text": "prefix",
               "type": "String",
               "value": null
            },
            {
               "description": "Specify number of computing threads to use, i.e., number of cpu cores that will be used. None means use all  cores",
               "name": "threads",
               "readonly": false,
               "text": "threads",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Limit memory usage to the given fraction of the total system memory. This is an approximate value.",
               "name": "mem",
               "readonly": false,
               "text": "mem",
               "type": "Float",
               "value": 100
            },
            {
               "description": "Like 'mem', but this specifies a fixed amount of memory in gigabytes.",
               "name": "absmem",
               "readonly": false,
               "text": "absmem",
               "type": "Float",
               "value": null
            },
            {
               "description": "Increase verbosity of output",
               "name": "verbose",
               "readonly": false,
               "text": "verbose",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Add date and time to each line in the output.",
               "name": "log-time",
               "readonly": false,
               "text": "log-time",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Do not output anything but errors.",
               "name": "quite",
               "readonly": false,
               "text": "quite",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Force or disable reordering of Measurement Set. This can be faster when the measurement set needs to be iterated several times, such as with many major iterations or in channel imaging mode. If unspecified will only be enabled in channel imaging mode",
               "name": "reorder",
               "readonly": false,
               "text": "reorder",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save model data in model data column after imaging. It can save time not to update the model data column.",
               "name": "no-update-model-required",
               "readonly": false,
               "text": "no-update-model-required",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Do not save the dirty image",
               "name": "no-dirty",
               "readonly": false,
               "text": "no-dirty",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save the gridded weights in the a fits file named <image-prefix>-weights.fits.",
               "name": "saveweights",
               "readonly": false,
               "text": "saveweights",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Calculate and apply the primary beam and save images for the Jones components, with weighting identical to the weighting as used by the imager. Only available for LOFAR.",
               "name": "apply-primary-beam",
               "readonly": false,
               "text": "apply-primary-beam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "If a primary beam image exists on disk, reuse those images (not implemented yet)",
               "name": "reuse-primary-beam",
               "readonly": false,
               "text": "reuse-primary-beam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save the gridded uv plane, i.e., the FFT of the residual image. The UV plane is complex, hence two images will be output: <prefix>-uv-real.fits and <prefix>-uv-imag.fits",
               "name": "saveuv",
               "readonly": false,
               "text": "saveuv",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Assume the visibilities have already been beam-corrected for the reference direction.",
               "name": "set-differential-lofar-beam",
               "readonly": false,
               "text": "set-differential-lofar-beam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Weightmode can be: natural, uniform, briggs. Default: uniform. When using Briggs' weighting, add the robustness parameter, like: 'weight briggs 0.5'",
               "name": "weight",
               "readonly": false,
               "text": "weight",
               "type": "String",
               "value": null
            },
            {
               "description": "Increase the weight gridding box size, similar to Casa's superuniform weighting scheme. The factor can be rational and can be less than one for subpixel weighting.",
               "name": "superweight",
               "readonly": false,
               "text": "superweight",
               "type": "Float",
               "value": null
            },
            {
               "description": "In spectral mode, calculate the weights as if the image was made using MFS. This makes sure that the sum of channel images equals the MFS weights. Otherwise, the channel image will become a bit more naturally weighted. This is only relevant for weighting modes that require gridding (i.e., Uniform, Briggs').",
               "name": "nomfsweighting",
               "readonly": false,
               "text": "nomfsweighting",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Filter the weights and set high weights to the local mean. The level parameter specifies the filter level; any value larger than level*localmean will be set to level*localmean.",
               "name": "weighting-rank-filter",
               "readonly": false,
               "text": "weighting-rank-filter",
               "type": "Float",
               "value": null
            },
            {
               "description": "Set size of weighting rank filter",
               "name": "weighting-rank-filter-size",
               "readonly": false,
               "text": "weighting-rank-filter-size",
               "type": "Float",
               "value": null
            },
            {
               "description": "Taper the weights with a Gaussian function. This will reduce the contribution of long baselines. The beamsize is by default in asec, but a unit can be specified as '2amin'",
               "name": "taper-gaussian",
               "readonly": false,
               "text": "taper-gaussian",
               "type": "String",
               "value": null
            },
            {
               "description": "Taper the outer weights with a Tukey transition. Lambda specifies the size of the transition; use in combination with -maxuv-l.",
               "name": "taper-tukey",
               "readonly": false,
               "text": "taper-tukey",
               "type": "Float",
               "value": null
            },
            {
               "description": "aper the weights with a Tukey transition. Lambda specifies the size of the transition; use in combination with 'minuv-l'",
               "name": "taper-inner-tukey",
               "readonly": false,
               "text": "taper-inner-tukey",
               "type": "Float",
               "value": null
            },
            {
               "description": "Taper the weights with a rectangle, to keep a space of lambda between the edge and gridded visibilities.",
               "name": "taper-edge",
               "readonly": false,
               "text": "taper-edge",
               "type": "Float",
               "value": null
            },
            {
               "description": "Taper the edge weights with a Tukey window. Lambda is the size of the Tukey transition. When 'taper-edge' is also specified, the Tukey transition starts inside the inner rectangle.",
               "name": "taper-edge-tukey",
               "readonly": false,
               "text": "taper-edge-tukey",
               "type": "Float",
               "value": null
            },
            {
               "description": "Image size in pixels. List of integers (width and height) or a single integer for a square image",
               "name": "npix",
               "readonly": false,
               "text": "npix",
               "type": "String",
               "value": [
                  2048,
                  2048
               ]
            },
            {
               "description": "After inversion, trim the image to the given size.",
               "name": "trim",
               "readonly": false,
               "text": "trim",
               "type": "String",
               "value": null
            },
            {
               "description": "Scale of a pixel. Default unit is arcsec, but can be specificied, e.g. 'scale 20asec'",
               "name": "cellsize",
               "readonly": false,
               "text": "cellsize",
               "type": "Float",
               "value": 2
            },
            {
               "description": "Will continue an earlier WSClean run. Earlier model images will be read and model visibilities will be subtracted to create the first dirty residual. CS should have been used in the earlier run, and model data should have been written to the measurement set for this to work",
               "name": "continue",
               "readonly": false,
               "text": "continue",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Subtract the model from the data column in the first iteration. This can be used to reimage an already cleaned image, e.g. at a different resolution.",
               "name": "subtract-model",
               "readonly": false,
               "text": "subtract-model",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Splits the bandwidth and makes count nr. of images",
               "name": "channelsout",
               "readonly": false,
               "text": "channelsout",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Use the minimum suggested w-layers for an image of the given size. Can e.g. be used to increase accuracy when predicting small part of full image.",
               "name": "nwlayers",
               "readonly": false,
               "text": "nwlayers",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Use the minimum suggested w-layers for an image of the given size. Can e.g. be used to increase accuracy when predicting small part of full image.",
               "name": "nwlayers-for-size",
               "readonly": false,
               "text": "nwlayers-for-size",
               "type": "String",
               "value": null
            },
            {
               "description": "Increase the number of w-layers by this factor.",
               "name": "nwlayers-factor",
               "readonly": false,
               "text": "nwlayers-factor",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Perform inversion at the Nyquist resolution and upscale the image to the requested image size afterwards. This speeds up inversion considerably, but makes aliasing slightly worse. This effect is in most cases <1%",
               "name": "nosmallinversion",
               "readonly": false,
               "text": "nosmallinversion",
               "type": "Boolean",
               "value": false
            },
            {
               "description": " Kernel and mode used for gridding: kb = Kaiser-Bessel (default with 7 pixels), nn = nearest neighbour (no kernel), rect = rectangular window.",
               "name": "gridmode",
               "readonly": false,
               "text": "gridmode",
               "type": "String",
               "value": null
            },
            {
               "description": "Gridding antialiasing kernel size",
               "name": "gkernelsize",
               "readonly": false,
               "text": "gkernelsize",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Oversampling factor used during gridding",
               "name": "oversampling",
               "readonly": false,
               "text": "oversampling",
               "type": "Float",
               "value": null
            },
            {
               "description": "Always make the psf, even when no cleaning is performed.",
               "name": "make-psf",
               "readonly": false,
               "text": "make-psf",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Only make psf. No other images are made.",
               "name": "make-psf-only",
               "readonly": false,
               "text": "make-psf-only",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Save the gridding correction image. This shows the effect of the antialiasing filter",
               "name": "savegridding",
               "readonly": false,
               "text": "savegridding",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Predict via a direct Fourier transform. This is slow, but can account for direction-dependent effects. This has only effect when 'mgain' is set or 'predict' is given.",
               "name": "dft-prediction",
               "readonly": false,
               "text": "dft-prediction",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Apply the beam during DFT. Currently only works for LOFAR.",
               "name": "dft-with-beam",
               "readonly": false,
               "text": "dft-with-beam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Specify visibility weighting modi. Affects how the weights (normally) stored in WEIGHT_SPECTRUM column are applied. Useful for estimating e.g. EoR power spectra errors. Normally one would use this in combination with 'no-normalize-for-weighting'.",
               "name": "visibility-weighting-mode",
               "readonly": false,
               "text": "visibility-weighting-mode",
               "type": "String",
               "value": null
            },
            {
               "description": "Disable the normalization for the weights, which makes the PSF's peak one. See 'visibility-weighting-mode'. Only useful with natural weighting.",
               "name": "no-normalize-for-weighting",
               "readonly": false,
               "text": "no-normalize-for-weighting",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Enable baseline-dependent averaging. The specified size is in number of wavelengths (i.e., uvw-units). One way to calculate this is with <baseline in nr. of lambdas> * 2pi * <acceptable integration in s> /(24*60*60).",
               "name": "baseline-averaging",
               "readonly": false,
               "text": "baseline-averaging",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Will replace every visibility by a Gaussian distributed value with given standard deviation before imaging.",
               "name": "simulate-noise",
               "readonly": false,
               "text": "simulate-noise",
               "type": "Float",
               "value": null
            },
            {
               "description": "Default: 'I'. Possible values: XX, XY, YX, YY, I, Q, U, V, RR, RL, LR or LL (case insensitive). Multiple values can be separated with commas, e.g.: 'xx,xy,yx,yy'. Two or four polarizations can be joinedly cleaned (see '-joinpolarizations'), but this is not the default. I, Q, U and V polarizations will be directly calculated from the visibilities, which is not appropriate for telescopes with non-orthogonal feeds, such as MWA and LOFAR. The 'xy' polarization will output both a real and an imaginary image, which allows calculating true Stokes polarizations for those telescopes.",
               "name": "stokes",
               "readonly": false,
               "text": "stokes",
               "type": "String",
               "value": "I"
            },
            {
               "description": "Only image the given time interval. Indices specify the timesteps, end index is exclusive.",
               "name": "interval",
               "readonly": false,
               "text": "interval",
               "type": "String",
               "value": null
            },
            {
               "description": "Number of intervals to image inside the selected global interval",
               "name": "intervalsout",
               "readonly": false,
               "text": "intervalsout",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Only image the given channel range. Indices specify channel indices, end index is exclusive",
               "name": "channelrange",
               "readonly": false,
               "text": "channelrange",
               "type": "String",
               "value": null
            },
            {
               "description": "Image the given field id. Default: first field (id 0)",
               "name": "field",
               "readonly": false,
               "text": "field",
               "type": "Integer",
               "value": 0
            },
            {
               "description": "Selects only the spws given in the list. list should be a comma-separated list of integers",
               "name": "spws",
               "readonly": false,
               "text": "spws",
               "type": "String",
               "value": 0
            },
            {
               "description": "CORRECTED_DATA if it exists, otherwise DATA will be used.",
               "name": "column",
               "readonly": false,
               "text": "column",
               "type": "String",
               "value": null
            },
            {
               "description": "Set maximum baseline distance",
               "name": "maxuvw-m",
               "readonly": false,
               "text": "maxuvw-m",
               "type": "Float",
               "value": null
            },
            {
               "description": "Set minimum baseline distance",
               "name": "minuvw-m",
               "readonly": false,
               "text": "minuvw-m",
               "type": "Float",
               "value": null
            },
            {
               "description": "Set maximum uv distance",
               "name": "maxuv-l",
               "readonly": false,
               "text": "maxuv-l",
               "type": "Float",
               "value": null
            },
            {
               "description": "Set minimum uv distance",
               "name": "minuv-l",
               "readonly": false,
               "text": "minuv-l",
               "type": "Float",
               "value": null
            },
            {
               "description": "Maximum number of clean iterations to perform",
               "name": "clean_iterations",
               "readonly": false,
               "text": "clean_iterations",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Stopping clean thresholding in Jy",
               "name": "threshold",
               "readonly": false,
               "text": "threshold",
               "type": "Float",
               "value": null
            },
            {
               "description": "Estimate noise level using a robust estimator and stop at sigma x stddev.",
               "name": "auto-threshold",
               "readonly": false,
               "text": "auto-threshold",
               "type": "Float",
               "value": null
            },
            {
               "description": "Construct a mask from found components and when a threshold of sigma is reached, continue cleaning with the mask down to the normal threshold.",
               "name": "auto-mask",
               "readonly": false,
               "text": "auto-mask",
               "type": "Float",
               "value": null
            },
            {
               "description": "Instead of using a single RMS for auto thresholding/masking, use a spatially varying RMS image",
               "name": "local-rms",
               "readonly": false,
               "text": "local-rms",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Size of window for creating the RMS background map, in number of PSFs.",
               "name": "local-rms-window",
               "readonly": false,
               "text": "local-rms-window",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Either 'rms' (default, uses sliding window RMS) or 'rms-with-min' (use max(window rms,1.5/5window min))",
               "name": "rms-background-method",
               "readonly": false,
               "text": "rms-background-method",
               "type": "String",
               "value": null
            },
            {
               "description": "Cleaning gain: Ratio of peak that will be subtracted in each iteration",
               "name": "gain",
               "readonly": false,
               "text": "gain",
               "type": "Float",
               "value": null
            },
            {
               "description": "Cleaning gain for major iterations: Ratio of peak that will be subtracted in each major iteration. To use major iterations, 0.85 is a good value.",
               "name": "mgain",
               "readonly": false,
               "text": "mgain",
               "type": "Float",
               "value": null
            },
            {
               "description": "Perform cleaning by searching for peaks in the sum of squares of the polarizations, but subtract components from the individual images. Only possible when imaging two or four Stokes or linear parameters",
               "name": "joinpolarizations",
               "readonly": false,
               "text": "joinpolarizations",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Perform cleaning by searching for peaks in the MFS image, but subtract components from individual channels. This will turn on mfsweighting by default",
               "name": "joinchannels",
               "readonly": false,
               "text": "joinchannels",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Clean on different scales. This is a new algorithm. This parameter invokes the v1.9 multiscale algorithm, which is slower but more accurate compared to the older algorithm, and therefore the recommended one to use. The older algorithm is now invoked with 'fast-multiscale'.",
               "name": "multiscale",
               "readonly": false,
               "text": "multiscale",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Clean on different scales. This is a new fast experimental algorithm. This method used to be invoked with 'multiscale' before v1.9, but the newer multiscale",
               "name": "fast-multiscale",
               "readonly": false,
               "text": "fast-multiscale",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Parameter to prevent cleaning small scales in the large-scale iterations. A higher bias will give more focus to larger scales",
               "name": "multiscale-scale-bias",
               "readonly": false,
               "text": "multiscale-scale-bias",
               "type": "Float",
               "value": null
            },
            {
               "description": "Sets a list of scales to use in multi-scale cleaning. If unset, WSClean will select the delta (zero) scale, scales starting at four times the synthesized PSF, and increase by a factor of two until the maximum scale is reached. Example: -multiscale-scales 0,5,12.5",
               "name": "multiscale-scales",
               "readonly": false,
               "text": "multiscale-scales",
               "type": "String",
               "value": null
            },
            {
               "description": "Use the IUWT deconvolution algorithm",
               "name": "iuwt",
               "readonly": false,
               "text": "iuwt",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Stop IUWT when the SNR decreases. This might help limitting divergence, but can occasionally also stop the algorithm too early.",
               "name": "iuwt-snr-test",
               "readonly": false,
               "text": "iuwt-snr-test",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Set the border size in which no cleaning is performed, in percentage of the width/height of the image. With an image size of 1000 and clean border of 1%, each border is 10 pixels.",
               "name": "cleanborder",
               "readonly": false,
               "text": "cleanborder",
               "type": "Float",
               "value": null
            },
            {
               "description": "Use the specified fits-file as mask during cleaning.",
               "name": "fitsmask",
               "readonly": false,
               "text": "fitsmask",
               "type": "String",
               "value": null
            },
            {
               "description": "Use the specified CASA mask as mask during cleaning.",
               "name": "casamask",
               "readonly": false,
               "text": "casamask",
               "type": "String",
               "value": null
            },
            {
               "description": "Do not allow negative components during cleaning",
               "name": "nonegative",
               "readonly": false,
               "text": "nonegative",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Stop on negative components",
               "name": "stopnegative",
               "readonly": false,
               "text": "stopnegative",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Fit a polynomial over frequency to each clean component. This has only effect when the channels are joined with 'joinchannels'",
               "name": "fit-spectral-pol",
               "readonly": false,
               "text": "fit-spectral-pol",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Decrease the number of channels as specified by 'channelsout' to the given number for deconvolution. Only possible in combination with one of the 'fit-spectral' options. Proper residuals/restored images will only be returned when mgain < 1.",
               "name": "deconvolution-channels",
               "readonly": false,
               "text": "deconvolution-channels",
               "type": "Integer",
               "value": null
            },
            {
               "description": "Use with 'joinchannels' to perform peak finding in the sum of squared values over channels, instead of the normal sum. This is useful for imaging QU polarizations with non-zero rotation measures, for which the normal sum is insensitive.",
               "name": "squared-channel-joining",
               "readonly": false,
               "text": "squared-channel-joining",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Use alternative joined clean algorithm (feature for testing)",
               "name": "force-dynamic-join",
               "readonly": false,
               "text": "force-dynamic-join",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Set a circular beam size (FWHM) in arcsec for restoring the clean components.",
               "name": "beamsize",
               "readonly": false,
               "text": "beamsize",
               "type": "Float",
               "value": null
            },
            {
               "description": "Set the FWHM beam shape for restoring the clean components. Defaults units for maj and min are arcsec, and degrees for PA. Can be overriden, e.g. 'beamshape 1amin 1amin 3deg'. Default is use PSF FWHM sizes",
               "name": "beamshape",
               "readonly": false,
               "text": "beamshape",
               "type": "String",
               "value": null
            },
            {
               "description": "Determine beam shape by fitting the PSF.",
               "name": "fitbeam",
               "readonly": false,
               "text": "fitbeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Write the beam in output fits files as calculated from the longest projected baseline. This method results in slightly less accurate beam size/integrated fluxes, but provides a beam size without making the PSF for quick imaging.",
               "name": "theoreticbeam",
               "readonly": false,
               "text": "theoreticbeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Do not determine beam shape from the PSF",
               "name": "nofitbeam",
               "readonly": false,
               "text": "nofitbeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Force restoring beam to be circular",
               "name": "circularbeam",
               "readonly": false,
               "text": "circularbeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Allow restoring beam to be elliptical",
               "name": "ellipticalbeam",
               "readonly": false,
               "text": "ellipticalbeam",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Factor to increase the image size",
               "name": "padding",
               "readonly": false,
               "text": "padding",
               "type": "Float",
               "value": null
            },
            {
               "description": "Number of major cycles",
               "name": "nmiter",
               "readonly": false,
               "text": "nmiter",
               "type": "Integer",
               "value": null
            },
            {
               "description": "list of model components from wsclean",
               "name": "savesourcelist",
               "readonly": false,
               "text": "savesourcelist",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "list of model components from wsclean",
               "name": "predict",
               "readonly": false,
               "text": "predict",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Noise image to compute sigma for stopping threshold (in case specified it will replace threshold)",
               "name": "noise-image",
               "readonly": false,
               "text": "noise-image",
               "type": "String",
               "value": null
            },
            {
               "description": "Noise sigma for stopping deconvolution in the case where noise-image is provided (new thresh = sigma*noise_image.std())",
               "name": "noise-sigma",
               "readonly": false,
               "text": "noise-sigma",
               "type": "Float",
               "value": null
            },
            {
               "description": "Use a mask that avoids cleaning emission beyond the horizon. Distance is an angle (e.g. '5deg') that (when positive) decreases the size of the mask to stay further away from the horizon",
               "name": "horizontal-mask",
               "readonly": false,
               "text": "horizontal-mask",
               "type": "String",
               "value": null
            },
            {
               "description": "Enabled direct allocation, which changes memory usage. Not recommended for general usage, but when using extremely large images that barely fit in memory it might improve memory usage in rare cases",
               "name": "direct-allocation",
               "readonly": false,
               "text": "direct-allocation",
               "type": "Boolean",
               "value": false
            },
            {
               "description": "Deconvolve subimages in parallel. Subimages will be at most of the given size",
               "name": "parallel-deconvolution",
               "readonly": false,
               "text": "parallel-deconvolution",
               "type": "Integer",
               "value": null
            }
         ],
         "flipPorts": false,
         "height": 200,
         "inputPorts": [],
         "isData": false,
         "isGroup": false,
         "key": null,
         "outputPorts": [],
         "parentKey": null,
         "readonly": true,
         "selected": false,
         "showPorts": false,
         "streaming": false,
         "subject": null,
         "text": "wsclean",
         "width": 200,
         "x": 0,
         "y": 0
      }
   ]
}